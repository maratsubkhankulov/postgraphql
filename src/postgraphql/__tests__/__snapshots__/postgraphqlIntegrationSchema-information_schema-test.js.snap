exports[`test prints the GraphQL schema for \`information_schema\` 1`] = `
"type _PgForeignDataWrapper {
  oid: Float
  fdwowner: Float
  fdwoptions: [String]
  foreignDataWrapperCatalog: SqlIdentifier
  foreignDataWrapperName: SqlIdentifier
  authorizationIdentifier: SqlIdentifier
  foreignDataWrapperLanguage: CharacterData
}

# A connection to a list of \`_PgForeignDataWrapper\` values.
type _PgForeignDataWrappersConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`_PgForeignDataWrapper\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`_PgForeignDataWrapper\` and cursor to aid in pagination.
  edges: [_PgForeignDataWrappersEdge]

  # A list of \`_PgForeignDataWrapper\` objects.
  nodes: [_PgForeignDataWrapper!]
}

# A \`_PgForeignDataWrapper\` edge in the connection.
type _PgForeignDataWrappersEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`_PgForeignDataWrapper\` at the end of the edge.
  node: _PgForeignDataWrapper!
}

# Methods to use when ordering \`_PgForeignDataWrapper\`.
enum _PgForeignDataWrappersOrderBy {
  NATURAL
  OID_ASC
  OID_DESC
  FDWOWNER_ASC
  FDWOWNER_DESC
  FDWOPTIONS_ASC
  FDWOPTIONS_DESC
  FOREIGN_DATA_WRAPPER_CATALOG_ASC
  FOREIGN_DATA_WRAPPER_CATALOG_DESC
  FOREIGN_DATA_WRAPPER_NAME_ASC
  FOREIGN_DATA_WRAPPER_NAME_DESC
  AUTHORIZATION_IDENTIFIER_ASC
  AUTHORIZATION_IDENTIFIER_DESC
  FOREIGN_DATA_WRAPPER_LANGUAGE_ASC
  FOREIGN_DATA_WRAPPER_LANGUAGE_DESC
}

type _PgForeignServer {
  oid: Float
  srvoptions: [String]
  foreignServerCatalog: SqlIdentifier
  foreignServerName: SqlIdentifier
  foreignDataWrapperCatalog: SqlIdentifier
  foreignDataWrapperName: SqlIdentifier
  foreignServerType: CharacterData
  foreignServerVersion: CharacterData
  authorizationIdentifier: SqlIdentifier
}

# A connection to a list of \`_PgForeignServer\` values.
type _PgForeignServersConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`_PgForeignServer\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`_PgForeignServer\` and cursor to aid in pagination.
  edges: [_PgForeignServersEdge]

  # A list of \`_PgForeignServer\` objects.
  nodes: [_PgForeignServer!]
}

# A \`_PgForeignServer\` edge in the connection.
type _PgForeignServersEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`_PgForeignServer\` at the end of the edge.
  node: _PgForeignServer!
}

# Methods to use when ordering \`_PgForeignServer\`.
enum _PgForeignServersOrderBy {
  NATURAL
  OID_ASC
  OID_DESC
  SRVOPTIONS_ASC
  SRVOPTIONS_DESC
  FOREIGN_SERVER_CATALOG_ASC
  FOREIGN_SERVER_CATALOG_DESC
  FOREIGN_SERVER_NAME_ASC
  FOREIGN_SERVER_NAME_DESC
  FOREIGN_DATA_WRAPPER_CATALOG_ASC
  FOREIGN_DATA_WRAPPER_CATALOG_DESC
  FOREIGN_DATA_WRAPPER_NAME_ASC
  FOREIGN_DATA_WRAPPER_NAME_DESC
  FOREIGN_SERVER_TYPE_ASC
  FOREIGN_SERVER_TYPE_DESC
  FOREIGN_SERVER_VERSION_ASC
  FOREIGN_SERVER_VERSION_DESC
  AUTHORIZATION_IDENTIFIER_ASC
  AUTHORIZATION_IDENTIFIER_DESC
}

type _PgForeignTable {
  foreignTableCatalog: SqlIdentifier
  foreignTableSchema: String
  foreignTableName: String
  ftoptions: [String]
  foreignServerCatalog: SqlIdentifier
  foreignServerName: SqlIdentifier
  authorizationIdentifier: SqlIdentifier
}

type _PgForeignTableColumn {
  nspname: String
  relname: String
  attname: String
  attfdwoptions: [String]
}

# A connection to a list of \`_PgForeignTableColumn\` values.
type _PgForeignTableColumnsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`_PgForeignTableColumn\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`_PgForeignTableColumn\` and cursor to aid in pagination.
  edges: [_PgForeignTableColumnsEdge]

  # A list of \`_PgForeignTableColumn\` objects.
  nodes: [_PgForeignTableColumn!]
}

# A \`_PgForeignTableColumn\` edge in the connection.
type _PgForeignTableColumnsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`_PgForeignTableColumn\` at the end of the edge.
  node: _PgForeignTableColumn!
}

# Methods to use when ordering \`_PgForeignTableColumn\`.
enum _PgForeignTableColumnsOrderBy {
  NATURAL
  NSPNAME_ASC
  NSPNAME_DESC
  RELNAME_ASC
  RELNAME_DESC
  ATTNAME_ASC
  ATTNAME_DESC
  ATTFDWOPTIONS_ASC
  ATTFDWOPTIONS_DESC
}

# A connection to a list of \`_PgForeignTable\` values.
type _PgForeignTablesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`_PgForeignTable\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`_PgForeignTable\` and cursor to aid in pagination.
  edges: [_PgForeignTablesEdge]

  # A list of \`_PgForeignTable\` objects.
  nodes: [_PgForeignTable!]
}

# A \`_PgForeignTable\` edge in the connection.
type _PgForeignTablesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`_PgForeignTable\` at the end of the edge.
  node: _PgForeignTable!
}

# Methods to use when ordering \`_PgForeignTable\`.
enum _PgForeignTablesOrderBy {
  NATURAL
  FOREIGN_TABLE_CATALOG_ASC
  FOREIGN_TABLE_CATALOG_DESC
  FOREIGN_TABLE_SCHEMA_ASC
  FOREIGN_TABLE_SCHEMA_DESC
  FOREIGN_TABLE_NAME_ASC
  FOREIGN_TABLE_NAME_DESC
  FTOPTIONS_ASC
  FTOPTIONS_DESC
  FOREIGN_SERVER_CATALOG_ASC
  FOREIGN_SERVER_CATALOG_DESC
  FOREIGN_SERVER_NAME_ASC
  FOREIGN_SERVER_NAME_DESC
  AUTHORIZATION_IDENTIFIER_ASC
  AUTHORIZATION_IDENTIFIER_DESC
}

type _PgUserMapping {
  oid: Float
  umoptions: [String]
  umuser: Float
  authorizationIdentifier: SqlIdentifier
  foreignServerCatalog: SqlIdentifier
  foreignServerName: SqlIdentifier
  srvowner: SqlIdentifier
}

# A connection to a list of \`_PgUserMapping\` values.
type _PgUserMappingsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`_PgUserMapping\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`_PgUserMapping\` and cursor to aid in pagination.
  edges: [_PgUserMappingsEdge]

  # A list of \`_PgUserMapping\` objects.
  nodes: [_PgUserMapping!]
}

# A \`_PgUserMapping\` edge in the connection.
type _PgUserMappingsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`_PgUserMapping\` at the end of the edge.
  node: _PgUserMapping!
}

# Methods to use when ordering \`_PgUserMapping\`.
enum _PgUserMappingsOrderBy {
  NATURAL
  OID_ASC
  OID_DESC
  UMOPTIONS_ASC
  UMOPTIONS_DESC
  UMUSER_ASC
  UMUSER_DESC
  AUTHORIZATION_IDENTIFIER_ASC
  AUTHORIZATION_IDENTIFIER_DESC
  FOREIGN_SERVER_CATALOG_ASC
  FOREIGN_SERVER_CATALOG_DESC
  FOREIGN_SERVER_NAME_ASC
  FOREIGN_SERVER_NAME_DESC
  SRVOWNER_ASC
  SRVOWNER_DESC
}

type AdministrableRoleAuthorization {
  grantee: SqlIdentifier
  roleName: SqlIdentifier
  isGrantable: YesOrNo
}

# A connection to a list of \`AdministrableRoleAuthorization\` values.
type AdministrableRoleAuthorizationsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`AdministrableRoleAuthorization\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`AdministrableRoleAuthorization\` and cursor to aid in pagination.
  edges: [AdministrableRoleAuthorizationsEdge]

  # A list of \`AdministrableRoleAuthorization\` objects.
  nodes: [AdministrableRoleAuthorization!]
}

# A \`AdministrableRoleAuthorization\` edge in the connection.
type AdministrableRoleAuthorizationsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`AdministrableRoleAuthorization\` at the end of the edge.
  node: AdministrableRoleAuthorization!
}

# Methods to use when ordering \`AdministrableRoleAuthorization\`.
enum AdministrableRoleAuthorizationsOrderBy {
  NATURAL
  GRANTEE_ASC
  GRANTEE_DESC
  ROLE_NAME_ASC
  ROLE_NAME_DESC
  IS_GRANTABLE_ASC
  IS_GRANTABLE_DESC
}

type ApplicableRole {
  grantee: SqlIdentifier
  roleName: SqlIdentifier
  isGrantable: YesOrNo
}

# A connection to a list of \`ApplicableRole\` values.
type ApplicableRolesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`ApplicableRole\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`ApplicableRole\` and cursor to aid in pagination.
  edges: [ApplicableRolesEdge]

  # A list of \`ApplicableRole\` objects.
  nodes: [ApplicableRole!]
}

# A \`ApplicableRole\` edge in the connection.
type ApplicableRolesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`ApplicableRole\` at the end of the edge.
  node: ApplicableRole!
}

# Methods to use when ordering \`ApplicableRole\`.
enum ApplicableRolesOrderBy {
  NATURAL
  GRANTEE_ASC
  GRANTEE_DESC
  ROLE_NAME_ASC
  ROLE_NAME_DESC
  IS_GRANTABLE_ASC
  IS_GRANTABLE_DESC
}

type Attribute {
  udtCatalog: SqlIdentifier
  udtSchema: SqlIdentifier
  udtName: SqlIdentifier
  attributeName: SqlIdentifier
  ordinalPosition: CardinalNumber
  attributeDefault: CharacterData
  isNullable: YesOrNo
  dataType: CharacterData
  characterMaximumLength: CardinalNumber
  characterOctetLength: CardinalNumber
  characterSetCatalog: SqlIdentifier
  characterSetSchema: SqlIdentifier
  characterSetName: SqlIdentifier
  collationCatalog: SqlIdentifier
  collationSchema: SqlIdentifier
  collationName: SqlIdentifier
  numericPrecision: CardinalNumber
  numericPrecisionRadix: CardinalNumber
  numericScale: CardinalNumber
  datetimePrecision: CardinalNumber
  intervalType: CharacterData
  intervalPrecision: CardinalNumber
  attributeUdtCatalog: SqlIdentifier
  attributeUdtSchema: SqlIdentifier
  attributeUdtName: SqlIdentifier
  scopeCatalog: SqlIdentifier
  scopeSchema: SqlIdentifier
  scopeName: SqlIdentifier
  maximumCardinality: CardinalNumber
  dtdIdentifier: SqlIdentifier
  isDerivedReferenceAttribute: YesOrNo
}

# A connection to a list of \`Attribute\` values.
type AttributesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`Attribute\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`Attribute\` and cursor to aid in pagination.
  edges: [AttributesEdge]

  # A list of \`Attribute\` objects.
  nodes: [Attribute!]
}

# A \`Attribute\` edge in the connection.
type AttributesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`Attribute\` at the end of the edge.
  node: Attribute!
}

# Methods to use when ordering \`Attribute\`.
enum AttributesOrderBy {
  NATURAL
  UDT_CATALOG_ASC
  UDT_CATALOG_DESC
  UDT_SCHEMA_ASC
  UDT_SCHEMA_DESC
  UDT_NAME_ASC
  UDT_NAME_DESC
  ATTRIBUTE_NAME_ASC
  ATTRIBUTE_NAME_DESC
  ORDINAL_POSITION_ASC
  ORDINAL_POSITION_DESC
  ATTRIBUTE_DEFAULT_ASC
  ATTRIBUTE_DEFAULT_DESC
  IS_NULLABLE_ASC
  IS_NULLABLE_DESC
  DATA_TYPE_ASC
  DATA_TYPE_DESC
  CHARACTER_MAXIMUM_LENGTH_ASC
  CHARACTER_MAXIMUM_LENGTH_DESC
  CHARACTER_OCTET_LENGTH_ASC
  CHARACTER_OCTET_LENGTH_DESC
  CHARACTER_SET_CATALOG_ASC
  CHARACTER_SET_CATALOG_DESC
  CHARACTER_SET_SCHEMA_ASC
  CHARACTER_SET_SCHEMA_DESC
  CHARACTER_SET_NAME_ASC
  CHARACTER_SET_NAME_DESC
  COLLATION_CATALOG_ASC
  COLLATION_CATALOG_DESC
  COLLATION_SCHEMA_ASC
  COLLATION_SCHEMA_DESC
  COLLATION_NAME_ASC
  COLLATION_NAME_DESC
  NUMERIC_PRECISION_ASC
  NUMERIC_PRECISION_DESC
  NUMERIC_PRECISION_RADIX_ASC
  NUMERIC_PRECISION_RADIX_DESC
  NUMERIC_SCALE_ASC
  NUMERIC_SCALE_DESC
  DATETIME_PRECISION_ASC
  DATETIME_PRECISION_DESC
  INTERVAL_TYPE_ASC
  INTERVAL_TYPE_DESC
  INTERVAL_PRECISION_ASC
  INTERVAL_PRECISION_DESC
  ATTRIBUTE_UDT_CATALOG_ASC
  ATTRIBUTE_UDT_CATALOG_DESC
  ATTRIBUTE_UDT_SCHEMA_ASC
  ATTRIBUTE_UDT_SCHEMA_DESC
  ATTRIBUTE_UDT_NAME_ASC
  ATTRIBUTE_UDT_NAME_DESC
  SCOPE_CATALOG_ASC
  SCOPE_CATALOG_DESC
  SCOPE_SCHEMA_ASC
  SCOPE_SCHEMA_DESC
  SCOPE_NAME_ASC
  SCOPE_NAME_DESC
  MAXIMUM_CARDINALITY_ASC
  MAXIMUM_CARDINALITY_DESC
  DTD_IDENTIFIER_ASC
  DTD_IDENTIFIER_DESC
  IS_DERIVED_REFERENCE_ATTRIBUTE_ASC
  IS_DERIVED_REFERENCE_ATTRIBUTE_DESC
}

scalar CardinalNumber

scalar CharacterData

type CharacterSet {
  characterSetCatalog: SqlIdentifier
  characterSetSchema: SqlIdentifier
  characterSetName: SqlIdentifier
  characterRepertoire: SqlIdentifier
  formOfUse: SqlIdentifier
  defaultCollateCatalog: SqlIdentifier
  defaultCollateSchema: SqlIdentifier
  defaultCollateName: SqlIdentifier
}

# A connection to a list of \`CharacterSet\` values.
type CharacterSetsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`CharacterSet\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`CharacterSet\` and cursor to aid in pagination.
  edges: [CharacterSetsEdge]

  # A list of \`CharacterSet\` objects.
  nodes: [CharacterSet!]
}

# A \`CharacterSet\` edge in the connection.
type CharacterSetsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`CharacterSet\` at the end of the edge.
  node: CharacterSet!
}

# Methods to use when ordering \`CharacterSet\`.
enum CharacterSetsOrderBy {
  NATURAL
  CHARACTER_SET_CATALOG_ASC
  CHARACTER_SET_CATALOG_DESC
  CHARACTER_SET_SCHEMA_ASC
  CHARACTER_SET_SCHEMA_DESC
  CHARACTER_SET_NAME_ASC
  CHARACTER_SET_NAME_DESC
  CHARACTER_REPERTOIRE_ASC
  CHARACTER_REPERTOIRE_DESC
  FORM_OF_USE_ASC
  FORM_OF_USE_DESC
  DEFAULT_COLLATE_CATALOG_ASC
  DEFAULT_COLLATE_CATALOG_DESC
  DEFAULT_COLLATE_SCHEMA_ASC
  DEFAULT_COLLATE_SCHEMA_DESC
  DEFAULT_COLLATE_NAME_ASC
  DEFAULT_COLLATE_NAME_DESC
}

type CheckConstraint {
  constraintCatalog: SqlIdentifier
  constraintSchema: SqlIdentifier
  constraintName: SqlIdentifier
  checkClause: CharacterData
}

type CheckConstraintRoutineUsage {
  constraintCatalog: SqlIdentifier
  constraintSchema: SqlIdentifier
  constraintName: SqlIdentifier
  specificCatalog: SqlIdentifier
  specificSchema: SqlIdentifier
  specificName: SqlIdentifier
}

# A connection to a list of \`CheckConstraintRoutineUsage\` values.
type CheckConstraintRoutineUsagesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`CheckConstraintRoutineUsage\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`CheckConstraintRoutineUsage\` and cursor to aid in pagination.
  edges: [CheckConstraintRoutineUsagesEdge]

  # A list of \`CheckConstraintRoutineUsage\` objects.
  nodes: [CheckConstraintRoutineUsage!]
}

# A \`CheckConstraintRoutineUsage\` edge in the connection.
type CheckConstraintRoutineUsagesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`CheckConstraintRoutineUsage\` at the end of the edge.
  node: CheckConstraintRoutineUsage!
}

# Methods to use when ordering \`CheckConstraintRoutineUsage\`.
enum CheckConstraintRoutineUsagesOrderBy {
  NATURAL
  CONSTRAINT_CATALOG_ASC
  CONSTRAINT_CATALOG_DESC
  CONSTRAINT_SCHEMA_ASC
  CONSTRAINT_SCHEMA_DESC
  CONSTRAINT_NAME_ASC
  CONSTRAINT_NAME_DESC
  SPECIFIC_CATALOG_ASC
  SPECIFIC_CATALOG_DESC
  SPECIFIC_SCHEMA_ASC
  SPECIFIC_SCHEMA_DESC
  SPECIFIC_NAME_ASC
  SPECIFIC_NAME_DESC
}

# A connection to a list of \`CheckConstraint\` values.
type CheckConstraintsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`CheckConstraint\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`CheckConstraint\` and cursor to aid in pagination.
  edges: [CheckConstraintsEdge]

  # A list of \`CheckConstraint\` objects.
  nodes: [CheckConstraint!]
}

# A \`CheckConstraint\` edge in the connection.
type CheckConstraintsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`CheckConstraint\` at the end of the edge.
  node: CheckConstraint!
}

# Methods to use when ordering \`CheckConstraint\`.
enum CheckConstraintsOrderBy {
  NATURAL
  CONSTRAINT_CATALOG_ASC
  CONSTRAINT_CATALOG_DESC
  CONSTRAINT_SCHEMA_ASC
  CONSTRAINT_SCHEMA_DESC
  CONSTRAINT_NAME_ASC
  CONSTRAINT_NAME_DESC
  CHECK_CLAUSE_ASC
  CHECK_CLAUSE_DESC
}

type Collation {
  collationCatalog: SqlIdentifier
  collationSchema: SqlIdentifier
  collationName: SqlIdentifier
  padAttribute: CharacterData
}

# A connection to a list of \`CollationCharacterSetApplicability\` values.
type CollationCharacterSetApplicabilitiesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`CollationCharacterSetApplicability\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`CollationCharacterSetApplicability\` and cursor to aid in pagination.
  edges: [CollationCharacterSetApplicabilitiesEdge]

  # A list of \`CollationCharacterSetApplicability\` objects.
  nodes: [CollationCharacterSetApplicability!]
}

# A \`CollationCharacterSetApplicability\` edge in the connection.
type CollationCharacterSetApplicabilitiesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`CollationCharacterSetApplicability\` at the end of the edge.
  node: CollationCharacterSetApplicability!
}

# Methods to use when ordering \`CollationCharacterSetApplicability\`.
enum CollationCharacterSetApplicabilitiesOrderBy {
  NATURAL
  COLLATION_CATALOG_ASC
  COLLATION_CATALOG_DESC
  COLLATION_SCHEMA_ASC
  COLLATION_SCHEMA_DESC
  COLLATION_NAME_ASC
  COLLATION_NAME_DESC
  CHARACTER_SET_CATALOG_ASC
  CHARACTER_SET_CATALOG_DESC
  CHARACTER_SET_SCHEMA_ASC
  CHARACTER_SET_SCHEMA_DESC
  CHARACTER_SET_NAME_ASC
  CHARACTER_SET_NAME_DESC
}

type CollationCharacterSetApplicability {
  collationCatalog: SqlIdentifier
  collationSchema: SqlIdentifier
  collationName: SqlIdentifier
  characterSetCatalog: SqlIdentifier
  characterSetSchema: SqlIdentifier
  characterSetName: SqlIdentifier
}

# A connection to a list of \`Collation\` values.
type CollationsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`Collation\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`Collation\` and cursor to aid in pagination.
  edges: [CollationsEdge]

  # A list of \`Collation\` objects.
  nodes: [Collation!]
}

# A \`Collation\` edge in the connection.
type CollationsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`Collation\` at the end of the edge.
  node: Collation!
}

# Methods to use when ordering \`Collation\`.
enum CollationsOrderBy {
  NATURAL
  COLLATION_CATALOG_ASC
  COLLATION_CATALOG_DESC
  COLLATION_SCHEMA_ASC
  COLLATION_SCHEMA_DESC
  COLLATION_NAME_ASC
  COLLATION_NAME_DESC
  PAD_ATTRIBUTE_ASC
  PAD_ATTRIBUTE_DESC
}

type Column {
  tableCatalog: SqlIdentifier
  tableSchema: SqlIdentifier
  tableName: SqlIdentifier
  columnName: SqlIdentifier
  ordinalPosition: CardinalNumber
  columnDefault: CharacterData
  isNullable: YesOrNo
  dataType: CharacterData
  characterMaximumLength: CardinalNumber
  characterOctetLength: CardinalNumber
  numericPrecision: CardinalNumber
  numericPrecisionRadix: CardinalNumber
  numericScale: CardinalNumber
  datetimePrecision: CardinalNumber
  intervalType: CharacterData
  intervalPrecision: CardinalNumber
  characterSetCatalog: SqlIdentifier
  characterSetSchema: SqlIdentifier
  characterSetName: SqlIdentifier
  collationCatalog: SqlIdentifier
  collationSchema: SqlIdentifier
  collationName: SqlIdentifier
  domainCatalog: SqlIdentifier
  domainSchema: SqlIdentifier
  domainName: SqlIdentifier
  udtCatalog: SqlIdentifier
  udtSchema: SqlIdentifier
  udtName: SqlIdentifier
  scopeCatalog: SqlIdentifier
  scopeSchema: SqlIdentifier
  scopeName: SqlIdentifier
  maximumCardinality: CardinalNumber
  dtdIdentifier: SqlIdentifier
  isSelfReferencing: YesOrNo
  isIdentity: YesOrNo
  identityGeneration: CharacterData
  identityStart: CharacterData
  identityIncrement: CharacterData
  identityMaximum: CharacterData
  identityMinimum: CharacterData
  identityCycle: YesOrNo
  isGenerated: CharacterData
  generationExpression: CharacterData
  isUpdatable: YesOrNo
}

type ColumnDomainUsage {
  domainCatalog: SqlIdentifier
  domainSchema: SqlIdentifier
  domainName: SqlIdentifier
  tableCatalog: SqlIdentifier
  tableSchema: SqlIdentifier
  tableName: SqlIdentifier
  columnName: SqlIdentifier
}

# A connection to a list of \`ColumnDomainUsage\` values.
type ColumnDomainUsagesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`ColumnDomainUsage\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`ColumnDomainUsage\` and cursor to aid in pagination.
  edges: [ColumnDomainUsagesEdge]

  # A list of \`ColumnDomainUsage\` objects.
  nodes: [ColumnDomainUsage!]
}

# A \`ColumnDomainUsage\` edge in the connection.
type ColumnDomainUsagesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`ColumnDomainUsage\` at the end of the edge.
  node: ColumnDomainUsage!
}

# Methods to use when ordering \`ColumnDomainUsage\`.
enum ColumnDomainUsagesOrderBy {
  NATURAL
  DOMAIN_CATALOG_ASC
  DOMAIN_CATALOG_DESC
  DOMAIN_SCHEMA_ASC
  DOMAIN_SCHEMA_DESC
  DOMAIN_NAME_ASC
  DOMAIN_NAME_DESC
  TABLE_CATALOG_ASC
  TABLE_CATALOG_DESC
  TABLE_SCHEMA_ASC
  TABLE_SCHEMA_DESC
  TABLE_NAME_ASC
  TABLE_NAME_DESC
  COLUMN_NAME_ASC
  COLUMN_NAME_DESC
}

type ColumnOption {
  tableCatalog: SqlIdentifier
  tableSchema: String
  tableName: String
  columnName: String
  optionName: SqlIdentifier
  optionValue: CharacterData
}

# A connection to a list of \`ColumnOption\` values.
type ColumnOptionsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`ColumnOption\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`ColumnOption\` and cursor to aid in pagination.
  edges: [ColumnOptionsEdge]

  # A list of \`ColumnOption\` objects.
  nodes: [ColumnOption!]
}

# A \`ColumnOption\` edge in the connection.
type ColumnOptionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`ColumnOption\` at the end of the edge.
  node: ColumnOption!
}

# Methods to use when ordering \`ColumnOption\`.
enum ColumnOptionsOrderBy {
  NATURAL
  TABLE_CATALOG_ASC
  TABLE_CATALOG_DESC
  TABLE_SCHEMA_ASC
  TABLE_SCHEMA_DESC
  TABLE_NAME_ASC
  TABLE_NAME_DESC
  COLUMN_NAME_ASC
  COLUMN_NAME_DESC
  OPTION_NAME_ASC
  OPTION_NAME_DESC
  OPTION_VALUE_ASC
  OPTION_VALUE_DESC
}

type ColumnPrivilege {
  grantor: SqlIdentifier
  grantee: SqlIdentifier
  tableCatalog: SqlIdentifier
  tableSchema: SqlIdentifier
  tableName: SqlIdentifier
  columnName: SqlIdentifier
  privilegeType: CharacterData
  isGrantable: YesOrNo
}

# A connection to a list of \`ColumnPrivilege\` values.
type ColumnPrivilegesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`ColumnPrivilege\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`ColumnPrivilege\` and cursor to aid in pagination.
  edges: [ColumnPrivilegesEdge]

  # A list of \`ColumnPrivilege\` objects.
  nodes: [ColumnPrivilege!]
}

# A \`ColumnPrivilege\` edge in the connection.
type ColumnPrivilegesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`ColumnPrivilege\` at the end of the edge.
  node: ColumnPrivilege!
}

# Methods to use when ordering \`ColumnPrivilege\`.
enum ColumnPrivilegesOrderBy {
  NATURAL
  GRANTOR_ASC
  GRANTOR_DESC
  GRANTEE_ASC
  GRANTEE_DESC
  TABLE_CATALOG_ASC
  TABLE_CATALOG_DESC
  TABLE_SCHEMA_ASC
  TABLE_SCHEMA_DESC
  TABLE_NAME_ASC
  TABLE_NAME_DESC
  COLUMN_NAME_ASC
  COLUMN_NAME_DESC
  PRIVILEGE_TYPE_ASC
  PRIVILEGE_TYPE_DESC
  IS_GRANTABLE_ASC
  IS_GRANTABLE_DESC
}

# A connection to a list of \`Column\` values.
type ColumnsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`Column\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`Column\` and cursor to aid in pagination.
  edges: [ColumnsEdge]

  # A list of \`Column\` objects.
  nodes: [Column!]
}

# A \`Column\` edge in the connection.
type ColumnsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`Column\` at the end of the edge.
  node: Column!
}

# Methods to use when ordering \`Column\`.
enum ColumnsOrderBy {
  NATURAL
  TABLE_CATALOG_ASC
  TABLE_CATALOG_DESC
  TABLE_SCHEMA_ASC
  TABLE_SCHEMA_DESC
  TABLE_NAME_ASC
  TABLE_NAME_DESC
  COLUMN_NAME_ASC
  COLUMN_NAME_DESC
  ORDINAL_POSITION_ASC
  ORDINAL_POSITION_DESC
  COLUMN_DEFAULT_ASC
  COLUMN_DEFAULT_DESC
  IS_NULLABLE_ASC
  IS_NULLABLE_DESC
  DATA_TYPE_ASC
  DATA_TYPE_DESC
  CHARACTER_MAXIMUM_LENGTH_ASC
  CHARACTER_MAXIMUM_LENGTH_DESC
  CHARACTER_OCTET_LENGTH_ASC
  CHARACTER_OCTET_LENGTH_DESC
  NUMERIC_PRECISION_ASC
  NUMERIC_PRECISION_DESC
  NUMERIC_PRECISION_RADIX_ASC
  NUMERIC_PRECISION_RADIX_DESC
  NUMERIC_SCALE_ASC
  NUMERIC_SCALE_DESC
  DATETIME_PRECISION_ASC
  DATETIME_PRECISION_DESC
  INTERVAL_TYPE_ASC
  INTERVAL_TYPE_DESC
  INTERVAL_PRECISION_ASC
  INTERVAL_PRECISION_DESC
  CHARACTER_SET_CATALOG_ASC
  CHARACTER_SET_CATALOG_DESC
  CHARACTER_SET_SCHEMA_ASC
  CHARACTER_SET_SCHEMA_DESC
  CHARACTER_SET_NAME_ASC
  CHARACTER_SET_NAME_DESC
  COLLATION_CATALOG_ASC
  COLLATION_CATALOG_DESC
  COLLATION_SCHEMA_ASC
  COLLATION_SCHEMA_DESC
  COLLATION_NAME_ASC
  COLLATION_NAME_DESC
  DOMAIN_CATALOG_ASC
  DOMAIN_CATALOG_DESC
  DOMAIN_SCHEMA_ASC
  DOMAIN_SCHEMA_DESC
  DOMAIN_NAME_ASC
  DOMAIN_NAME_DESC
  UDT_CATALOG_ASC
  UDT_CATALOG_DESC
  UDT_SCHEMA_ASC
  UDT_SCHEMA_DESC
  UDT_NAME_ASC
  UDT_NAME_DESC
  SCOPE_CATALOG_ASC
  SCOPE_CATALOG_DESC
  SCOPE_SCHEMA_ASC
  SCOPE_SCHEMA_DESC
  SCOPE_NAME_ASC
  SCOPE_NAME_DESC
  MAXIMUM_CARDINALITY_ASC
  MAXIMUM_CARDINALITY_DESC
  DTD_IDENTIFIER_ASC
  DTD_IDENTIFIER_DESC
  IS_SELF_REFERENCING_ASC
  IS_SELF_REFERENCING_DESC
  IS_IDENTITY_ASC
  IS_IDENTITY_DESC
  IDENTITY_GENERATION_ASC
  IDENTITY_GENERATION_DESC
  IDENTITY_START_ASC
  IDENTITY_START_DESC
  IDENTITY_INCREMENT_ASC
  IDENTITY_INCREMENT_DESC
  IDENTITY_MAXIMUM_ASC
  IDENTITY_MAXIMUM_DESC
  IDENTITY_MINIMUM_ASC
  IDENTITY_MINIMUM_DESC
  IDENTITY_CYCLE_ASC
  IDENTITY_CYCLE_DESC
  IS_GENERATED_ASC
  IS_GENERATED_DESC
  GENERATION_EXPRESSION_ASC
  GENERATION_EXPRESSION_DESC
  IS_UPDATABLE_ASC
  IS_UPDATABLE_DESC
}

type ColumnUdtUsage {
  udtCatalog: SqlIdentifier
  udtSchema: SqlIdentifier
  udtName: SqlIdentifier
  tableCatalog: SqlIdentifier
  tableSchema: SqlIdentifier
  tableName: SqlIdentifier
  columnName: SqlIdentifier
}

# A connection to a list of \`ColumnUdtUsage\` values.
type ColumnUdtUsagesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`ColumnUdtUsage\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`ColumnUdtUsage\` and cursor to aid in pagination.
  edges: [ColumnUdtUsagesEdge]

  # A list of \`ColumnUdtUsage\` objects.
  nodes: [ColumnUdtUsage!]
}

# A \`ColumnUdtUsage\` edge in the connection.
type ColumnUdtUsagesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`ColumnUdtUsage\` at the end of the edge.
  node: ColumnUdtUsage!
}

# Methods to use when ordering \`ColumnUdtUsage\`.
enum ColumnUdtUsagesOrderBy {
  NATURAL
  UDT_CATALOG_ASC
  UDT_CATALOG_DESC
  UDT_SCHEMA_ASC
  UDT_SCHEMA_DESC
  UDT_NAME_ASC
  UDT_NAME_DESC
  TABLE_CATALOG_ASC
  TABLE_CATALOG_DESC
  TABLE_SCHEMA_ASC
  TABLE_SCHEMA_DESC
  TABLE_NAME_ASC
  TABLE_NAME_DESC
  COLUMN_NAME_ASC
  COLUMN_NAME_DESC
}

type ConstraintColumnUsage {
  tableCatalog: SqlIdentifier
  tableSchema: SqlIdentifier
  tableName: SqlIdentifier
  columnName: SqlIdentifier
  constraintCatalog: SqlIdentifier
  constraintSchema: SqlIdentifier
  constraintName: SqlIdentifier
}

# A connection to a list of \`ConstraintColumnUsage\` values.
type ConstraintColumnUsagesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`ConstraintColumnUsage\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`ConstraintColumnUsage\` and cursor to aid in pagination.
  edges: [ConstraintColumnUsagesEdge]

  # A list of \`ConstraintColumnUsage\` objects.
  nodes: [ConstraintColumnUsage!]
}

# A \`ConstraintColumnUsage\` edge in the connection.
type ConstraintColumnUsagesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`ConstraintColumnUsage\` at the end of the edge.
  node: ConstraintColumnUsage!
}

# Methods to use when ordering \`ConstraintColumnUsage\`.
enum ConstraintColumnUsagesOrderBy {
  NATURAL
  TABLE_CATALOG_ASC
  TABLE_CATALOG_DESC
  TABLE_SCHEMA_ASC
  TABLE_SCHEMA_DESC
  TABLE_NAME_ASC
  TABLE_NAME_DESC
  COLUMN_NAME_ASC
  COLUMN_NAME_DESC
  CONSTRAINT_CATALOG_ASC
  CONSTRAINT_CATALOG_DESC
  CONSTRAINT_SCHEMA_ASC
  CONSTRAINT_SCHEMA_DESC
  CONSTRAINT_NAME_ASC
  CONSTRAINT_NAME_DESC
}

type ConstraintTableUsage {
  tableCatalog: SqlIdentifier
  tableSchema: SqlIdentifier
  tableName: SqlIdentifier
  constraintCatalog: SqlIdentifier
  constraintSchema: SqlIdentifier
  constraintName: SqlIdentifier
}

# A connection to a list of \`ConstraintTableUsage\` values.
type ConstraintTableUsagesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`ConstraintTableUsage\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`ConstraintTableUsage\` and cursor to aid in pagination.
  edges: [ConstraintTableUsagesEdge]

  # A list of \`ConstraintTableUsage\` objects.
  nodes: [ConstraintTableUsage!]
}

# A \`ConstraintTableUsage\` edge in the connection.
type ConstraintTableUsagesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`ConstraintTableUsage\` at the end of the edge.
  node: ConstraintTableUsage!
}

# Methods to use when ordering \`ConstraintTableUsage\`.
enum ConstraintTableUsagesOrderBy {
  NATURAL
  TABLE_CATALOG_ASC
  TABLE_CATALOG_DESC
  TABLE_SCHEMA_ASC
  TABLE_SCHEMA_DESC
  TABLE_NAME_ASC
  TABLE_NAME_DESC
  CONSTRAINT_CATALOG_ASC
  CONSTRAINT_CATALOG_DESC
  CONSTRAINT_SCHEMA_ASC
  CONSTRAINT_SCHEMA_DESC
  CONSTRAINT_NAME_ASC
  CONSTRAINT_NAME_DESC
}

input CreateEnabledRoleInput {
  clientMutationId: String
  enabledRole: EnabledRoleInput!
}

type CreateEnabledRolePayload {
  clientMutationId: String
  enabledRole: EnabledRole
  enabledRoleEdge(
    # The method to use when ordering \`EnabledRole\`.
    orderBy: EnabledRolesOrderBy = NATURAL
  ): EnabledRolesEdge
  query: Query
}

input CreateSqlFeatureInput {
  clientMutationId: String
  sqlFeature: SqlFeatureInput!
}

type CreateSqlFeaturePayload {
  clientMutationId: String
  sqlFeature: SqlFeature
  sqlFeatureEdge(
    # The method to use when ordering \`SqlFeature\`.
    orderBy: SqlFeaturesOrderBy = NATURAL
  ): SqlFeaturesEdge
  query: Query
}

input CreateSqlImplementationInfoInput {
  clientMutationId: String
  sqlImplementationInfo: SqlImplementationInfoInput!
}

type CreateSqlImplementationInfoPayload {
  clientMutationId: String
  sqlImplementationInfo: SqlImplementationInfo
  sqlImplementationInfoEdge(
    # The method to use when ordering \`SqlImplementationInfo\`.
    orderBy: SqlImplementationInfosOrderBy = NATURAL
  ): SqlImplementationInfosEdge
  query: Query
}

input CreateSqlLanguageInput {
  clientMutationId: String
  sqlLanguage: SqlLanguageInput!
}

type CreateSqlLanguagePayload {
  clientMutationId: String
  sqlLanguage: SqlLanguage
  sqlLanguageEdge(
    # The method to use when ordering \`SqlLanguage\`.
    orderBy: SqlLanguagesOrderBy = NATURAL
  ): SqlLanguagesEdge
  query: Query
}

input CreateSqlPackageInput {
  clientMutationId: String
  sqlPackage: SqlPackageInput!
}

type CreateSqlPackagePayload {
  clientMutationId: String
  sqlPackage: SqlPackage
  sqlPackageEdge(
    # The method to use when ordering \`SqlPackage\`.
    orderBy: SqlPackagesOrderBy = NATURAL
  ): SqlPackagesEdge
  query: Query
}

input CreateSqlPartInput {
  clientMutationId: String
  sqlPart: SqlPartInput!
}

type CreateSqlPartPayload {
  clientMutationId: String
  sqlPart: SqlPart
  sqlPartEdge(
    # The method to use when ordering \`SqlPart\`.
    orderBy: SqlPartsOrderBy = NATURAL
  ): SqlPartsEdge
  query: Query
}

input CreateSqlSizingInput {
  clientMutationId: String
  sqlSizing: SqlSizingInput!
}

type CreateSqlSizingPayload {
  clientMutationId: String
  sqlSizing: SqlSizing
  sqlSizingEdge(
    # The method to use when ordering \`SqlSizing\`.
    orderBy: SqlSizingsOrderBy = NATURAL
  ): SqlSizingsEdge
  query: Query
}

input CreateSqlSizingProfileInput {
  clientMutationId: String
  sqlSizingProfile: SqlSizingProfileInput!
}

type CreateSqlSizingProfilePayload {
  clientMutationId: String
  sqlSizingProfile: SqlSizingProfile
  sqlSizingProfileEdge(
    # The method to use when ordering \`SqlSizingProfile\`.
    orderBy: SqlSizingProfilesOrderBy = NATURAL
  ): SqlSizingProfilesEdge
  query: Query
}

# A location in a connection that can be used for resuming pagination.
scalar Cursor

type DataTypePrivilege {
  objectCatalog: SqlIdentifier
  objectSchema: SqlIdentifier
  objectName: SqlIdentifier
  objectType: CharacterData
  dtdIdentifier: SqlIdentifier
}

# A connection to a list of \`DataTypePrivilege\` values.
type DataTypePrivilegesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`DataTypePrivilege\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`DataTypePrivilege\` and cursor to aid in pagination.
  edges: [DataTypePrivilegesEdge]

  # A list of \`DataTypePrivilege\` objects.
  nodes: [DataTypePrivilege!]
}

# A \`DataTypePrivilege\` edge in the connection.
type DataTypePrivilegesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`DataTypePrivilege\` at the end of the edge.
  node: DataTypePrivilege!
}

# Methods to use when ordering \`DataTypePrivilege\`.
enum DataTypePrivilegesOrderBy {
  NATURAL
  OBJECT_CATALOG_ASC
  OBJECT_CATALOG_DESC
  OBJECT_SCHEMA_ASC
  OBJECT_SCHEMA_DESC
  OBJECT_NAME_ASC
  OBJECT_NAME_DESC
  OBJECT_TYPE_ASC
  OBJECT_TYPE_DESC
  DTD_IDENTIFIER_ASC
  DTD_IDENTIFIER_DESC
}

type Domain {
  domainCatalog: SqlIdentifier
  domainSchema: SqlIdentifier
  domainName: SqlIdentifier
  dataType: CharacterData
  characterMaximumLength: CardinalNumber
  characterOctetLength: CardinalNumber
  characterSetCatalog: SqlIdentifier
  characterSetSchema: SqlIdentifier
  characterSetName: SqlIdentifier
  collationCatalog: SqlIdentifier
  collationSchema: SqlIdentifier
  collationName: SqlIdentifier
  numericPrecision: CardinalNumber
  numericPrecisionRadix: CardinalNumber
  numericScale: CardinalNumber
  datetimePrecision: CardinalNumber
  intervalType: CharacterData
  intervalPrecision: CardinalNumber
  domainDefault: CharacterData
  udtCatalog: SqlIdentifier
  udtSchema: SqlIdentifier
  udtName: SqlIdentifier
  scopeCatalog: SqlIdentifier
  scopeSchema: SqlIdentifier
  scopeName: SqlIdentifier
  maximumCardinality: CardinalNumber
  dtdIdentifier: SqlIdentifier
}

type DomainConstraint {
  constraintCatalog: SqlIdentifier
  constraintSchema: SqlIdentifier
  constraintName: SqlIdentifier
  domainCatalog: SqlIdentifier
  domainSchema: SqlIdentifier
  domainName: SqlIdentifier
  isDeferrable: YesOrNo
  initiallyDeferred: YesOrNo
}

# A connection to a list of \`DomainConstraint\` values.
type DomainConstraintsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`DomainConstraint\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`DomainConstraint\` and cursor to aid in pagination.
  edges: [DomainConstraintsEdge]

  # A list of \`DomainConstraint\` objects.
  nodes: [DomainConstraint!]
}

# A \`DomainConstraint\` edge in the connection.
type DomainConstraintsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`DomainConstraint\` at the end of the edge.
  node: DomainConstraint!
}

# Methods to use when ordering \`DomainConstraint\`.
enum DomainConstraintsOrderBy {
  NATURAL
  CONSTRAINT_CATALOG_ASC
  CONSTRAINT_CATALOG_DESC
  CONSTRAINT_SCHEMA_ASC
  CONSTRAINT_SCHEMA_DESC
  CONSTRAINT_NAME_ASC
  CONSTRAINT_NAME_DESC
  DOMAIN_CATALOG_ASC
  DOMAIN_CATALOG_DESC
  DOMAIN_SCHEMA_ASC
  DOMAIN_SCHEMA_DESC
  DOMAIN_NAME_ASC
  DOMAIN_NAME_DESC
  IS_DEFERRABLE_ASC
  IS_DEFERRABLE_DESC
  INITIALLY_DEFERRED_ASC
  INITIALLY_DEFERRED_DESC
}

# A connection to a list of \`Domain\` values.
type DomainsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`Domain\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`Domain\` and cursor to aid in pagination.
  edges: [DomainsEdge]

  # A list of \`Domain\` objects.
  nodes: [Domain!]
}

# A \`Domain\` edge in the connection.
type DomainsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`Domain\` at the end of the edge.
  node: Domain!
}

# Methods to use when ordering \`Domain\`.
enum DomainsOrderBy {
  NATURAL
  DOMAIN_CATALOG_ASC
  DOMAIN_CATALOG_DESC
  DOMAIN_SCHEMA_ASC
  DOMAIN_SCHEMA_DESC
  DOMAIN_NAME_ASC
  DOMAIN_NAME_DESC
  DATA_TYPE_ASC
  DATA_TYPE_DESC
  CHARACTER_MAXIMUM_LENGTH_ASC
  CHARACTER_MAXIMUM_LENGTH_DESC
  CHARACTER_OCTET_LENGTH_ASC
  CHARACTER_OCTET_LENGTH_DESC
  CHARACTER_SET_CATALOG_ASC
  CHARACTER_SET_CATALOG_DESC
  CHARACTER_SET_SCHEMA_ASC
  CHARACTER_SET_SCHEMA_DESC
  CHARACTER_SET_NAME_ASC
  CHARACTER_SET_NAME_DESC
  COLLATION_CATALOG_ASC
  COLLATION_CATALOG_DESC
  COLLATION_SCHEMA_ASC
  COLLATION_SCHEMA_DESC
  COLLATION_NAME_ASC
  COLLATION_NAME_DESC
  NUMERIC_PRECISION_ASC
  NUMERIC_PRECISION_DESC
  NUMERIC_PRECISION_RADIX_ASC
  NUMERIC_PRECISION_RADIX_DESC
  NUMERIC_SCALE_ASC
  NUMERIC_SCALE_DESC
  DATETIME_PRECISION_ASC
  DATETIME_PRECISION_DESC
  INTERVAL_TYPE_ASC
  INTERVAL_TYPE_DESC
  INTERVAL_PRECISION_ASC
  INTERVAL_PRECISION_DESC
  DOMAIN_DEFAULT_ASC
  DOMAIN_DEFAULT_DESC
  UDT_CATALOG_ASC
  UDT_CATALOG_DESC
  UDT_SCHEMA_ASC
  UDT_SCHEMA_DESC
  UDT_NAME_ASC
  UDT_NAME_DESC
  SCOPE_CATALOG_ASC
  SCOPE_CATALOG_DESC
  SCOPE_SCHEMA_ASC
  SCOPE_SCHEMA_DESC
  SCOPE_NAME_ASC
  SCOPE_NAME_DESC
  MAXIMUM_CARDINALITY_ASC
  MAXIMUM_CARDINALITY_DESC
  DTD_IDENTIFIER_ASC
  DTD_IDENTIFIER_DESC
}

type DomainUdtUsage {
  udtCatalog: SqlIdentifier
  udtSchema: SqlIdentifier
  udtName: SqlIdentifier
  domainCatalog: SqlIdentifier
  domainSchema: SqlIdentifier
  domainName: SqlIdentifier
}

# A connection to a list of \`DomainUdtUsage\` values.
type DomainUdtUsagesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`DomainUdtUsage\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`DomainUdtUsage\` and cursor to aid in pagination.
  edges: [DomainUdtUsagesEdge]

  # A list of \`DomainUdtUsage\` objects.
  nodes: [DomainUdtUsage!]
}

# A \`DomainUdtUsage\` edge in the connection.
type DomainUdtUsagesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`DomainUdtUsage\` at the end of the edge.
  node: DomainUdtUsage!
}

# Methods to use when ordering \`DomainUdtUsage\`.
enum DomainUdtUsagesOrderBy {
  NATURAL
  UDT_CATALOG_ASC
  UDT_CATALOG_DESC
  UDT_SCHEMA_ASC
  UDT_SCHEMA_DESC
  UDT_NAME_ASC
  UDT_NAME_DESC
  DOMAIN_CATALOG_ASC
  DOMAIN_CATALOG_DESC
  DOMAIN_SCHEMA_ASC
  DOMAIN_SCHEMA_DESC
  DOMAIN_NAME_ASC
  DOMAIN_NAME_DESC
}

type ElementType {
  objectCatalog: SqlIdentifier
  objectSchema: SqlIdentifier
  objectName: SqlIdentifier
  objectType: CharacterData
  collectionTypeIdentifier: SqlIdentifier
  dataType: CharacterData
  characterMaximumLength: CardinalNumber
  characterOctetLength: CardinalNumber
  characterSetCatalog: SqlIdentifier
  characterSetSchema: SqlIdentifier
  characterSetName: SqlIdentifier
  collationCatalog: SqlIdentifier
  collationSchema: SqlIdentifier
  collationName: SqlIdentifier
  numericPrecision: CardinalNumber
  numericPrecisionRadix: CardinalNumber
  numericScale: CardinalNumber
  datetimePrecision: CardinalNumber
  intervalType: CharacterData
  intervalPrecision: CardinalNumber
  domainDefault: CharacterData
  udtCatalog: SqlIdentifier
  udtSchema: SqlIdentifier
  udtName: SqlIdentifier
  scopeCatalog: SqlIdentifier
  scopeSchema: SqlIdentifier
  scopeName: SqlIdentifier
  maximumCardinality: CardinalNumber
  dtdIdentifier: SqlIdentifier
}

# A connection to a list of \`ElementType\` values.
type ElementTypesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`ElementType\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`ElementType\` and cursor to aid in pagination.
  edges: [ElementTypesEdge]

  # A list of \`ElementType\` objects.
  nodes: [ElementType!]
}

# A \`ElementType\` edge in the connection.
type ElementTypesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`ElementType\` at the end of the edge.
  node: ElementType!
}

# Methods to use when ordering \`ElementType\`.
enum ElementTypesOrderBy {
  NATURAL
  OBJECT_CATALOG_ASC
  OBJECT_CATALOG_DESC
  OBJECT_SCHEMA_ASC
  OBJECT_SCHEMA_DESC
  OBJECT_NAME_ASC
  OBJECT_NAME_DESC
  OBJECT_TYPE_ASC
  OBJECT_TYPE_DESC
  COLLECTION_TYPE_IDENTIFIER_ASC
  COLLECTION_TYPE_IDENTIFIER_DESC
  DATA_TYPE_ASC
  DATA_TYPE_DESC
  CHARACTER_MAXIMUM_LENGTH_ASC
  CHARACTER_MAXIMUM_LENGTH_DESC
  CHARACTER_OCTET_LENGTH_ASC
  CHARACTER_OCTET_LENGTH_DESC
  CHARACTER_SET_CATALOG_ASC
  CHARACTER_SET_CATALOG_DESC
  CHARACTER_SET_SCHEMA_ASC
  CHARACTER_SET_SCHEMA_DESC
  CHARACTER_SET_NAME_ASC
  CHARACTER_SET_NAME_DESC
  COLLATION_CATALOG_ASC
  COLLATION_CATALOG_DESC
  COLLATION_SCHEMA_ASC
  COLLATION_SCHEMA_DESC
  COLLATION_NAME_ASC
  COLLATION_NAME_DESC
  NUMERIC_PRECISION_ASC
  NUMERIC_PRECISION_DESC
  NUMERIC_PRECISION_RADIX_ASC
  NUMERIC_PRECISION_RADIX_DESC
  NUMERIC_SCALE_ASC
  NUMERIC_SCALE_DESC
  DATETIME_PRECISION_ASC
  DATETIME_PRECISION_DESC
  INTERVAL_TYPE_ASC
  INTERVAL_TYPE_DESC
  INTERVAL_PRECISION_ASC
  INTERVAL_PRECISION_DESC
  DOMAIN_DEFAULT_ASC
  DOMAIN_DEFAULT_DESC
  UDT_CATALOG_ASC
  UDT_CATALOG_DESC
  UDT_SCHEMA_ASC
  UDT_SCHEMA_DESC
  UDT_NAME_ASC
  UDT_NAME_DESC
  SCOPE_CATALOG_ASC
  SCOPE_CATALOG_DESC
  SCOPE_SCHEMA_ASC
  SCOPE_SCHEMA_DESC
  SCOPE_NAME_ASC
  SCOPE_NAME_DESC
  MAXIMUM_CARDINALITY_ASC
  MAXIMUM_CARDINALITY_DESC
  DTD_IDENTIFIER_ASC
  DTD_IDENTIFIER_DESC
}

type EnabledRole {
  roleName: SqlIdentifier
}

input EnabledRoleInput {
  roleName: SqlIdentifier
}

# A connection to a list of \`EnabledRole\` values.
type EnabledRolesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`EnabledRole\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`EnabledRole\` and cursor to aid in pagination.
  edges: [EnabledRolesEdge]

  # A list of \`EnabledRole\` objects.
  nodes: [EnabledRole!]
}

# A \`EnabledRole\` edge in the connection.
type EnabledRolesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`EnabledRole\` at the end of the edge.
  node: EnabledRole!
}

# Methods to use when ordering \`EnabledRole\`.
enum EnabledRolesOrderBy {
  NATURAL
  ROLE_NAME_ASC
  ROLE_NAME_DESC
}

type ForeignDataWrapper {
  foreignDataWrapperCatalog: SqlIdentifier
  foreignDataWrapperName: SqlIdentifier
  authorizationIdentifier: SqlIdentifier
  libraryName: CharacterData
  foreignDataWrapperLanguage: CharacterData
}

type ForeignDataWrapperOption {
  foreignDataWrapperCatalog: SqlIdentifier
  foreignDataWrapperName: SqlIdentifier
  optionName: SqlIdentifier
  optionValue: CharacterData
}

# A connection to a list of \`ForeignDataWrapperOption\` values.
type ForeignDataWrapperOptionsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`ForeignDataWrapperOption\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`ForeignDataWrapperOption\` and cursor to aid in pagination.
  edges: [ForeignDataWrapperOptionsEdge]

  # A list of \`ForeignDataWrapperOption\` objects.
  nodes: [ForeignDataWrapperOption!]
}

# A \`ForeignDataWrapperOption\` edge in the connection.
type ForeignDataWrapperOptionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`ForeignDataWrapperOption\` at the end of the edge.
  node: ForeignDataWrapperOption!
}

# Methods to use when ordering \`ForeignDataWrapperOption\`.
enum ForeignDataWrapperOptionsOrderBy {
  NATURAL
  FOREIGN_DATA_WRAPPER_CATALOG_ASC
  FOREIGN_DATA_WRAPPER_CATALOG_DESC
  FOREIGN_DATA_WRAPPER_NAME_ASC
  FOREIGN_DATA_WRAPPER_NAME_DESC
  OPTION_NAME_ASC
  OPTION_NAME_DESC
  OPTION_VALUE_ASC
  OPTION_VALUE_DESC
}

# A connection to a list of \`ForeignDataWrapper\` values.
type ForeignDataWrappersConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`ForeignDataWrapper\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`ForeignDataWrapper\` and cursor to aid in pagination.
  edges: [ForeignDataWrappersEdge]

  # A list of \`ForeignDataWrapper\` objects.
  nodes: [ForeignDataWrapper!]
}

# A \`ForeignDataWrapper\` edge in the connection.
type ForeignDataWrappersEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`ForeignDataWrapper\` at the end of the edge.
  node: ForeignDataWrapper!
}

# Methods to use when ordering \`ForeignDataWrapper\`.
enum ForeignDataWrappersOrderBy {
  NATURAL
  FOREIGN_DATA_WRAPPER_CATALOG_ASC
  FOREIGN_DATA_WRAPPER_CATALOG_DESC
  FOREIGN_DATA_WRAPPER_NAME_ASC
  FOREIGN_DATA_WRAPPER_NAME_DESC
  AUTHORIZATION_IDENTIFIER_ASC
  AUTHORIZATION_IDENTIFIER_DESC
  LIBRARY_NAME_ASC
  LIBRARY_NAME_DESC
  FOREIGN_DATA_WRAPPER_LANGUAGE_ASC
  FOREIGN_DATA_WRAPPER_LANGUAGE_DESC
}

type ForeignServer {
  foreignServerCatalog: SqlIdentifier
  foreignServerName: SqlIdentifier
  foreignDataWrapperCatalog: SqlIdentifier
  foreignDataWrapperName: SqlIdentifier
  foreignServerType: CharacterData
  foreignServerVersion: CharacterData
  authorizationIdentifier: SqlIdentifier
}

type ForeignServerOption {
  foreignServerCatalog: SqlIdentifier
  foreignServerName: SqlIdentifier
  optionName: SqlIdentifier
  optionValue: CharacterData
}

# A connection to a list of \`ForeignServerOption\` values.
type ForeignServerOptionsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`ForeignServerOption\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`ForeignServerOption\` and cursor to aid in pagination.
  edges: [ForeignServerOptionsEdge]

  # A list of \`ForeignServerOption\` objects.
  nodes: [ForeignServerOption!]
}

# A \`ForeignServerOption\` edge in the connection.
type ForeignServerOptionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`ForeignServerOption\` at the end of the edge.
  node: ForeignServerOption!
}

# Methods to use when ordering \`ForeignServerOption\`.
enum ForeignServerOptionsOrderBy {
  NATURAL
  FOREIGN_SERVER_CATALOG_ASC
  FOREIGN_SERVER_CATALOG_DESC
  FOREIGN_SERVER_NAME_ASC
  FOREIGN_SERVER_NAME_DESC
  OPTION_NAME_ASC
  OPTION_NAME_DESC
  OPTION_VALUE_ASC
  OPTION_VALUE_DESC
}

# A connection to a list of \`ForeignServer\` values.
type ForeignServersConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`ForeignServer\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`ForeignServer\` and cursor to aid in pagination.
  edges: [ForeignServersEdge]

  # A list of \`ForeignServer\` objects.
  nodes: [ForeignServer!]
}

# A \`ForeignServer\` edge in the connection.
type ForeignServersEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`ForeignServer\` at the end of the edge.
  node: ForeignServer!
}

# Methods to use when ordering \`ForeignServer\`.
enum ForeignServersOrderBy {
  NATURAL
  FOREIGN_SERVER_CATALOG_ASC
  FOREIGN_SERVER_CATALOG_DESC
  FOREIGN_SERVER_NAME_ASC
  FOREIGN_SERVER_NAME_DESC
  FOREIGN_DATA_WRAPPER_CATALOG_ASC
  FOREIGN_DATA_WRAPPER_CATALOG_DESC
  FOREIGN_DATA_WRAPPER_NAME_ASC
  FOREIGN_DATA_WRAPPER_NAME_DESC
  FOREIGN_SERVER_TYPE_ASC
  FOREIGN_SERVER_TYPE_DESC
  FOREIGN_SERVER_VERSION_ASC
  FOREIGN_SERVER_VERSION_DESC
  AUTHORIZATION_IDENTIFIER_ASC
  AUTHORIZATION_IDENTIFIER_DESC
}

type ForeignTable {
  foreignTableCatalog: SqlIdentifier
  foreignTableSchema: String
  foreignTableName: String
  foreignServerCatalog: SqlIdentifier
  foreignServerName: SqlIdentifier
}

type ForeignTableOption {
  foreignTableCatalog: SqlIdentifier
  foreignTableSchema: String
  foreignTableName: String
  optionName: SqlIdentifier
  optionValue: CharacterData
}

# A connection to a list of \`ForeignTableOption\` values.
type ForeignTableOptionsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`ForeignTableOption\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`ForeignTableOption\` and cursor to aid in pagination.
  edges: [ForeignTableOptionsEdge]

  # A list of \`ForeignTableOption\` objects.
  nodes: [ForeignTableOption!]
}

# A \`ForeignTableOption\` edge in the connection.
type ForeignTableOptionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`ForeignTableOption\` at the end of the edge.
  node: ForeignTableOption!
}

# Methods to use when ordering \`ForeignTableOption\`.
enum ForeignTableOptionsOrderBy {
  NATURAL
  FOREIGN_TABLE_CATALOG_ASC
  FOREIGN_TABLE_CATALOG_DESC
  FOREIGN_TABLE_SCHEMA_ASC
  FOREIGN_TABLE_SCHEMA_DESC
  FOREIGN_TABLE_NAME_ASC
  FOREIGN_TABLE_NAME_DESC
  OPTION_NAME_ASC
  OPTION_NAME_DESC
  OPTION_VALUE_ASC
  OPTION_VALUE_DESC
}

# A connection to a list of \`ForeignTable\` values.
type ForeignTablesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`ForeignTable\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`ForeignTable\` and cursor to aid in pagination.
  edges: [ForeignTablesEdge]

  # A list of \`ForeignTable\` objects.
  nodes: [ForeignTable!]
}

# A \`ForeignTable\` edge in the connection.
type ForeignTablesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`ForeignTable\` at the end of the edge.
  node: ForeignTable!
}

# Methods to use when ordering \`ForeignTable\`.
enum ForeignTablesOrderBy {
  NATURAL
  FOREIGN_TABLE_CATALOG_ASC
  FOREIGN_TABLE_CATALOG_DESC
  FOREIGN_TABLE_SCHEMA_ASC
  FOREIGN_TABLE_SCHEMA_DESC
  FOREIGN_TABLE_NAME_ASC
  FOREIGN_TABLE_NAME_DESC
  FOREIGN_SERVER_CATALOG_ASC
  FOREIGN_SERVER_CATALOG_DESC
  FOREIGN_SERVER_NAME_ASC
  FOREIGN_SERVER_NAME_DESC
}

type InformationSchemaCatalogName {
  catalogName: SqlIdentifier
}

# A connection to a list of \`InformationSchemaCatalogName\` values.
type InformationSchemaCatalogNamesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`InformationSchemaCatalogName\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`InformationSchemaCatalogName\` and cursor to aid in pagination.
  edges: [InformationSchemaCatalogNamesEdge]

  # A list of \`InformationSchemaCatalogName\` objects.
  nodes: [InformationSchemaCatalogName!]
}

# A \`InformationSchemaCatalogName\` edge in the connection.
type InformationSchemaCatalogNamesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`InformationSchemaCatalogName\` at the end of the edge.
  node: InformationSchemaCatalogName!
}

# Methods to use when ordering \`InformationSchemaCatalogName\`.
enum InformationSchemaCatalogNamesOrderBy {
  NATURAL
  CATALOG_NAME_ASC
  CATALOG_NAME_DESC
}

type KeyColumnUsage {
  constraintCatalog: SqlIdentifier
  constraintSchema: SqlIdentifier
  constraintName: SqlIdentifier
  tableCatalog: SqlIdentifier
  tableSchema: SqlIdentifier
  tableName: SqlIdentifier
  columnName: SqlIdentifier
  ordinalPosition: CardinalNumber
  positionInUniqueConstraint: CardinalNumber
}

# A connection to a list of \`KeyColumnUsage\` values.
type KeyColumnUsagesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`KeyColumnUsage\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`KeyColumnUsage\` and cursor to aid in pagination.
  edges: [KeyColumnUsagesEdge]

  # A list of \`KeyColumnUsage\` objects.
  nodes: [KeyColumnUsage!]
}

# A \`KeyColumnUsage\` edge in the connection.
type KeyColumnUsagesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`KeyColumnUsage\` at the end of the edge.
  node: KeyColumnUsage!
}

# Methods to use when ordering \`KeyColumnUsage\`.
enum KeyColumnUsagesOrderBy {
  NATURAL
  CONSTRAINT_CATALOG_ASC
  CONSTRAINT_CATALOG_DESC
  CONSTRAINT_SCHEMA_ASC
  CONSTRAINT_SCHEMA_DESC
  CONSTRAINT_NAME_ASC
  CONSTRAINT_NAME_DESC
  TABLE_CATALOG_ASC
  TABLE_CATALOG_DESC
  TABLE_SCHEMA_ASC
  TABLE_SCHEMA_DESC
  TABLE_NAME_ASC
  TABLE_NAME_DESC
  COLUMN_NAME_ASC
  COLUMN_NAME_DESC
  ORDINAL_POSITION_ASC
  ORDINAL_POSITION_DESC
  POSITION_IN_UNIQUE_CONSTRAINT_ASC
  POSITION_IN_UNIQUE_CONSTRAINT_DESC
}

# The root mutation type which contains root level fields which mutate data.
type Mutation {
  createEnabledRole(input: CreateEnabledRoleInput!): CreateEnabledRolePayload
  createSqlFeature(input: CreateSqlFeatureInput!): CreateSqlFeaturePayload
  createSqlImplementationInfo(input: CreateSqlImplementationInfoInput!): CreateSqlImplementationInfoPayload
  createSqlLanguage(input: CreateSqlLanguageInput!): CreateSqlLanguagePayload
  createSqlPackage(input: CreateSqlPackageInput!): CreateSqlPackagePayload
  createSqlPart(input: CreateSqlPartInput!): CreateSqlPartPayload
  createSqlSizing(input: CreateSqlSizingInput!): CreateSqlSizingPayload
  createSqlSizingProfile(input: CreateSqlSizingProfileInput!): CreateSqlSizingProfilePayload
}

# An object with a globally unique \`ID\`.
interface Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  __id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: Cursor

  # When paginating forwards, the cursor to continue.
  endCursor: Cursor
}

type Parameter {
  specificCatalog: SqlIdentifier
  specificSchema: SqlIdentifier
  specificName: SqlIdentifier
  ordinalPosition: CardinalNumber
  parameterMode: CharacterData
  isResult: YesOrNo
  asLocator: YesOrNo
  parameterName: SqlIdentifier
  dataType: CharacterData
  characterMaximumLength: CardinalNumber
  characterOctetLength: CardinalNumber
  characterSetCatalog: SqlIdentifier
  characterSetSchema: SqlIdentifier
  characterSetName: SqlIdentifier
  collationCatalog: SqlIdentifier
  collationSchema: SqlIdentifier
  collationName: SqlIdentifier
  numericPrecision: CardinalNumber
  numericPrecisionRadix: CardinalNumber
  numericScale: CardinalNumber
  datetimePrecision: CardinalNumber
  intervalType: CharacterData
  intervalPrecision: CardinalNumber
  udtCatalog: SqlIdentifier
  udtSchema: SqlIdentifier
  udtName: SqlIdentifier
  scopeCatalog: SqlIdentifier
  scopeSchema: SqlIdentifier
  scopeName: SqlIdentifier
  maximumCardinality: CardinalNumber
  dtdIdentifier: SqlIdentifier
  parameterDefault: CharacterData
}

# A connection to a list of \`Parameter\` values.
type ParametersConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`Parameter\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`Parameter\` and cursor to aid in pagination.
  edges: [ParametersEdge]

  # A list of \`Parameter\` objects.
  nodes: [Parameter!]
}

# A \`Parameter\` edge in the connection.
type ParametersEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`Parameter\` at the end of the edge.
  node: Parameter!
}

# Methods to use when ordering \`Parameter\`.
enum ParametersOrderBy {
  NATURAL
  SPECIFIC_CATALOG_ASC
  SPECIFIC_CATALOG_DESC
  SPECIFIC_SCHEMA_ASC
  SPECIFIC_SCHEMA_DESC
  SPECIFIC_NAME_ASC
  SPECIFIC_NAME_DESC
  ORDINAL_POSITION_ASC
  ORDINAL_POSITION_DESC
  PARAMETER_MODE_ASC
  PARAMETER_MODE_DESC
  IS_RESULT_ASC
  IS_RESULT_DESC
  AS_LOCATOR_ASC
  AS_LOCATOR_DESC
  PARAMETER_NAME_ASC
  PARAMETER_NAME_DESC
  DATA_TYPE_ASC
  DATA_TYPE_DESC
  CHARACTER_MAXIMUM_LENGTH_ASC
  CHARACTER_MAXIMUM_LENGTH_DESC
  CHARACTER_OCTET_LENGTH_ASC
  CHARACTER_OCTET_LENGTH_DESC
  CHARACTER_SET_CATALOG_ASC
  CHARACTER_SET_CATALOG_DESC
  CHARACTER_SET_SCHEMA_ASC
  CHARACTER_SET_SCHEMA_DESC
  CHARACTER_SET_NAME_ASC
  CHARACTER_SET_NAME_DESC
  COLLATION_CATALOG_ASC
  COLLATION_CATALOG_DESC
  COLLATION_SCHEMA_ASC
  COLLATION_SCHEMA_DESC
  COLLATION_NAME_ASC
  COLLATION_NAME_DESC
  NUMERIC_PRECISION_ASC
  NUMERIC_PRECISION_DESC
  NUMERIC_PRECISION_RADIX_ASC
  NUMERIC_PRECISION_RADIX_DESC
  NUMERIC_SCALE_ASC
  NUMERIC_SCALE_DESC
  DATETIME_PRECISION_ASC
  DATETIME_PRECISION_DESC
  INTERVAL_TYPE_ASC
  INTERVAL_TYPE_DESC
  INTERVAL_PRECISION_ASC
  INTERVAL_PRECISION_DESC
  UDT_CATALOG_ASC
  UDT_CATALOG_DESC
  UDT_SCHEMA_ASC
  UDT_SCHEMA_DESC
  UDT_NAME_ASC
  UDT_NAME_DESC
  SCOPE_CATALOG_ASC
  SCOPE_CATALOG_DESC
  SCOPE_SCHEMA_ASC
  SCOPE_SCHEMA_DESC
  SCOPE_NAME_ASC
  SCOPE_NAME_DESC
  MAXIMUM_CARDINALITY_ASC
  MAXIMUM_CARDINALITY_DESC
  DTD_IDENTIFIER_ASC
  DTD_IDENTIFIER_DESC
  PARAMETER_DEFAULT_ASC
  PARAMETER_DEFAULT_DESC
}

input PgAttributeInput {
  attrelid: Float!
  attname: String!
  atttypid: Float!
  attstattarget: Int!
  attlen: Int!
  attnum: Int!
  attndims: Int!
  attcacheoff: Int!
  atttypmod: Int!
  attbyval: Boolean!
  attstorage: String!
  attalign: String!
  attnotnull: Boolean!
  atthasdef: Boolean!
  attisdropped: Boolean!
  attislocal: Boolean!
  attinhcount: Int!
  attcollation: Float!
  attacl: [String]
  attoptions: [String]
  attfdwoptions: [String]
}

input PgTypeInput {
  typname: String!
  typnamespace: Float!
  typowner: Float!
  typlen: Int!
  typbyval: Boolean!
  typtype: String!
  typcategory: String!
  typispreferred: Boolean!
  typisdefined: Boolean!
  typdelim: String!
  typrelid: Float!
  typelem: Float!
  typarray: Float!
  typinput: Float!
  typoutput: Float!
  typreceive: Float!
  typsend: Float!
  typmodin: Float!
  typmodout: Float!
  typanalyze: Float!
  typalign: String!
  typstorage: String!
  typnotnull: Boolean!
  typbasetype: Float!
  typtypmod: Int!
  typndims: Int!
  typcollation: Float!
  typdefaultbin: String
  typdefault: String
  typacl: [String]
}

# The root query type which gives access points into the data universe.
type Query {
  # Fetches an object given its globally unique \`ID\`.
  node(
    # The globally unique \`ID\`.
    __id: ID!
  ): Node
  _pgCharMaxLength(typid: Float!, typmod: Int!): Int
  _pgCharOctetLength(typid: Float!, typmod: Int!): Int
  _pgDatetimePrecision(typid: Float!, typmod: Int!): Int
  _pgIndexPosition(arg0: Float!, arg1: Int!): Int
  _pgIntervalType(typid: Float!, mod: Int!): String
  _pgKeysequal(arg0: [Int], arg1: [Int]): Boolean
  _pgNumericPrecision(typid: Float!, typmod: Int!): Int
  _pgNumericPrecisionRadix(typid: Float!, typmod: Int!): Int
  _pgNumericScale(typid: Float!, typmod: Int!): Int
  _pgTruetypid(arg0: PgAttributeInput!, arg1: PgTypeInput!): Float
  _pgTruetypmod(arg0: PgAttributeInput!, arg1: PgTypeInput!): Int

  # Reads and enables paginatation through a set of \`_PgForeignDataWrapper\`.
  allPgForeignDataWrappers(
    # The method to use when ordering \`_PgForeignDataWrapper\`.
    orderBy: _PgForeignDataWrappersOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    oid: Float
    fdwowner: Float
    fdwoptions: [String]
    foreignDataWrapperCatalog: SqlIdentifier
    foreignDataWrapperName: SqlIdentifier
    authorizationIdentifier: SqlIdentifier
    foreignDataWrapperLanguage: CharacterData
  ): _PgForeignDataWrappersConnection

  # Reads and enables paginatation through a set of \`_PgForeignServer\`.
  allPgForeignServers(
    # The method to use when ordering \`_PgForeignServer\`.
    orderBy: _PgForeignServersOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    oid: Float
    srvoptions: [String]
    foreignServerCatalog: SqlIdentifier
    foreignServerName: SqlIdentifier
    foreignDataWrapperCatalog: SqlIdentifier
    foreignDataWrapperName: SqlIdentifier
    foreignServerType: CharacterData
    foreignServerVersion: CharacterData
    authorizationIdentifier: SqlIdentifier
  ): _PgForeignServersConnection

  # Reads and enables paginatation through a set of \`_PgForeignTableColumn\`.
  allPgForeignTableColumns(
    # The method to use when ordering \`_PgForeignTableColumn\`.
    orderBy: _PgForeignTableColumnsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    nspname: String
    relname: String
    attname: String
    attfdwoptions: [String]
  ): _PgForeignTableColumnsConnection

  # Reads and enables paginatation through a set of \`_PgForeignTable\`.
  allPgForeignTables(
    # The method to use when ordering \`_PgForeignTable\`.
    orderBy: _PgForeignTablesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    foreignTableCatalog: SqlIdentifier
    foreignTableSchema: String
    foreignTableName: String
    ftoptions: [String]
    foreignServerCatalog: SqlIdentifier
    foreignServerName: SqlIdentifier
    authorizationIdentifier: SqlIdentifier
  ): _PgForeignTablesConnection

  # Reads and enables paginatation through a set of \`_PgUserMapping\`.
  allPgUserMappings(
    # The method to use when ordering \`_PgUserMapping\`.
    orderBy: _PgUserMappingsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    oid: Float
    umoptions: [String]
    umuser: Float
    authorizationIdentifier: SqlIdentifier
    foreignServerCatalog: SqlIdentifier
    foreignServerName: SqlIdentifier
    srvowner: SqlIdentifier
  ): _PgUserMappingsConnection

  # Reads and enables paginatation through a set of \`AdministrableRoleAuthorization\`.
  allAdministrableRoleAuthorizations(
    # The method to use when ordering \`AdministrableRoleAuthorization\`.
    orderBy: AdministrableRoleAuthorizationsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    grantee: SqlIdentifier
    roleName: SqlIdentifier
    isGrantable: YesOrNo
  ): AdministrableRoleAuthorizationsConnection

  # Reads and enables paginatation through a set of \`ApplicableRole\`.
  allApplicableRoles(
    # The method to use when ordering \`ApplicableRole\`.
    orderBy: ApplicableRolesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    grantee: SqlIdentifier
    roleName: SqlIdentifier
    isGrantable: YesOrNo
  ): ApplicableRolesConnection

  # Reads and enables paginatation through a set of \`Attribute\`.
  allAttributes(
    # The method to use when ordering \`Attribute\`.
    orderBy: AttributesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    udtCatalog: SqlIdentifier
    udtSchema: SqlIdentifier
    udtName: SqlIdentifier
    attributeName: SqlIdentifier
    ordinalPosition: CardinalNumber
    attributeDefault: CharacterData
    isNullable: YesOrNo
    dataType: CharacterData
    characterMaximumLength: CardinalNumber
    characterOctetLength: CardinalNumber
    characterSetCatalog: SqlIdentifier
    characterSetSchema: SqlIdentifier
    characterSetName: SqlIdentifier
    collationCatalog: SqlIdentifier
    collationSchema: SqlIdentifier
    collationName: SqlIdentifier
    numericPrecision: CardinalNumber
    numericPrecisionRadix: CardinalNumber
    numericScale: CardinalNumber
    datetimePrecision: CardinalNumber
    intervalType: CharacterData
    intervalPrecision: CardinalNumber
    attributeUdtCatalog: SqlIdentifier
    attributeUdtSchema: SqlIdentifier
    attributeUdtName: SqlIdentifier
    scopeCatalog: SqlIdentifier
    scopeSchema: SqlIdentifier
    scopeName: SqlIdentifier
    maximumCardinality: CardinalNumber
    dtdIdentifier: SqlIdentifier
    isDerivedReferenceAttribute: YesOrNo
  ): AttributesConnection

  # Reads and enables paginatation through a set of \`CharacterSet\`.
  allCharacterSets(
    # The method to use when ordering \`CharacterSet\`.
    orderBy: CharacterSetsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    characterSetCatalog: SqlIdentifier
    characterSetSchema: SqlIdentifier
    characterSetName: SqlIdentifier
    characterRepertoire: SqlIdentifier
    formOfUse: SqlIdentifier
    defaultCollateCatalog: SqlIdentifier
    defaultCollateSchema: SqlIdentifier
    defaultCollateName: SqlIdentifier
  ): CharacterSetsConnection

  # Reads and enables paginatation through a set of \`CheckConstraintRoutineUsage\`.
  allCheckConstraintRoutineUsages(
    # The method to use when ordering \`CheckConstraintRoutineUsage\`.
    orderBy: CheckConstraintRoutineUsagesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    constraintCatalog: SqlIdentifier
    constraintSchema: SqlIdentifier
    constraintName: SqlIdentifier
    specificCatalog: SqlIdentifier
    specificSchema: SqlIdentifier
    specificName: SqlIdentifier
  ): CheckConstraintRoutineUsagesConnection

  # Reads and enables paginatation through a set of \`CheckConstraint\`.
  allCheckConstraints(
    # The method to use when ordering \`CheckConstraint\`.
    orderBy: CheckConstraintsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    constraintCatalog: SqlIdentifier
    constraintSchema: SqlIdentifier
    constraintName: SqlIdentifier
    checkClause: CharacterData
  ): CheckConstraintsConnection

  # Reads and enables paginatation through a set of \`CollationCharacterSetApplicability\`.
  allCollationCharacterSetApplicabilities(
    # The method to use when ordering \`CollationCharacterSetApplicability\`.
    orderBy: CollationCharacterSetApplicabilitiesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    collationCatalog: SqlIdentifier
    collationSchema: SqlIdentifier
    collationName: SqlIdentifier
    characterSetCatalog: SqlIdentifier
    characterSetSchema: SqlIdentifier
    characterSetName: SqlIdentifier
  ): CollationCharacterSetApplicabilitiesConnection

  # Reads and enables paginatation through a set of \`Collation\`.
  allCollations(
    # The method to use when ordering \`Collation\`.
    orderBy: CollationsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    collationCatalog: SqlIdentifier
    collationSchema: SqlIdentifier
    collationName: SqlIdentifier
    padAttribute: CharacterData
  ): CollationsConnection

  # Reads and enables paginatation through a set of \`ColumnDomainUsage\`.
  allColumnDomainUsages(
    # The method to use when ordering \`ColumnDomainUsage\`.
    orderBy: ColumnDomainUsagesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    domainCatalog: SqlIdentifier
    domainSchema: SqlIdentifier
    domainName: SqlIdentifier
    tableCatalog: SqlIdentifier
    tableSchema: SqlIdentifier
    tableName: SqlIdentifier
    columnName: SqlIdentifier
  ): ColumnDomainUsagesConnection

  # Reads and enables paginatation through a set of \`ColumnOption\`.
  allColumnOptions(
    # The method to use when ordering \`ColumnOption\`.
    orderBy: ColumnOptionsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    tableCatalog: SqlIdentifier
    tableSchema: String
    tableName: String
    columnName: String
    optionName: SqlIdentifier
    optionValue: CharacterData
  ): ColumnOptionsConnection

  # Reads and enables paginatation through a set of \`ColumnPrivilege\`.
  allColumnPrivileges(
    # The method to use when ordering \`ColumnPrivilege\`.
    orderBy: ColumnPrivilegesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    grantor: SqlIdentifier
    grantee: SqlIdentifier
    tableCatalog: SqlIdentifier
    tableSchema: SqlIdentifier
    tableName: SqlIdentifier
    columnName: SqlIdentifier
    privilegeType: CharacterData
    isGrantable: YesOrNo
  ): ColumnPrivilegesConnection

  # Reads and enables paginatation through a set of \`ColumnUdtUsage\`.
  allColumnUdtUsages(
    # The method to use when ordering \`ColumnUdtUsage\`.
    orderBy: ColumnUdtUsagesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    udtCatalog: SqlIdentifier
    udtSchema: SqlIdentifier
    udtName: SqlIdentifier
    tableCatalog: SqlIdentifier
    tableSchema: SqlIdentifier
    tableName: SqlIdentifier
    columnName: SqlIdentifier
  ): ColumnUdtUsagesConnection

  # Reads and enables paginatation through a set of \`Column\`.
  allColumns(
    # The method to use when ordering \`Column\`.
    orderBy: ColumnsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    tableCatalog: SqlIdentifier
    tableSchema: SqlIdentifier
    tableName: SqlIdentifier
    columnName: SqlIdentifier
    ordinalPosition: CardinalNumber
    columnDefault: CharacterData
    isNullable: YesOrNo
    dataType: CharacterData
    characterMaximumLength: CardinalNumber
    characterOctetLength: CardinalNumber
    numericPrecision: CardinalNumber
    numericPrecisionRadix: CardinalNumber
    numericScale: CardinalNumber
    datetimePrecision: CardinalNumber
    intervalType: CharacterData
    intervalPrecision: CardinalNumber
    characterSetCatalog: SqlIdentifier
    characterSetSchema: SqlIdentifier
    characterSetName: SqlIdentifier
    collationCatalog: SqlIdentifier
    collationSchema: SqlIdentifier
    collationName: SqlIdentifier
    domainCatalog: SqlIdentifier
    domainSchema: SqlIdentifier
    domainName: SqlIdentifier
    udtCatalog: SqlIdentifier
    udtSchema: SqlIdentifier
    udtName: SqlIdentifier
    scopeCatalog: SqlIdentifier
    scopeSchema: SqlIdentifier
    scopeName: SqlIdentifier
    maximumCardinality: CardinalNumber
    dtdIdentifier: SqlIdentifier
    isSelfReferencing: YesOrNo
    isIdentity: YesOrNo
    identityGeneration: CharacterData
    identityStart: CharacterData
    identityIncrement: CharacterData
    identityMaximum: CharacterData
    identityMinimum: CharacterData
    identityCycle: YesOrNo
    isGenerated: CharacterData
    generationExpression: CharacterData
    isUpdatable: YesOrNo
  ): ColumnsConnection

  # Reads and enables paginatation through a set of \`ConstraintColumnUsage\`.
  allConstraintColumnUsages(
    # The method to use when ordering \`ConstraintColumnUsage\`.
    orderBy: ConstraintColumnUsagesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    tableCatalog: SqlIdentifier
    tableSchema: SqlIdentifier
    tableName: SqlIdentifier
    columnName: SqlIdentifier
    constraintCatalog: SqlIdentifier
    constraintSchema: SqlIdentifier
    constraintName: SqlIdentifier
  ): ConstraintColumnUsagesConnection

  # Reads and enables paginatation through a set of \`ConstraintTableUsage\`.
  allConstraintTableUsages(
    # The method to use when ordering \`ConstraintTableUsage\`.
    orderBy: ConstraintTableUsagesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    tableCatalog: SqlIdentifier
    tableSchema: SqlIdentifier
    tableName: SqlIdentifier
    constraintCatalog: SqlIdentifier
    constraintSchema: SqlIdentifier
    constraintName: SqlIdentifier
  ): ConstraintTableUsagesConnection

  # Reads and enables paginatation through a set of \`DataTypePrivilege\`.
  allDataTypePrivileges(
    # The method to use when ordering \`DataTypePrivilege\`.
    orderBy: DataTypePrivilegesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    objectCatalog: SqlIdentifier
    objectSchema: SqlIdentifier
    objectName: SqlIdentifier
    objectType: CharacterData
    dtdIdentifier: SqlIdentifier
  ): DataTypePrivilegesConnection

  # Reads and enables paginatation through a set of \`DomainConstraint\`.
  allDomainConstraints(
    # The method to use when ordering \`DomainConstraint\`.
    orderBy: DomainConstraintsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    constraintCatalog: SqlIdentifier
    constraintSchema: SqlIdentifier
    constraintName: SqlIdentifier
    domainCatalog: SqlIdentifier
    domainSchema: SqlIdentifier
    domainName: SqlIdentifier
    isDeferrable: YesOrNo
    initiallyDeferred: YesOrNo
  ): DomainConstraintsConnection

  # Reads and enables paginatation through a set of \`DomainUdtUsage\`.
  allDomainUdtUsages(
    # The method to use when ordering \`DomainUdtUsage\`.
    orderBy: DomainUdtUsagesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    udtCatalog: SqlIdentifier
    udtSchema: SqlIdentifier
    udtName: SqlIdentifier
    domainCatalog: SqlIdentifier
    domainSchema: SqlIdentifier
    domainName: SqlIdentifier
  ): DomainUdtUsagesConnection

  # Reads and enables paginatation through a set of \`Domain\`.
  allDomains(
    # The method to use when ordering \`Domain\`.
    orderBy: DomainsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    domainCatalog: SqlIdentifier
    domainSchema: SqlIdentifier
    domainName: SqlIdentifier
    dataType: CharacterData
    characterMaximumLength: CardinalNumber
    characterOctetLength: CardinalNumber
    characterSetCatalog: SqlIdentifier
    characterSetSchema: SqlIdentifier
    characterSetName: SqlIdentifier
    collationCatalog: SqlIdentifier
    collationSchema: SqlIdentifier
    collationName: SqlIdentifier
    numericPrecision: CardinalNumber
    numericPrecisionRadix: CardinalNumber
    numericScale: CardinalNumber
    datetimePrecision: CardinalNumber
    intervalType: CharacterData
    intervalPrecision: CardinalNumber
    domainDefault: CharacterData
    udtCatalog: SqlIdentifier
    udtSchema: SqlIdentifier
    udtName: SqlIdentifier
    scopeCatalog: SqlIdentifier
    scopeSchema: SqlIdentifier
    scopeName: SqlIdentifier
    maximumCardinality: CardinalNumber
    dtdIdentifier: SqlIdentifier
  ): DomainsConnection

  # Reads and enables paginatation through a set of \`ElementType\`.
  allElementTypes(
    # The method to use when ordering \`ElementType\`.
    orderBy: ElementTypesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    objectCatalog: SqlIdentifier
    objectSchema: SqlIdentifier
    objectName: SqlIdentifier
    objectType: CharacterData
    collectionTypeIdentifier: SqlIdentifier
    dataType: CharacterData
    characterMaximumLength: CardinalNumber
    characterOctetLength: CardinalNumber
    characterSetCatalog: SqlIdentifier
    characterSetSchema: SqlIdentifier
    characterSetName: SqlIdentifier
    collationCatalog: SqlIdentifier
    collationSchema: SqlIdentifier
    collationName: SqlIdentifier
    numericPrecision: CardinalNumber
    numericPrecisionRadix: CardinalNumber
    numericScale: CardinalNumber
    datetimePrecision: CardinalNumber
    intervalType: CharacterData
    intervalPrecision: CardinalNumber
    domainDefault: CharacterData
    udtCatalog: SqlIdentifier
    udtSchema: SqlIdentifier
    udtName: SqlIdentifier
    scopeCatalog: SqlIdentifier
    scopeSchema: SqlIdentifier
    scopeName: SqlIdentifier
    maximumCardinality: CardinalNumber
    dtdIdentifier: SqlIdentifier
  ): ElementTypesConnection

  # Reads and enables paginatation through a set of \`EnabledRole\`.
  allEnabledRoles(
    # The method to use when ordering \`EnabledRole\`.
    orderBy: EnabledRolesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    roleName: SqlIdentifier
  ): EnabledRolesConnection

  # Reads and enables paginatation through a set of \`ForeignDataWrapperOption\`.
  allForeignDataWrapperOptions(
    # The method to use when ordering \`ForeignDataWrapperOption\`.
    orderBy: ForeignDataWrapperOptionsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    foreignDataWrapperCatalog: SqlIdentifier
    foreignDataWrapperName: SqlIdentifier
    optionName: SqlIdentifier
    optionValue: CharacterData
  ): ForeignDataWrapperOptionsConnection

  # Reads and enables paginatation through a set of \`ForeignDataWrapper\`.
  allForeignDataWrappers(
    # The method to use when ordering \`ForeignDataWrapper\`.
    orderBy: ForeignDataWrappersOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    foreignDataWrapperCatalog: SqlIdentifier
    foreignDataWrapperName: SqlIdentifier
    authorizationIdentifier: SqlIdentifier
    libraryName: CharacterData
    foreignDataWrapperLanguage: CharacterData
  ): ForeignDataWrappersConnection

  # Reads and enables paginatation through a set of \`ForeignServerOption\`.
  allForeignServerOptions(
    # The method to use when ordering \`ForeignServerOption\`.
    orderBy: ForeignServerOptionsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    foreignServerCatalog: SqlIdentifier
    foreignServerName: SqlIdentifier
    optionName: SqlIdentifier
    optionValue: CharacterData
  ): ForeignServerOptionsConnection

  # Reads and enables paginatation through a set of \`ForeignServer\`.
  allForeignServers(
    # The method to use when ordering \`ForeignServer\`.
    orderBy: ForeignServersOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    foreignServerCatalog: SqlIdentifier
    foreignServerName: SqlIdentifier
    foreignDataWrapperCatalog: SqlIdentifier
    foreignDataWrapperName: SqlIdentifier
    foreignServerType: CharacterData
    foreignServerVersion: CharacterData
    authorizationIdentifier: SqlIdentifier
  ): ForeignServersConnection

  # Reads and enables paginatation through a set of \`ForeignTableOption\`.
  allForeignTableOptions(
    # The method to use when ordering \`ForeignTableOption\`.
    orderBy: ForeignTableOptionsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    foreignTableCatalog: SqlIdentifier
    foreignTableSchema: String
    foreignTableName: String
    optionName: SqlIdentifier
    optionValue: CharacterData
  ): ForeignTableOptionsConnection

  # Reads and enables paginatation through a set of \`ForeignTable\`.
  allForeignTables(
    # The method to use when ordering \`ForeignTable\`.
    orderBy: ForeignTablesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    foreignTableCatalog: SqlIdentifier
    foreignTableSchema: String
    foreignTableName: String
    foreignServerCatalog: SqlIdentifier
    foreignServerName: SqlIdentifier
  ): ForeignTablesConnection

  # Reads and enables paginatation through a set of \`InformationSchemaCatalogName\`.
  allInformationSchemaCatalogNames(
    # The method to use when ordering \`InformationSchemaCatalogName\`.
    orderBy: InformationSchemaCatalogNamesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    catalogName: SqlIdentifier
  ): InformationSchemaCatalogNamesConnection

  # Reads and enables paginatation through a set of \`KeyColumnUsage\`.
  allKeyColumnUsages(
    # The method to use when ordering \`KeyColumnUsage\`.
    orderBy: KeyColumnUsagesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    constraintCatalog: SqlIdentifier
    constraintSchema: SqlIdentifier
    constraintName: SqlIdentifier
    tableCatalog: SqlIdentifier
    tableSchema: SqlIdentifier
    tableName: SqlIdentifier
    columnName: SqlIdentifier
    ordinalPosition: CardinalNumber
    positionInUniqueConstraint: CardinalNumber
  ): KeyColumnUsagesConnection

  # Reads and enables paginatation through a set of \`Parameter\`.
  allParameters(
    # The method to use when ordering \`Parameter\`.
    orderBy: ParametersOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    specificCatalog: SqlIdentifier
    specificSchema: SqlIdentifier
    specificName: SqlIdentifier
    ordinalPosition: CardinalNumber
    parameterMode: CharacterData
    isResult: YesOrNo
    asLocator: YesOrNo
    parameterName: SqlIdentifier
    dataType: CharacterData
    characterMaximumLength: CardinalNumber
    characterOctetLength: CardinalNumber
    characterSetCatalog: SqlIdentifier
    characterSetSchema: SqlIdentifier
    characterSetName: SqlIdentifier
    collationCatalog: SqlIdentifier
    collationSchema: SqlIdentifier
    collationName: SqlIdentifier
    numericPrecision: CardinalNumber
    numericPrecisionRadix: CardinalNumber
    numericScale: CardinalNumber
    datetimePrecision: CardinalNumber
    intervalType: CharacterData
    intervalPrecision: CardinalNumber
    udtCatalog: SqlIdentifier
    udtSchema: SqlIdentifier
    udtName: SqlIdentifier
    scopeCatalog: SqlIdentifier
    scopeSchema: SqlIdentifier
    scopeName: SqlIdentifier
    maximumCardinality: CardinalNumber
    dtdIdentifier: SqlIdentifier
    parameterDefault: CharacterData
  ): ParametersConnection

  # Reads and enables paginatation through a set of \`ReferentialConstraint\`.
  allReferentialConstraints(
    # The method to use when ordering \`ReferentialConstraint\`.
    orderBy: ReferentialConstraintsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    constraintCatalog: SqlIdentifier
    constraintSchema: SqlIdentifier
    constraintName: SqlIdentifier
    uniqueConstraintCatalog: SqlIdentifier
    uniqueConstraintSchema: SqlIdentifier
    uniqueConstraintName: SqlIdentifier
    matchOption: CharacterData
    updateRule: CharacterData
    deleteRule: CharacterData
  ): ReferentialConstraintsConnection

  # Reads and enables paginatation through a set of \`RoleColumnGrant\`.
  allRoleColumnGrants(
    # The method to use when ordering \`RoleColumnGrant\`.
    orderBy: RoleColumnGrantsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    grantor: SqlIdentifier
    grantee: SqlIdentifier
    tableCatalog: SqlIdentifier
    tableSchema: SqlIdentifier
    tableName: SqlIdentifier
    columnName: SqlIdentifier
    privilegeType: CharacterData
    isGrantable: YesOrNo
  ): RoleColumnGrantsConnection

  # Reads and enables paginatation through a set of \`RoleRoutineGrant\`.
  allRoleRoutineGrants(
    # The method to use when ordering \`RoleRoutineGrant\`.
    orderBy: RoleRoutineGrantsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    grantor: SqlIdentifier
    grantee: SqlIdentifier
    specificCatalog: SqlIdentifier
    specificSchema: SqlIdentifier
    specificName: SqlIdentifier
    routineCatalog: SqlIdentifier
    routineSchema: SqlIdentifier
    routineName: SqlIdentifier
    privilegeType: CharacterData
    isGrantable: YesOrNo
  ): RoleRoutineGrantsConnection

  # Reads and enables paginatation through a set of \`RoleTableGrant\`.
  allRoleTableGrants(
    # The method to use when ordering \`RoleTableGrant\`.
    orderBy: RoleTableGrantsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    grantor: SqlIdentifier
    grantee: SqlIdentifier
    tableCatalog: SqlIdentifier
    tableSchema: SqlIdentifier
    tableName: SqlIdentifier
    privilegeType: CharacterData
    isGrantable: YesOrNo
    withHierarchy: YesOrNo
  ): RoleTableGrantsConnection

  # Reads and enables paginatation through a set of \`RoleUdtGrant\`.
  allRoleUdtGrants(
    # The method to use when ordering \`RoleUdtGrant\`.
    orderBy: RoleUdtGrantsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    grantor: SqlIdentifier
    grantee: SqlIdentifier
    udtCatalog: SqlIdentifier
    udtSchema: SqlIdentifier
    udtName: SqlIdentifier
    privilegeType: CharacterData
    isGrantable: YesOrNo
  ): RoleUdtGrantsConnection

  # Reads and enables paginatation through a set of \`RoleUsageGrant\`.
  allRoleUsageGrants(
    # The method to use when ordering \`RoleUsageGrant\`.
    orderBy: RoleUsageGrantsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    grantor: SqlIdentifier
    grantee: SqlIdentifier
    objectCatalog: SqlIdentifier
    objectSchema: SqlIdentifier
    objectName: SqlIdentifier
    objectType: CharacterData
    privilegeType: CharacterData
    isGrantable: YesOrNo
  ): RoleUsageGrantsConnection

  # Reads and enables paginatation through a set of \`RoutinePrivilege\`.
  allRoutinePrivileges(
    # The method to use when ordering \`RoutinePrivilege\`.
    orderBy: RoutinePrivilegesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    grantor: SqlIdentifier
    grantee: SqlIdentifier
    specificCatalog: SqlIdentifier
    specificSchema: SqlIdentifier
    specificName: SqlIdentifier
    routineCatalog: SqlIdentifier
    routineSchema: SqlIdentifier
    routineName: SqlIdentifier
    privilegeType: CharacterData
    isGrantable: YesOrNo
  ): RoutinePrivilegesConnection

  # Reads and enables paginatation through a set of \`Routine\`.
  allRoutines(
    # The method to use when ordering \`Routine\`.
    orderBy: RoutinesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    specificCatalog: SqlIdentifier
    specificSchema: SqlIdentifier
    specificName: SqlIdentifier
    routineCatalog: SqlIdentifier
    routineSchema: SqlIdentifier
    routineName: SqlIdentifier
    routineType: CharacterData
    moduleCatalog: SqlIdentifier
    moduleSchema: SqlIdentifier
    moduleName: SqlIdentifier
    udtCatalog: SqlIdentifier
    udtSchema: SqlIdentifier
    udtName: SqlIdentifier
    dataType: CharacterData
    characterMaximumLength: CardinalNumber
    characterOctetLength: CardinalNumber
    characterSetCatalog: SqlIdentifier
    characterSetSchema: SqlIdentifier
    characterSetName: SqlIdentifier
    collationCatalog: SqlIdentifier
    collationSchema: SqlIdentifier
    collationName: SqlIdentifier
    numericPrecision: CardinalNumber
    numericPrecisionRadix: CardinalNumber
    numericScale: CardinalNumber
    datetimePrecision: CardinalNumber
    intervalType: CharacterData
    intervalPrecision: CardinalNumber
    typeUdtCatalog: SqlIdentifier
    typeUdtSchema: SqlIdentifier
    typeUdtName: SqlIdentifier
    scopeCatalog: SqlIdentifier
    scopeSchema: SqlIdentifier
    scopeName: SqlIdentifier
    maximumCardinality: CardinalNumber
    dtdIdentifier: SqlIdentifier
    routineBody: CharacterData
    routineDefinition: CharacterData
    externalName: CharacterData
    externalLanguage: CharacterData
    parameterStyle: CharacterData
    isDeterministic: YesOrNo
    sqlDataAccess: CharacterData
    isNullCall: YesOrNo
    sqlPath: CharacterData
    schemaLevelRoutine: YesOrNo
    maxDynamicResultSets: CardinalNumber
    isUserDefinedCast: YesOrNo
    isImplicitlyInvocable: YesOrNo
    securityType: CharacterData
    toSqlSpecificCatalog: SqlIdentifier
    toSqlSpecificSchema: SqlIdentifier
    toSqlSpecificName: SqlIdentifier
    asLocator: YesOrNo
    created: TimeStamp
    lastAltered: TimeStamp
    newSavepointLevel: YesOrNo
    isUdtDependent: YesOrNo
    resultCastFromDataType: CharacterData
    resultCastAsLocator: YesOrNo
    resultCastCharMaxLength: CardinalNumber
    resultCastCharOctetLength: CardinalNumber
    resultCastCharSetCatalog: SqlIdentifier
    resultCastCharSetSchema: SqlIdentifier
    resultCastCharacterSetName: SqlIdentifier
    resultCastCollationCatalog: SqlIdentifier
    resultCastCollationSchema: SqlIdentifier
    resultCastCollationName: SqlIdentifier
    resultCastNumericPrecision: CardinalNumber
    resultCastNumericPrecisionRadix: CardinalNumber
    resultCastNumericScale: CardinalNumber
    resultCastDatetimePrecision: CardinalNumber
    resultCastIntervalType: CharacterData
    resultCastIntervalPrecision: CardinalNumber
    resultCastTypeUdtCatalog: SqlIdentifier
    resultCastTypeUdtSchema: SqlIdentifier
    resultCastTypeUdtName: SqlIdentifier
    resultCastScopeCatalog: SqlIdentifier
    resultCastScopeSchema: SqlIdentifier
    resultCastScopeName: SqlIdentifier
    resultCastMaximumCardinality: CardinalNumber
    resultCastDtdIdentifier: SqlIdentifier
  ): RoutinesConnection

  # Reads and enables paginatation through a set of \`Schema\`.
  allSchemata(
    # The method to use when ordering \`Schema\`.
    orderBy: SchemataOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    catalogName: SqlIdentifier
    schemaName: SqlIdentifier
    schemaOwner: SqlIdentifier
    defaultCharacterSetCatalog: SqlIdentifier
    defaultCharacterSetSchema: SqlIdentifier
    defaultCharacterSetName: SqlIdentifier
    sqlPath: CharacterData
  ): SchemataConnection

  # Reads and enables paginatation through a set of \`Sequence\`.
  allSequences(
    # The method to use when ordering \`Sequence\`.
    orderBy: SequencesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    sequenceCatalog: SqlIdentifier
    sequenceSchema: SqlIdentifier
    sequenceName: SqlIdentifier
    dataType: CharacterData
    numericPrecision: CardinalNumber
    numericPrecisionRadix: CardinalNumber
    numericScale: CardinalNumber
    startValue: CharacterData
    minimumValue: CharacterData
    maximumValue: CharacterData
    increment: CharacterData
    cycleOption: YesOrNo
  ): SequencesConnection

  # Reads and enables paginatation through a set of \`SqlFeature\`.
  allSqlFeatures(
    # The method to use when ordering \`SqlFeature\`.
    orderBy: SqlFeaturesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    featureId: CharacterData
    featureName: CharacterData
    subFeatureId: CharacterData
    subFeatureName: CharacterData
    isSupported: YesOrNo
    isVerifiedBy: CharacterData
    comments: CharacterData
  ): SqlFeaturesConnection

  # Reads and enables paginatation through a set of \`SqlImplementationInfo\`.
  allSqlImplementationInfos(
    # The method to use when ordering \`SqlImplementationInfo\`.
    orderBy: SqlImplementationInfosOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    implementationInfoId: CharacterData
    implementationInfoName: CharacterData
    integerValue: CardinalNumber
    characterValue: CharacterData
    comments: CharacterData
  ): SqlImplementationInfosConnection

  # Reads and enables paginatation through a set of \`SqlLanguage\`.
  allSqlLanguages(
    # The method to use when ordering \`SqlLanguage\`.
    orderBy: SqlLanguagesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    sqlLanguageSource: CharacterData
    sqlLanguageYear: CharacterData
    sqlLanguageConformance: CharacterData
    sqlLanguageIntegrity: CharacterData
    sqlLanguageImplementation: CharacterData
    sqlLanguageBindingStyle: CharacterData
    sqlLanguageProgrammingLanguage: CharacterData
  ): SqlLanguagesConnection

  # Reads and enables paginatation through a set of \`SqlPackage\`.
  allSqlPackages(
    # The method to use when ordering \`SqlPackage\`.
    orderBy: SqlPackagesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    featureId: CharacterData
    featureName: CharacterData
    isSupported: YesOrNo
    isVerifiedBy: CharacterData
    comments: CharacterData
  ): SqlPackagesConnection

  # Reads and enables paginatation through a set of \`SqlPart\`.
  allSqlParts(
    # The method to use when ordering \`SqlPart\`.
    orderBy: SqlPartsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    featureId: CharacterData
    featureName: CharacterData
    isSupported: YesOrNo
    isVerifiedBy: CharacterData
    comments: CharacterData
  ): SqlPartsConnection

  # Reads and enables paginatation through a set of \`SqlSizing\`.
  allSqlSizings(
    # The method to use when ordering \`SqlSizing\`.
    orderBy: SqlSizingsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    sizingId: CardinalNumber
    sizingName: CharacterData
    supportedValue: CardinalNumber
    comments: CharacterData
  ): SqlSizingsConnection

  # Reads and enables paginatation through a set of \`SqlSizingProfile\`.
  allSqlSizingProfiles(
    # The method to use when ordering \`SqlSizingProfile\`.
    orderBy: SqlSizingProfilesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    sizingId: CardinalNumber
    sizingName: CharacterData
    profileId: CharacterData
    requiredValue: CardinalNumber
    comments: CharacterData
  ): SqlSizingProfilesConnection

  # Reads and enables paginatation through a set of \`TableConstraint\`.
  allTableConstraints(
    # The method to use when ordering \`TableConstraint\`.
    orderBy: TableConstraintsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    constraintCatalog: SqlIdentifier
    constraintSchema: SqlIdentifier
    constraintName: SqlIdentifier
    tableCatalog: SqlIdentifier
    tableSchema: SqlIdentifier
    tableName: SqlIdentifier
    constraintType: CharacterData
    isDeferrable: YesOrNo
    initiallyDeferred: YesOrNo
  ): TableConstraintsConnection

  # Reads and enables paginatation through a set of \`TablePrivilege\`.
  allTablePrivileges(
    # The method to use when ordering \`TablePrivilege\`.
    orderBy: TablePrivilegesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    grantor: SqlIdentifier
    grantee: SqlIdentifier
    tableCatalog: SqlIdentifier
    tableSchema: SqlIdentifier
    tableName: SqlIdentifier
    privilegeType: CharacterData
    isGrantable: YesOrNo
    withHierarchy: YesOrNo
  ): TablePrivilegesConnection

  # Reads and enables paginatation through a set of \`Table\`.
  allTables(
    # The method to use when ordering \`Table\`.
    orderBy: TablesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    tableCatalog: SqlIdentifier
    tableSchema: SqlIdentifier
    tableName: SqlIdentifier
    tableType: CharacterData
    selfReferencingColumnName: SqlIdentifier
    referenceGeneration: CharacterData
    userDefinedTypeCatalog: SqlIdentifier
    userDefinedTypeSchema: SqlIdentifier
    userDefinedTypeName: SqlIdentifier
    isInsertableInto: YesOrNo
    isTyped: YesOrNo
    commitAction: CharacterData
  ): TablesConnection

  # Reads and enables paginatation through a set of \`Transform\`.
  allTransforms(
    # The method to use when ordering \`Transform\`.
    orderBy: TransformsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    udtCatalog: SqlIdentifier
    udtSchema: SqlIdentifier
    udtName: SqlIdentifier
    specificCatalog: SqlIdentifier
    specificSchema: SqlIdentifier
    specificName: SqlIdentifier
    groupName: SqlIdentifier
    transformType: CharacterData
  ): TransformsConnection

  # Reads and enables paginatation through a set of \`TriggeredUpdateColumn\`.
  allTriggeredUpdateColumns(
    # The method to use when ordering \`TriggeredUpdateColumn\`.
    orderBy: TriggeredUpdateColumnsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    triggerCatalog: SqlIdentifier
    triggerSchema: SqlIdentifier
    triggerName: SqlIdentifier
    eventObjectCatalog: SqlIdentifier
    eventObjectSchema: SqlIdentifier
    eventObjectTable: SqlIdentifier
    eventObjectColumn: SqlIdentifier
  ): TriggeredUpdateColumnsConnection

  # Reads and enables paginatation through a set of \`Trigger\`.
  allTriggers(
    # The method to use when ordering \`Trigger\`.
    orderBy: TriggersOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    triggerCatalog: SqlIdentifier
    triggerSchema: SqlIdentifier
    triggerName: SqlIdentifier
    eventManipulation: CharacterData
    eventObjectCatalog: SqlIdentifier
    eventObjectSchema: SqlIdentifier
    eventObjectTable: SqlIdentifier
    actionOrder: CardinalNumber
    actionCondition: CharacterData
    actionStatement: CharacterData
    actionOrientation: CharacterData
    actionTiming: CharacterData
    actionReferenceOldTable: SqlIdentifier
    actionReferenceNewTable: SqlIdentifier
    actionReferenceOldRow: SqlIdentifier
    actionReferenceNewRow: SqlIdentifier
    created: TimeStamp
  ): TriggersConnection

  # Reads and enables paginatation through a set of \`UdtPrivilege\`.
  allUdtPrivileges(
    # The method to use when ordering \`UdtPrivilege\`.
    orderBy: UdtPrivilegesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    grantor: SqlIdentifier
    grantee: SqlIdentifier
    udtCatalog: SqlIdentifier
    udtSchema: SqlIdentifier
    udtName: SqlIdentifier
    privilegeType: CharacterData
    isGrantable: YesOrNo
  ): UdtPrivilegesConnection

  # Reads and enables paginatation through a set of \`UsagePrivilege\`.
  allUsagePrivileges(
    # The method to use when ordering \`UsagePrivilege\`.
    orderBy: UsagePrivilegesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    grantor: SqlIdentifier
    grantee: SqlIdentifier
    objectCatalog: SqlIdentifier
    objectSchema: SqlIdentifier
    objectName: SqlIdentifier
    objectType: CharacterData
    privilegeType: CharacterData
    isGrantable: YesOrNo
  ): UsagePrivilegesConnection

  # Reads and enables paginatation through a set of \`UserDefinedType\`.
  allUserDefinedTypes(
    # The method to use when ordering \`UserDefinedType\`.
    orderBy: UserDefinedTypesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    userDefinedTypeCatalog: SqlIdentifier
    userDefinedTypeSchema: SqlIdentifier
    userDefinedTypeName: SqlIdentifier
    userDefinedTypeCategory: CharacterData
    isInstantiable: YesOrNo
    isFinal: YesOrNo
    orderingForm: CharacterData
    orderingCategory: CharacterData
    orderingRoutineCatalog: SqlIdentifier
    orderingRoutineSchema: SqlIdentifier
    orderingRoutineName: SqlIdentifier
    referenceType: CharacterData
    dataType: CharacterData
    characterMaximumLength: CardinalNumber
    characterOctetLength: CardinalNumber
    characterSetCatalog: SqlIdentifier
    characterSetSchema: SqlIdentifier
    characterSetName: SqlIdentifier
    collationCatalog: SqlIdentifier
    collationSchema: SqlIdentifier
    collationName: SqlIdentifier
    numericPrecision: CardinalNumber
    numericPrecisionRadix: CardinalNumber
    numericScale: CardinalNumber
    datetimePrecision: CardinalNumber
    intervalType: CharacterData
    intervalPrecision: CardinalNumber
    sourceDtdIdentifier: SqlIdentifier
    refDtdIdentifier: SqlIdentifier
  ): UserDefinedTypesConnection

  # Reads and enables paginatation through a set of \`UserMappingOption\`.
  allUserMappingOptions(
    # The method to use when ordering \`UserMappingOption\`.
    orderBy: UserMappingOptionsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    authorizationIdentifier: SqlIdentifier
    foreignServerCatalog: SqlIdentifier
    foreignServerName: SqlIdentifier
    optionName: SqlIdentifier
    optionValue: CharacterData
  ): UserMappingOptionsConnection

  # Reads and enables paginatation through a set of \`UserMapping\`.
  allUserMappings(
    # The method to use when ordering \`UserMapping\`.
    orderBy: UserMappingsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    authorizationIdentifier: SqlIdentifier
    foreignServerCatalog: SqlIdentifier
    foreignServerName: SqlIdentifier
  ): UserMappingsConnection

  # Reads and enables paginatation through a set of \`ViewColumnUsage\`.
  allViewColumnUsages(
    # The method to use when ordering \`ViewColumnUsage\`.
    orderBy: ViewColumnUsagesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    viewCatalog: SqlIdentifier
    viewSchema: SqlIdentifier
    viewName: SqlIdentifier
    tableCatalog: SqlIdentifier
    tableSchema: SqlIdentifier
    tableName: SqlIdentifier
    columnName: SqlIdentifier
  ): ViewColumnUsagesConnection

  # Reads and enables paginatation through a set of \`ViewRoutineUsage\`.
  allViewRoutineUsages(
    # The method to use when ordering \`ViewRoutineUsage\`.
    orderBy: ViewRoutineUsagesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    tableCatalog: SqlIdentifier
    tableSchema: SqlIdentifier
    tableName: SqlIdentifier
    specificCatalog: SqlIdentifier
    specificSchema: SqlIdentifier
    specificName: SqlIdentifier
  ): ViewRoutineUsagesConnection

  # Reads and enables paginatation through a set of \`ViewTableUsage\`.
  allViewTableUsages(
    # The method to use when ordering \`ViewTableUsage\`.
    orderBy: ViewTableUsagesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    viewCatalog: SqlIdentifier
    viewSchema: SqlIdentifier
    viewName: SqlIdentifier
    tableCatalog: SqlIdentifier
    tableSchema: SqlIdentifier
    tableName: SqlIdentifier
  ): ViewTableUsagesConnection

  # Reads and enables paginatation through a set of \`View\`.
  allViews(
    # The method to use when ordering \`View\`.
    orderBy: ViewsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    tableCatalog: SqlIdentifier
    tableSchema: SqlIdentifier
    tableName: SqlIdentifier
    viewDefinition: CharacterData
    checkOption: CharacterData
    isUpdatable: YesOrNo
    isInsertableInto: YesOrNo
    isTriggerUpdatable: YesOrNo
    isTriggerDeletable: YesOrNo
    isTriggerInsertableInto: YesOrNo
  ): ViewsConnection

  # Exposes the root query type nested one level down. This is helpful for Relay 1
  # which can only query top level fields if they are in a particular form.
  query: Query!
}

type ReferentialConstraint {
  constraintCatalog: SqlIdentifier
  constraintSchema: SqlIdentifier
  constraintName: SqlIdentifier
  uniqueConstraintCatalog: SqlIdentifier
  uniqueConstraintSchema: SqlIdentifier
  uniqueConstraintName: SqlIdentifier
  matchOption: CharacterData
  updateRule: CharacterData
  deleteRule: CharacterData
}

# A connection to a list of \`ReferentialConstraint\` values.
type ReferentialConstraintsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`ReferentialConstraint\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`ReferentialConstraint\` and cursor to aid in pagination.
  edges: [ReferentialConstraintsEdge]

  # A list of \`ReferentialConstraint\` objects.
  nodes: [ReferentialConstraint!]
}

# A \`ReferentialConstraint\` edge in the connection.
type ReferentialConstraintsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`ReferentialConstraint\` at the end of the edge.
  node: ReferentialConstraint!
}

# Methods to use when ordering \`ReferentialConstraint\`.
enum ReferentialConstraintsOrderBy {
  NATURAL
  CONSTRAINT_CATALOG_ASC
  CONSTRAINT_CATALOG_DESC
  CONSTRAINT_SCHEMA_ASC
  CONSTRAINT_SCHEMA_DESC
  CONSTRAINT_NAME_ASC
  CONSTRAINT_NAME_DESC
  UNIQUE_CONSTRAINT_CATALOG_ASC
  UNIQUE_CONSTRAINT_CATALOG_DESC
  UNIQUE_CONSTRAINT_SCHEMA_ASC
  UNIQUE_CONSTRAINT_SCHEMA_DESC
  UNIQUE_CONSTRAINT_NAME_ASC
  UNIQUE_CONSTRAINT_NAME_DESC
  MATCH_OPTION_ASC
  MATCH_OPTION_DESC
  UPDATE_RULE_ASC
  UPDATE_RULE_DESC
  DELETE_RULE_ASC
  DELETE_RULE_DESC
}

type RoleColumnGrant {
  grantor: SqlIdentifier
  grantee: SqlIdentifier
  tableCatalog: SqlIdentifier
  tableSchema: SqlIdentifier
  tableName: SqlIdentifier
  columnName: SqlIdentifier
  privilegeType: CharacterData
  isGrantable: YesOrNo
}

# A connection to a list of \`RoleColumnGrant\` values.
type RoleColumnGrantsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`RoleColumnGrant\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`RoleColumnGrant\` and cursor to aid in pagination.
  edges: [RoleColumnGrantsEdge]

  # A list of \`RoleColumnGrant\` objects.
  nodes: [RoleColumnGrant!]
}

# A \`RoleColumnGrant\` edge in the connection.
type RoleColumnGrantsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`RoleColumnGrant\` at the end of the edge.
  node: RoleColumnGrant!
}

# Methods to use when ordering \`RoleColumnGrant\`.
enum RoleColumnGrantsOrderBy {
  NATURAL
  GRANTOR_ASC
  GRANTOR_DESC
  GRANTEE_ASC
  GRANTEE_DESC
  TABLE_CATALOG_ASC
  TABLE_CATALOG_DESC
  TABLE_SCHEMA_ASC
  TABLE_SCHEMA_DESC
  TABLE_NAME_ASC
  TABLE_NAME_DESC
  COLUMN_NAME_ASC
  COLUMN_NAME_DESC
  PRIVILEGE_TYPE_ASC
  PRIVILEGE_TYPE_DESC
  IS_GRANTABLE_ASC
  IS_GRANTABLE_DESC
}

type RoleRoutineGrant {
  grantor: SqlIdentifier
  grantee: SqlIdentifier
  specificCatalog: SqlIdentifier
  specificSchema: SqlIdentifier
  specificName: SqlIdentifier
  routineCatalog: SqlIdentifier
  routineSchema: SqlIdentifier
  routineName: SqlIdentifier
  privilegeType: CharacterData
  isGrantable: YesOrNo
}

# A connection to a list of \`RoleRoutineGrant\` values.
type RoleRoutineGrantsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`RoleRoutineGrant\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`RoleRoutineGrant\` and cursor to aid in pagination.
  edges: [RoleRoutineGrantsEdge]

  # A list of \`RoleRoutineGrant\` objects.
  nodes: [RoleRoutineGrant!]
}

# A \`RoleRoutineGrant\` edge in the connection.
type RoleRoutineGrantsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`RoleRoutineGrant\` at the end of the edge.
  node: RoleRoutineGrant!
}

# Methods to use when ordering \`RoleRoutineGrant\`.
enum RoleRoutineGrantsOrderBy {
  NATURAL
  GRANTOR_ASC
  GRANTOR_DESC
  GRANTEE_ASC
  GRANTEE_DESC
  SPECIFIC_CATALOG_ASC
  SPECIFIC_CATALOG_DESC
  SPECIFIC_SCHEMA_ASC
  SPECIFIC_SCHEMA_DESC
  SPECIFIC_NAME_ASC
  SPECIFIC_NAME_DESC
  ROUTINE_CATALOG_ASC
  ROUTINE_CATALOG_DESC
  ROUTINE_SCHEMA_ASC
  ROUTINE_SCHEMA_DESC
  ROUTINE_NAME_ASC
  ROUTINE_NAME_DESC
  PRIVILEGE_TYPE_ASC
  PRIVILEGE_TYPE_DESC
  IS_GRANTABLE_ASC
  IS_GRANTABLE_DESC
}

type RoleTableGrant {
  grantor: SqlIdentifier
  grantee: SqlIdentifier
  tableCatalog: SqlIdentifier
  tableSchema: SqlIdentifier
  tableName: SqlIdentifier
  privilegeType: CharacterData
  isGrantable: YesOrNo
  withHierarchy: YesOrNo
}

# A connection to a list of \`RoleTableGrant\` values.
type RoleTableGrantsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`RoleTableGrant\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`RoleTableGrant\` and cursor to aid in pagination.
  edges: [RoleTableGrantsEdge]

  # A list of \`RoleTableGrant\` objects.
  nodes: [RoleTableGrant!]
}

# A \`RoleTableGrant\` edge in the connection.
type RoleTableGrantsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`RoleTableGrant\` at the end of the edge.
  node: RoleTableGrant!
}

# Methods to use when ordering \`RoleTableGrant\`.
enum RoleTableGrantsOrderBy {
  NATURAL
  GRANTOR_ASC
  GRANTOR_DESC
  GRANTEE_ASC
  GRANTEE_DESC
  TABLE_CATALOG_ASC
  TABLE_CATALOG_DESC
  TABLE_SCHEMA_ASC
  TABLE_SCHEMA_DESC
  TABLE_NAME_ASC
  TABLE_NAME_DESC
  PRIVILEGE_TYPE_ASC
  PRIVILEGE_TYPE_DESC
  IS_GRANTABLE_ASC
  IS_GRANTABLE_DESC
  WITH_HIERARCHY_ASC
  WITH_HIERARCHY_DESC
}

type RoleUdtGrant {
  grantor: SqlIdentifier
  grantee: SqlIdentifier
  udtCatalog: SqlIdentifier
  udtSchema: SqlIdentifier
  udtName: SqlIdentifier
  privilegeType: CharacterData
  isGrantable: YesOrNo
}

# A connection to a list of \`RoleUdtGrant\` values.
type RoleUdtGrantsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`RoleUdtGrant\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`RoleUdtGrant\` and cursor to aid in pagination.
  edges: [RoleUdtGrantsEdge]

  # A list of \`RoleUdtGrant\` objects.
  nodes: [RoleUdtGrant!]
}

# A \`RoleUdtGrant\` edge in the connection.
type RoleUdtGrantsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`RoleUdtGrant\` at the end of the edge.
  node: RoleUdtGrant!
}

# Methods to use when ordering \`RoleUdtGrant\`.
enum RoleUdtGrantsOrderBy {
  NATURAL
  GRANTOR_ASC
  GRANTOR_DESC
  GRANTEE_ASC
  GRANTEE_DESC
  UDT_CATALOG_ASC
  UDT_CATALOG_DESC
  UDT_SCHEMA_ASC
  UDT_SCHEMA_DESC
  UDT_NAME_ASC
  UDT_NAME_DESC
  PRIVILEGE_TYPE_ASC
  PRIVILEGE_TYPE_DESC
  IS_GRANTABLE_ASC
  IS_GRANTABLE_DESC
}

type RoleUsageGrant {
  grantor: SqlIdentifier
  grantee: SqlIdentifier
  objectCatalog: SqlIdentifier
  objectSchema: SqlIdentifier
  objectName: SqlIdentifier
  objectType: CharacterData
  privilegeType: CharacterData
  isGrantable: YesOrNo
}

# A connection to a list of \`RoleUsageGrant\` values.
type RoleUsageGrantsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`RoleUsageGrant\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`RoleUsageGrant\` and cursor to aid in pagination.
  edges: [RoleUsageGrantsEdge]

  # A list of \`RoleUsageGrant\` objects.
  nodes: [RoleUsageGrant!]
}

# A \`RoleUsageGrant\` edge in the connection.
type RoleUsageGrantsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`RoleUsageGrant\` at the end of the edge.
  node: RoleUsageGrant!
}

# Methods to use when ordering \`RoleUsageGrant\`.
enum RoleUsageGrantsOrderBy {
  NATURAL
  GRANTOR_ASC
  GRANTOR_DESC
  GRANTEE_ASC
  GRANTEE_DESC
  OBJECT_CATALOG_ASC
  OBJECT_CATALOG_DESC
  OBJECT_SCHEMA_ASC
  OBJECT_SCHEMA_DESC
  OBJECT_NAME_ASC
  OBJECT_NAME_DESC
  OBJECT_TYPE_ASC
  OBJECT_TYPE_DESC
  PRIVILEGE_TYPE_ASC
  PRIVILEGE_TYPE_DESC
  IS_GRANTABLE_ASC
  IS_GRANTABLE_DESC
}

type Routine {
  specificCatalog: SqlIdentifier
  specificSchema: SqlIdentifier
  specificName: SqlIdentifier
  routineCatalog: SqlIdentifier
  routineSchema: SqlIdentifier
  routineName: SqlIdentifier
  routineType: CharacterData
  moduleCatalog: SqlIdentifier
  moduleSchema: SqlIdentifier
  moduleName: SqlIdentifier
  udtCatalog: SqlIdentifier
  udtSchema: SqlIdentifier
  udtName: SqlIdentifier
  dataType: CharacterData
  characterMaximumLength: CardinalNumber
  characterOctetLength: CardinalNumber
  characterSetCatalog: SqlIdentifier
  characterSetSchema: SqlIdentifier
  characterSetName: SqlIdentifier
  collationCatalog: SqlIdentifier
  collationSchema: SqlIdentifier
  collationName: SqlIdentifier
  numericPrecision: CardinalNumber
  numericPrecisionRadix: CardinalNumber
  numericScale: CardinalNumber
  datetimePrecision: CardinalNumber
  intervalType: CharacterData
  intervalPrecision: CardinalNumber
  typeUdtCatalog: SqlIdentifier
  typeUdtSchema: SqlIdentifier
  typeUdtName: SqlIdentifier
  scopeCatalog: SqlIdentifier
  scopeSchema: SqlIdentifier
  scopeName: SqlIdentifier
  maximumCardinality: CardinalNumber
  dtdIdentifier: SqlIdentifier
  routineBody: CharacterData
  routineDefinition: CharacterData
  externalName: CharacterData
  externalLanguage: CharacterData
  parameterStyle: CharacterData
  isDeterministic: YesOrNo
  sqlDataAccess: CharacterData
  isNullCall: YesOrNo
  sqlPath: CharacterData
  schemaLevelRoutine: YesOrNo
  maxDynamicResultSets: CardinalNumber
  isUserDefinedCast: YesOrNo
  isImplicitlyInvocable: YesOrNo
  securityType: CharacterData
  toSqlSpecificCatalog: SqlIdentifier
  toSqlSpecificSchema: SqlIdentifier
  toSqlSpecificName: SqlIdentifier
  asLocator: YesOrNo
  created: TimeStamp
  lastAltered: TimeStamp
  newSavepointLevel: YesOrNo
  isUdtDependent: YesOrNo
  resultCastFromDataType: CharacterData
  resultCastAsLocator: YesOrNo
  resultCastCharMaxLength: CardinalNumber
  resultCastCharOctetLength: CardinalNumber
  resultCastCharSetCatalog: SqlIdentifier
  resultCastCharSetSchema: SqlIdentifier
  resultCastCharacterSetName: SqlIdentifier
  resultCastCollationCatalog: SqlIdentifier
  resultCastCollationSchema: SqlIdentifier
  resultCastCollationName: SqlIdentifier
  resultCastNumericPrecision: CardinalNumber
  resultCastNumericPrecisionRadix: CardinalNumber
  resultCastNumericScale: CardinalNumber
  resultCastDatetimePrecision: CardinalNumber
  resultCastIntervalType: CharacterData
  resultCastIntervalPrecision: CardinalNumber
  resultCastTypeUdtCatalog: SqlIdentifier
  resultCastTypeUdtSchema: SqlIdentifier
  resultCastTypeUdtName: SqlIdentifier
  resultCastScopeCatalog: SqlIdentifier
  resultCastScopeSchema: SqlIdentifier
  resultCastScopeName: SqlIdentifier
  resultCastMaximumCardinality: CardinalNumber
  resultCastDtdIdentifier: SqlIdentifier
}

type RoutinePrivilege {
  grantor: SqlIdentifier
  grantee: SqlIdentifier
  specificCatalog: SqlIdentifier
  specificSchema: SqlIdentifier
  specificName: SqlIdentifier
  routineCatalog: SqlIdentifier
  routineSchema: SqlIdentifier
  routineName: SqlIdentifier
  privilegeType: CharacterData
  isGrantable: YesOrNo
}

# A connection to a list of \`RoutinePrivilege\` values.
type RoutinePrivilegesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`RoutinePrivilege\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`RoutinePrivilege\` and cursor to aid in pagination.
  edges: [RoutinePrivilegesEdge]

  # A list of \`RoutinePrivilege\` objects.
  nodes: [RoutinePrivilege!]
}

# A \`RoutinePrivilege\` edge in the connection.
type RoutinePrivilegesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`RoutinePrivilege\` at the end of the edge.
  node: RoutinePrivilege!
}

# Methods to use when ordering \`RoutinePrivilege\`.
enum RoutinePrivilegesOrderBy {
  NATURAL
  GRANTOR_ASC
  GRANTOR_DESC
  GRANTEE_ASC
  GRANTEE_DESC
  SPECIFIC_CATALOG_ASC
  SPECIFIC_CATALOG_DESC
  SPECIFIC_SCHEMA_ASC
  SPECIFIC_SCHEMA_DESC
  SPECIFIC_NAME_ASC
  SPECIFIC_NAME_DESC
  ROUTINE_CATALOG_ASC
  ROUTINE_CATALOG_DESC
  ROUTINE_SCHEMA_ASC
  ROUTINE_SCHEMA_DESC
  ROUTINE_NAME_ASC
  ROUTINE_NAME_DESC
  PRIVILEGE_TYPE_ASC
  PRIVILEGE_TYPE_DESC
  IS_GRANTABLE_ASC
  IS_GRANTABLE_DESC
}

# A connection to a list of \`Routine\` values.
type RoutinesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`Routine\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`Routine\` and cursor to aid in pagination.
  edges: [RoutinesEdge]

  # A list of \`Routine\` objects.
  nodes: [Routine!]
}

# A \`Routine\` edge in the connection.
type RoutinesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`Routine\` at the end of the edge.
  node: Routine!
}

# Methods to use when ordering \`Routine\`.
enum RoutinesOrderBy {
  NATURAL
  SPECIFIC_CATALOG_ASC
  SPECIFIC_CATALOG_DESC
  SPECIFIC_SCHEMA_ASC
  SPECIFIC_SCHEMA_DESC
  SPECIFIC_NAME_ASC
  SPECIFIC_NAME_DESC
  ROUTINE_CATALOG_ASC
  ROUTINE_CATALOG_DESC
  ROUTINE_SCHEMA_ASC
  ROUTINE_SCHEMA_DESC
  ROUTINE_NAME_ASC
  ROUTINE_NAME_DESC
  ROUTINE_TYPE_ASC
  ROUTINE_TYPE_DESC
  MODULE_CATALOG_ASC
  MODULE_CATALOG_DESC
  MODULE_SCHEMA_ASC
  MODULE_SCHEMA_DESC
  MODULE_NAME_ASC
  MODULE_NAME_DESC
  UDT_CATALOG_ASC
  UDT_CATALOG_DESC
  UDT_SCHEMA_ASC
  UDT_SCHEMA_DESC
  UDT_NAME_ASC
  UDT_NAME_DESC
  DATA_TYPE_ASC
  DATA_TYPE_DESC
  CHARACTER_MAXIMUM_LENGTH_ASC
  CHARACTER_MAXIMUM_LENGTH_DESC
  CHARACTER_OCTET_LENGTH_ASC
  CHARACTER_OCTET_LENGTH_DESC
  CHARACTER_SET_CATALOG_ASC
  CHARACTER_SET_CATALOG_DESC
  CHARACTER_SET_SCHEMA_ASC
  CHARACTER_SET_SCHEMA_DESC
  CHARACTER_SET_NAME_ASC
  CHARACTER_SET_NAME_DESC
  COLLATION_CATALOG_ASC
  COLLATION_CATALOG_DESC
  COLLATION_SCHEMA_ASC
  COLLATION_SCHEMA_DESC
  COLLATION_NAME_ASC
  COLLATION_NAME_DESC
  NUMERIC_PRECISION_ASC
  NUMERIC_PRECISION_DESC
  NUMERIC_PRECISION_RADIX_ASC
  NUMERIC_PRECISION_RADIX_DESC
  NUMERIC_SCALE_ASC
  NUMERIC_SCALE_DESC
  DATETIME_PRECISION_ASC
  DATETIME_PRECISION_DESC
  INTERVAL_TYPE_ASC
  INTERVAL_TYPE_DESC
  INTERVAL_PRECISION_ASC
  INTERVAL_PRECISION_DESC
  TYPE_UDT_CATALOG_ASC
  TYPE_UDT_CATALOG_DESC
  TYPE_UDT_SCHEMA_ASC
  TYPE_UDT_SCHEMA_DESC
  TYPE_UDT_NAME_ASC
  TYPE_UDT_NAME_DESC
  SCOPE_CATALOG_ASC
  SCOPE_CATALOG_DESC
  SCOPE_SCHEMA_ASC
  SCOPE_SCHEMA_DESC
  SCOPE_NAME_ASC
  SCOPE_NAME_DESC
  MAXIMUM_CARDINALITY_ASC
  MAXIMUM_CARDINALITY_DESC
  DTD_IDENTIFIER_ASC
  DTD_IDENTIFIER_DESC
  ROUTINE_BODY_ASC
  ROUTINE_BODY_DESC
  ROUTINE_DEFINITION_ASC
  ROUTINE_DEFINITION_DESC
  EXTERNAL_NAME_ASC
  EXTERNAL_NAME_DESC
  EXTERNAL_LANGUAGE_ASC
  EXTERNAL_LANGUAGE_DESC
  PARAMETER_STYLE_ASC
  PARAMETER_STYLE_DESC
  IS_DETERMINISTIC_ASC
  IS_DETERMINISTIC_DESC
  SQL_DATA_ACCESS_ASC
  SQL_DATA_ACCESS_DESC
  IS_NULL_CALL_ASC
  IS_NULL_CALL_DESC
  SQL_PATH_ASC
  SQL_PATH_DESC
  SCHEMA_LEVEL_ROUTINE_ASC
  SCHEMA_LEVEL_ROUTINE_DESC
  MAX_DYNAMIC_RESULT_SETS_ASC
  MAX_DYNAMIC_RESULT_SETS_DESC
  IS_USER_DEFINED_CAST_ASC
  IS_USER_DEFINED_CAST_DESC
  IS_IMPLICITLY_INVOCABLE_ASC
  IS_IMPLICITLY_INVOCABLE_DESC
  SECURITY_TYPE_ASC
  SECURITY_TYPE_DESC
  TO_SQL_SPECIFIC_CATALOG_ASC
  TO_SQL_SPECIFIC_CATALOG_DESC
  TO_SQL_SPECIFIC_SCHEMA_ASC
  TO_SQL_SPECIFIC_SCHEMA_DESC
  TO_SQL_SPECIFIC_NAME_ASC
  TO_SQL_SPECIFIC_NAME_DESC
  AS_LOCATOR_ASC
  AS_LOCATOR_DESC
  CREATED_ASC
  CREATED_DESC
  LAST_ALTERED_ASC
  LAST_ALTERED_DESC
  NEW_SAVEPOINT_LEVEL_ASC
  NEW_SAVEPOINT_LEVEL_DESC
  IS_UDT_DEPENDENT_ASC
  IS_UDT_DEPENDENT_DESC
  RESULT_CAST_FROM_DATA_TYPE_ASC
  RESULT_CAST_FROM_DATA_TYPE_DESC
  RESULT_CAST_AS_LOCATOR_ASC
  RESULT_CAST_AS_LOCATOR_DESC
  RESULT_CAST_CHAR_MAX_LENGTH_ASC
  RESULT_CAST_CHAR_MAX_LENGTH_DESC
  RESULT_CAST_CHAR_OCTET_LENGTH_ASC
  RESULT_CAST_CHAR_OCTET_LENGTH_DESC
  RESULT_CAST_CHAR_SET_CATALOG_ASC
  RESULT_CAST_CHAR_SET_CATALOG_DESC
  RESULT_CAST_CHAR_SET_SCHEMA_ASC
  RESULT_CAST_CHAR_SET_SCHEMA_DESC
  RESULT_CAST_CHARACTER_SET_NAME_ASC
  RESULT_CAST_CHARACTER_SET_NAME_DESC
  RESULT_CAST_COLLATION_CATALOG_ASC
  RESULT_CAST_COLLATION_CATALOG_DESC
  RESULT_CAST_COLLATION_SCHEMA_ASC
  RESULT_CAST_COLLATION_SCHEMA_DESC
  RESULT_CAST_COLLATION_NAME_ASC
  RESULT_CAST_COLLATION_NAME_DESC
  RESULT_CAST_NUMERIC_PRECISION_ASC
  RESULT_CAST_NUMERIC_PRECISION_DESC
  RESULT_CAST_NUMERIC_PRECISION_RADIX_ASC
  RESULT_CAST_NUMERIC_PRECISION_RADIX_DESC
  RESULT_CAST_NUMERIC_SCALE_ASC
  RESULT_CAST_NUMERIC_SCALE_DESC
  RESULT_CAST_DATETIME_PRECISION_ASC
  RESULT_CAST_DATETIME_PRECISION_DESC
  RESULT_CAST_INTERVAL_TYPE_ASC
  RESULT_CAST_INTERVAL_TYPE_DESC
  RESULT_CAST_INTERVAL_PRECISION_ASC
  RESULT_CAST_INTERVAL_PRECISION_DESC
  RESULT_CAST_TYPE_UDT_CATALOG_ASC
  RESULT_CAST_TYPE_UDT_CATALOG_DESC
  RESULT_CAST_TYPE_UDT_SCHEMA_ASC
  RESULT_CAST_TYPE_UDT_SCHEMA_DESC
  RESULT_CAST_TYPE_UDT_NAME_ASC
  RESULT_CAST_TYPE_UDT_NAME_DESC
  RESULT_CAST_SCOPE_CATALOG_ASC
  RESULT_CAST_SCOPE_CATALOG_DESC
  RESULT_CAST_SCOPE_SCHEMA_ASC
  RESULT_CAST_SCOPE_SCHEMA_DESC
  RESULT_CAST_SCOPE_NAME_ASC
  RESULT_CAST_SCOPE_NAME_DESC
  RESULT_CAST_MAXIMUM_CARDINALITY_ASC
  RESULT_CAST_MAXIMUM_CARDINALITY_DESC
  RESULT_CAST_DTD_IDENTIFIER_ASC
  RESULT_CAST_DTD_IDENTIFIER_DESC
}

type Schema {
  catalogName: SqlIdentifier
  schemaName: SqlIdentifier
  schemaOwner: SqlIdentifier
  defaultCharacterSetCatalog: SqlIdentifier
  defaultCharacterSetSchema: SqlIdentifier
  defaultCharacterSetName: SqlIdentifier
  sqlPath: CharacterData
}

# A connection to a list of \`Schema\` values.
type SchemataConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`Schema\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`Schema\` and cursor to aid in pagination.
  edges: [SchemataEdge]

  # A list of \`Schema\` objects.
  nodes: [Schema!]
}

# A \`Schema\` edge in the connection.
type SchemataEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`Schema\` at the end of the edge.
  node: Schema!
}

# Methods to use when ordering \`Schema\`.
enum SchemataOrderBy {
  NATURAL
  CATALOG_NAME_ASC
  CATALOG_NAME_DESC
  SCHEMA_NAME_ASC
  SCHEMA_NAME_DESC
  SCHEMA_OWNER_ASC
  SCHEMA_OWNER_DESC
  DEFAULT_CHARACTER_SET_CATALOG_ASC
  DEFAULT_CHARACTER_SET_CATALOG_DESC
  DEFAULT_CHARACTER_SET_SCHEMA_ASC
  DEFAULT_CHARACTER_SET_SCHEMA_DESC
  DEFAULT_CHARACTER_SET_NAME_ASC
  DEFAULT_CHARACTER_SET_NAME_DESC
  SQL_PATH_ASC
  SQL_PATH_DESC
}

type Sequence {
  sequenceCatalog: SqlIdentifier
  sequenceSchema: SqlIdentifier
  sequenceName: SqlIdentifier
  dataType: CharacterData
  numericPrecision: CardinalNumber
  numericPrecisionRadix: CardinalNumber
  numericScale: CardinalNumber
  startValue: CharacterData
  minimumValue: CharacterData
  maximumValue: CharacterData
  increment: CharacterData
  cycleOption: YesOrNo
}

# A connection to a list of \`Sequence\` values.
type SequencesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`Sequence\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`Sequence\` and cursor to aid in pagination.
  edges: [SequencesEdge]

  # A list of \`Sequence\` objects.
  nodes: [Sequence!]
}

# A \`Sequence\` edge in the connection.
type SequencesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`Sequence\` at the end of the edge.
  node: Sequence!
}

# Methods to use when ordering \`Sequence\`.
enum SequencesOrderBy {
  NATURAL
  SEQUENCE_CATALOG_ASC
  SEQUENCE_CATALOG_DESC
  SEQUENCE_SCHEMA_ASC
  SEQUENCE_SCHEMA_DESC
  SEQUENCE_NAME_ASC
  SEQUENCE_NAME_DESC
  DATA_TYPE_ASC
  DATA_TYPE_DESC
  NUMERIC_PRECISION_ASC
  NUMERIC_PRECISION_DESC
  NUMERIC_PRECISION_RADIX_ASC
  NUMERIC_PRECISION_RADIX_DESC
  NUMERIC_SCALE_ASC
  NUMERIC_SCALE_DESC
  START_VALUE_ASC
  START_VALUE_DESC
  MINIMUM_VALUE_ASC
  MINIMUM_VALUE_DESC
  MAXIMUM_VALUE_ASC
  MAXIMUM_VALUE_DESC
  INCREMENT_ASC
  INCREMENT_DESC
  CYCLE_OPTION_ASC
  CYCLE_OPTION_DESC
}

type SqlFeature {
  featureId: CharacterData
  featureName: CharacterData
  subFeatureId: CharacterData
  subFeatureName: CharacterData
  isSupported: YesOrNo
  isVerifiedBy: CharacterData
  comments: CharacterData
}

input SqlFeatureInput {
  featureId: CharacterData
  featureName: CharacterData
  subFeatureId: CharacterData
  subFeatureName: CharacterData
  isSupported: YesOrNo
  isVerifiedBy: CharacterData
  comments: CharacterData
}

# A connection to a list of \`SqlFeature\` values.
type SqlFeaturesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`SqlFeature\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`SqlFeature\` and cursor to aid in pagination.
  edges: [SqlFeaturesEdge]

  # A list of \`SqlFeature\` objects.
  nodes: [SqlFeature!]
}

# A \`SqlFeature\` edge in the connection.
type SqlFeaturesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`SqlFeature\` at the end of the edge.
  node: SqlFeature!
}

# Methods to use when ordering \`SqlFeature\`.
enum SqlFeaturesOrderBy {
  NATURAL
  FEATURE_ID_ASC
  FEATURE_ID_DESC
  FEATURE_NAME_ASC
  FEATURE_NAME_DESC
  SUB_FEATURE_ID_ASC
  SUB_FEATURE_ID_DESC
  SUB_FEATURE_NAME_ASC
  SUB_FEATURE_NAME_DESC
  IS_SUPPORTED_ASC
  IS_SUPPORTED_DESC
  IS_VERIFIED_BY_ASC
  IS_VERIFIED_BY_DESC
  COMMENTS_ASC
  COMMENTS_DESC
}

scalar SqlIdentifier

type SqlImplementationInfo {
  implementationInfoId: CharacterData
  implementationInfoName: CharacterData
  integerValue: CardinalNumber
  characterValue: CharacterData
  comments: CharacterData
}

input SqlImplementationInfoInput {
  implementationInfoId: CharacterData
  implementationInfoName: CharacterData
  integerValue: CardinalNumber
  characterValue: CharacterData
  comments: CharacterData
}

# A connection to a list of \`SqlImplementationInfo\` values.
type SqlImplementationInfosConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`SqlImplementationInfo\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`SqlImplementationInfo\` and cursor to aid in pagination.
  edges: [SqlImplementationInfosEdge]

  # A list of \`SqlImplementationInfo\` objects.
  nodes: [SqlImplementationInfo!]
}

# A \`SqlImplementationInfo\` edge in the connection.
type SqlImplementationInfosEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`SqlImplementationInfo\` at the end of the edge.
  node: SqlImplementationInfo!
}

# Methods to use when ordering \`SqlImplementationInfo\`.
enum SqlImplementationInfosOrderBy {
  NATURAL
  IMPLEMENTATION_INFO_ID_ASC
  IMPLEMENTATION_INFO_ID_DESC
  IMPLEMENTATION_INFO_NAME_ASC
  IMPLEMENTATION_INFO_NAME_DESC
  INTEGER_VALUE_ASC
  INTEGER_VALUE_DESC
  CHARACTER_VALUE_ASC
  CHARACTER_VALUE_DESC
  COMMENTS_ASC
  COMMENTS_DESC
}

type SqlLanguage {
  sqlLanguageSource: CharacterData
  sqlLanguageYear: CharacterData
  sqlLanguageConformance: CharacterData
  sqlLanguageIntegrity: CharacterData
  sqlLanguageImplementation: CharacterData
  sqlLanguageBindingStyle: CharacterData
  sqlLanguageProgrammingLanguage: CharacterData
}

input SqlLanguageInput {
  sqlLanguageSource: CharacterData
  sqlLanguageYear: CharacterData
  sqlLanguageConformance: CharacterData
  sqlLanguageIntegrity: CharacterData
  sqlLanguageImplementation: CharacterData
  sqlLanguageBindingStyle: CharacterData
  sqlLanguageProgrammingLanguage: CharacterData
}

# A connection to a list of \`SqlLanguage\` values.
type SqlLanguagesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`SqlLanguage\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`SqlLanguage\` and cursor to aid in pagination.
  edges: [SqlLanguagesEdge]

  # A list of \`SqlLanguage\` objects.
  nodes: [SqlLanguage!]
}

# A \`SqlLanguage\` edge in the connection.
type SqlLanguagesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`SqlLanguage\` at the end of the edge.
  node: SqlLanguage!
}

# Methods to use when ordering \`SqlLanguage\`.
enum SqlLanguagesOrderBy {
  NATURAL
  SQL_LANGUAGE_SOURCE_ASC
  SQL_LANGUAGE_SOURCE_DESC
  SQL_LANGUAGE_YEAR_ASC
  SQL_LANGUAGE_YEAR_DESC
  SQL_LANGUAGE_CONFORMANCE_ASC
  SQL_LANGUAGE_CONFORMANCE_DESC
  SQL_LANGUAGE_INTEGRITY_ASC
  SQL_LANGUAGE_INTEGRITY_DESC
  SQL_LANGUAGE_IMPLEMENTATION_ASC
  SQL_LANGUAGE_IMPLEMENTATION_DESC
  SQL_LANGUAGE_BINDING_STYLE_ASC
  SQL_LANGUAGE_BINDING_STYLE_DESC
  SQL_LANGUAGE_PROGRAMMING_LANGUAGE_ASC
  SQL_LANGUAGE_PROGRAMMING_LANGUAGE_DESC
}

type SqlPackage {
  featureId: CharacterData
  featureName: CharacterData
  isSupported: YesOrNo
  isVerifiedBy: CharacterData
  comments: CharacterData
}

input SqlPackageInput {
  featureId: CharacterData
  featureName: CharacterData
  isSupported: YesOrNo
  isVerifiedBy: CharacterData
  comments: CharacterData
}

# A connection to a list of \`SqlPackage\` values.
type SqlPackagesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`SqlPackage\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`SqlPackage\` and cursor to aid in pagination.
  edges: [SqlPackagesEdge]

  # A list of \`SqlPackage\` objects.
  nodes: [SqlPackage!]
}

# A \`SqlPackage\` edge in the connection.
type SqlPackagesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`SqlPackage\` at the end of the edge.
  node: SqlPackage!
}

# Methods to use when ordering \`SqlPackage\`.
enum SqlPackagesOrderBy {
  NATURAL
  FEATURE_ID_ASC
  FEATURE_ID_DESC
  FEATURE_NAME_ASC
  FEATURE_NAME_DESC
  IS_SUPPORTED_ASC
  IS_SUPPORTED_DESC
  IS_VERIFIED_BY_ASC
  IS_VERIFIED_BY_DESC
  COMMENTS_ASC
  COMMENTS_DESC
}

type SqlPart {
  featureId: CharacterData
  featureName: CharacterData
  isSupported: YesOrNo
  isVerifiedBy: CharacterData
  comments: CharacterData
}

input SqlPartInput {
  featureId: CharacterData
  featureName: CharacterData
  isSupported: YesOrNo
  isVerifiedBy: CharacterData
  comments: CharacterData
}

# A connection to a list of \`SqlPart\` values.
type SqlPartsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`SqlPart\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`SqlPart\` and cursor to aid in pagination.
  edges: [SqlPartsEdge]

  # A list of \`SqlPart\` objects.
  nodes: [SqlPart!]
}

# A \`SqlPart\` edge in the connection.
type SqlPartsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`SqlPart\` at the end of the edge.
  node: SqlPart!
}

# Methods to use when ordering \`SqlPart\`.
enum SqlPartsOrderBy {
  NATURAL
  FEATURE_ID_ASC
  FEATURE_ID_DESC
  FEATURE_NAME_ASC
  FEATURE_NAME_DESC
  IS_SUPPORTED_ASC
  IS_SUPPORTED_DESC
  IS_VERIFIED_BY_ASC
  IS_VERIFIED_BY_DESC
  COMMENTS_ASC
  COMMENTS_DESC
}

type SqlSizing {
  sizingId: CardinalNumber
  sizingName: CharacterData
  supportedValue: CardinalNumber
  comments: CharacterData
}

input SqlSizingInput {
  sizingId: CardinalNumber
  sizingName: CharacterData
  supportedValue: CardinalNumber
  comments: CharacterData
}

type SqlSizingProfile {
  sizingId: CardinalNumber
  sizingName: CharacterData
  profileId: CharacterData
  requiredValue: CardinalNumber
  comments: CharacterData
}

input SqlSizingProfileInput {
  sizingId: CardinalNumber
  sizingName: CharacterData
  profileId: CharacterData
  requiredValue: CardinalNumber
  comments: CharacterData
}

# A connection to a list of \`SqlSizingProfile\` values.
type SqlSizingProfilesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`SqlSizingProfile\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`SqlSizingProfile\` and cursor to aid in pagination.
  edges: [SqlSizingProfilesEdge]

  # A list of \`SqlSizingProfile\` objects.
  nodes: [SqlSizingProfile!]
}

# A \`SqlSizingProfile\` edge in the connection.
type SqlSizingProfilesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`SqlSizingProfile\` at the end of the edge.
  node: SqlSizingProfile!
}

# Methods to use when ordering \`SqlSizingProfile\`.
enum SqlSizingProfilesOrderBy {
  NATURAL
  SIZING_ID_ASC
  SIZING_ID_DESC
  SIZING_NAME_ASC
  SIZING_NAME_DESC
  PROFILE_ID_ASC
  PROFILE_ID_DESC
  REQUIRED_VALUE_ASC
  REQUIRED_VALUE_DESC
  COMMENTS_ASC
  COMMENTS_DESC
}

# A connection to a list of \`SqlSizing\` values.
type SqlSizingsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`SqlSizing\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`SqlSizing\` and cursor to aid in pagination.
  edges: [SqlSizingsEdge]

  # A list of \`SqlSizing\` objects.
  nodes: [SqlSizing!]
}

# A \`SqlSizing\` edge in the connection.
type SqlSizingsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`SqlSizing\` at the end of the edge.
  node: SqlSizing!
}

# Methods to use when ordering \`SqlSizing\`.
enum SqlSizingsOrderBy {
  NATURAL
  SIZING_ID_ASC
  SIZING_ID_DESC
  SIZING_NAME_ASC
  SIZING_NAME_DESC
  SUPPORTED_VALUE_ASC
  SUPPORTED_VALUE_DESC
  COMMENTS_ASC
  COMMENTS_DESC
}

type Table {
  tableCatalog: SqlIdentifier
  tableSchema: SqlIdentifier
  tableName: SqlIdentifier
  tableType: CharacterData
  selfReferencingColumnName: SqlIdentifier
  referenceGeneration: CharacterData
  userDefinedTypeCatalog: SqlIdentifier
  userDefinedTypeSchema: SqlIdentifier
  userDefinedTypeName: SqlIdentifier
  isInsertableInto: YesOrNo
  isTyped: YesOrNo
  commitAction: CharacterData
}

type TableConstraint {
  constraintCatalog: SqlIdentifier
  constraintSchema: SqlIdentifier
  constraintName: SqlIdentifier
  tableCatalog: SqlIdentifier
  tableSchema: SqlIdentifier
  tableName: SqlIdentifier
  constraintType: CharacterData
  isDeferrable: YesOrNo
  initiallyDeferred: YesOrNo
}

# A connection to a list of \`TableConstraint\` values.
type TableConstraintsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`TableConstraint\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`TableConstraint\` and cursor to aid in pagination.
  edges: [TableConstraintsEdge]

  # A list of \`TableConstraint\` objects.
  nodes: [TableConstraint!]
}

# A \`TableConstraint\` edge in the connection.
type TableConstraintsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`TableConstraint\` at the end of the edge.
  node: TableConstraint!
}

# Methods to use when ordering \`TableConstraint\`.
enum TableConstraintsOrderBy {
  NATURAL
  CONSTRAINT_CATALOG_ASC
  CONSTRAINT_CATALOG_DESC
  CONSTRAINT_SCHEMA_ASC
  CONSTRAINT_SCHEMA_DESC
  CONSTRAINT_NAME_ASC
  CONSTRAINT_NAME_DESC
  TABLE_CATALOG_ASC
  TABLE_CATALOG_DESC
  TABLE_SCHEMA_ASC
  TABLE_SCHEMA_DESC
  TABLE_NAME_ASC
  TABLE_NAME_DESC
  CONSTRAINT_TYPE_ASC
  CONSTRAINT_TYPE_DESC
  IS_DEFERRABLE_ASC
  IS_DEFERRABLE_DESC
  INITIALLY_DEFERRED_ASC
  INITIALLY_DEFERRED_DESC
}

type TablePrivilege {
  grantor: SqlIdentifier
  grantee: SqlIdentifier
  tableCatalog: SqlIdentifier
  tableSchema: SqlIdentifier
  tableName: SqlIdentifier
  privilegeType: CharacterData
  isGrantable: YesOrNo
  withHierarchy: YesOrNo
}

# A connection to a list of \`TablePrivilege\` values.
type TablePrivilegesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`TablePrivilege\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`TablePrivilege\` and cursor to aid in pagination.
  edges: [TablePrivilegesEdge]

  # A list of \`TablePrivilege\` objects.
  nodes: [TablePrivilege!]
}

# A \`TablePrivilege\` edge in the connection.
type TablePrivilegesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`TablePrivilege\` at the end of the edge.
  node: TablePrivilege!
}

# Methods to use when ordering \`TablePrivilege\`.
enum TablePrivilegesOrderBy {
  NATURAL
  GRANTOR_ASC
  GRANTOR_DESC
  GRANTEE_ASC
  GRANTEE_DESC
  TABLE_CATALOG_ASC
  TABLE_CATALOG_DESC
  TABLE_SCHEMA_ASC
  TABLE_SCHEMA_DESC
  TABLE_NAME_ASC
  TABLE_NAME_DESC
  PRIVILEGE_TYPE_ASC
  PRIVILEGE_TYPE_DESC
  IS_GRANTABLE_ASC
  IS_GRANTABLE_DESC
  WITH_HIERARCHY_ASC
  WITH_HIERARCHY_DESC
}

# A connection to a list of \`Table\` values.
type TablesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`Table\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`Table\` and cursor to aid in pagination.
  edges: [TablesEdge]

  # A list of \`Table\` objects.
  nodes: [Table!]
}

# A \`Table\` edge in the connection.
type TablesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`Table\` at the end of the edge.
  node: Table!
}

# Methods to use when ordering \`Table\`.
enum TablesOrderBy {
  NATURAL
  TABLE_CATALOG_ASC
  TABLE_CATALOG_DESC
  TABLE_SCHEMA_ASC
  TABLE_SCHEMA_DESC
  TABLE_NAME_ASC
  TABLE_NAME_DESC
  TABLE_TYPE_ASC
  TABLE_TYPE_DESC
  SELF_REFERENCING_COLUMN_NAME_ASC
  SELF_REFERENCING_COLUMN_NAME_DESC
  REFERENCE_GENERATION_ASC
  REFERENCE_GENERATION_DESC
  USER_DEFINED_TYPE_CATALOG_ASC
  USER_DEFINED_TYPE_CATALOG_DESC
  USER_DEFINED_TYPE_SCHEMA_ASC
  USER_DEFINED_TYPE_SCHEMA_DESC
  USER_DEFINED_TYPE_NAME_ASC
  USER_DEFINED_TYPE_NAME_DESC
  IS_INSERTABLE_INTO_ASC
  IS_INSERTABLE_INTO_DESC
  IS_TYPED_ASC
  IS_TYPED_DESC
  COMMIT_ACTION_ASC
  COMMIT_ACTION_DESC
}

scalar TimeStamp

type Transform {
  udtCatalog: SqlIdentifier
  udtSchema: SqlIdentifier
  udtName: SqlIdentifier
  specificCatalog: SqlIdentifier
  specificSchema: SqlIdentifier
  specificName: SqlIdentifier
  groupName: SqlIdentifier
  transformType: CharacterData
}

# A connection to a list of \`Transform\` values.
type TransformsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`Transform\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`Transform\` and cursor to aid in pagination.
  edges: [TransformsEdge]

  # A list of \`Transform\` objects.
  nodes: [Transform!]
}

# A \`Transform\` edge in the connection.
type TransformsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`Transform\` at the end of the edge.
  node: Transform!
}

# Methods to use when ordering \`Transform\`.
enum TransformsOrderBy {
  NATURAL
  UDT_CATALOG_ASC
  UDT_CATALOG_DESC
  UDT_SCHEMA_ASC
  UDT_SCHEMA_DESC
  UDT_NAME_ASC
  UDT_NAME_DESC
  SPECIFIC_CATALOG_ASC
  SPECIFIC_CATALOG_DESC
  SPECIFIC_SCHEMA_ASC
  SPECIFIC_SCHEMA_DESC
  SPECIFIC_NAME_ASC
  SPECIFIC_NAME_DESC
  GROUP_NAME_ASC
  GROUP_NAME_DESC
  TRANSFORM_TYPE_ASC
  TRANSFORM_TYPE_DESC
}

type Trigger {
  triggerCatalog: SqlIdentifier
  triggerSchema: SqlIdentifier
  triggerName: SqlIdentifier
  eventManipulation: CharacterData
  eventObjectCatalog: SqlIdentifier
  eventObjectSchema: SqlIdentifier
  eventObjectTable: SqlIdentifier
  actionOrder: CardinalNumber
  actionCondition: CharacterData
  actionStatement: CharacterData
  actionOrientation: CharacterData
  actionTiming: CharacterData
  actionReferenceOldTable: SqlIdentifier
  actionReferenceNewTable: SqlIdentifier
  actionReferenceOldRow: SqlIdentifier
  actionReferenceNewRow: SqlIdentifier
  created: TimeStamp
}

type TriggeredUpdateColumn {
  triggerCatalog: SqlIdentifier
  triggerSchema: SqlIdentifier
  triggerName: SqlIdentifier
  eventObjectCatalog: SqlIdentifier
  eventObjectSchema: SqlIdentifier
  eventObjectTable: SqlIdentifier
  eventObjectColumn: SqlIdentifier
}

# A connection to a list of \`TriggeredUpdateColumn\` values.
type TriggeredUpdateColumnsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`TriggeredUpdateColumn\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`TriggeredUpdateColumn\` and cursor to aid in pagination.
  edges: [TriggeredUpdateColumnsEdge]

  # A list of \`TriggeredUpdateColumn\` objects.
  nodes: [TriggeredUpdateColumn!]
}

# A \`TriggeredUpdateColumn\` edge in the connection.
type TriggeredUpdateColumnsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`TriggeredUpdateColumn\` at the end of the edge.
  node: TriggeredUpdateColumn!
}

# Methods to use when ordering \`TriggeredUpdateColumn\`.
enum TriggeredUpdateColumnsOrderBy {
  NATURAL
  TRIGGER_CATALOG_ASC
  TRIGGER_CATALOG_DESC
  TRIGGER_SCHEMA_ASC
  TRIGGER_SCHEMA_DESC
  TRIGGER_NAME_ASC
  TRIGGER_NAME_DESC
  EVENT_OBJECT_CATALOG_ASC
  EVENT_OBJECT_CATALOG_DESC
  EVENT_OBJECT_SCHEMA_ASC
  EVENT_OBJECT_SCHEMA_DESC
  EVENT_OBJECT_TABLE_ASC
  EVENT_OBJECT_TABLE_DESC
  EVENT_OBJECT_COLUMN_ASC
  EVENT_OBJECT_COLUMN_DESC
}

# A connection to a list of \`Trigger\` values.
type TriggersConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`Trigger\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`Trigger\` and cursor to aid in pagination.
  edges: [TriggersEdge]

  # A list of \`Trigger\` objects.
  nodes: [Trigger!]
}

# A \`Trigger\` edge in the connection.
type TriggersEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`Trigger\` at the end of the edge.
  node: Trigger!
}

# Methods to use when ordering \`Trigger\`.
enum TriggersOrderBy {
  NATURAL
  TRIGGER_CATALOG_ASC
  TRIGGER_CATALOG_DESC
  TRIGGER_SCHEMA_ASC
  TRIGGER_SCHEMA_DESC
  TRIGGER_NAME_ASC
  TRIGGER_NAME_DESC
  EVENT_MANIPULATION_ASC
  EVENT_MANIPULATION_DESC
  EVENT_OBJECT_CATALOG_ASC
  EVENT_OBJECT_CATALOG_DESC
  EVENT_OBJECT_SCHEMA_ASC
  EVENT_OBJECT_SCHEMA_DESC
  EVENT_OBJECT_TABLE_ASC
  EVENT_OBJECT_TABLE_DESC
  ACTION_ORDER_ASC
  ACTION_ORDER_DESC
  ACTION_CONDITION_ASC
  ACTION_CONDITION_DESC
  ACTION_STATEMENT_ASC
  ACTION_STATEMENT_DESC
  ACTION_ORIENTATION_ASC
  ACTION_ORIENTATION_DESC
  ACTION_TIMING_ASC
  ACTION_TIMING_DESC
  ACTION_REFERENCE_OLD_TABLE_ASC
  ACTION_REFERENCE_OLD_TABLE_DESC
  ACTION_REFERENCE_NEW_TABLE_ASC
  ACTION_REFERENCE_NEW_TABLE_DESC
  ACTION_REFERENCE_OLD_ROW_ASC
  ACTION_REFERENCE_OLD_ROW_DESC
  ACTION_REFERENCE_NEW_ROW_ASC
  ACTION_REFERENCE_NEW_ROW_DESC
  CREATED_ASC
  CREATED_DESC
}

type UdtPrivilege {
  grantor: SqlIdentifier
  grantee: SqlIdentifier
  udtCatalog: SqlIdentifier
  udtSchema: SqlIdentifier
  udtName: SqlIdentifier
  privilegeType: CharacterData
  isGrantable: YesOrNo
}

# A connection to a list of \`UdtPrivilege\` values.
type UdtPrivilegesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`UdtPrivilege\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`UdtPrivilege\` and cursor to aid in pagination.
  edges: [UdtPrivilegesEdge]

  # A list of \`UdtPrivilege\` objects.
  nodes: [UdtPrivilege!]
}

# A \`UdtPrivilege\` edge in the connection.
type UdtPrivilegesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`UdtPrivilege\` at the end of the edge.
  node: UdtPrivilege!
}

# Methods to use when ordering \`UdtPrivilege\`.
enum UdtPrivilegesOrderBy {
  NATURAL
  GRANTOR_ASC
  GRANTOR_DESC
  GRANTEE_ASC
  GRANTEE_DESC
  UDT_CATALOG_ASC
  UDT_CATALOG_DESC
  UDT_SCHEMA_ASC
  UDT_SCHEMA_DESC
  UDT_NAME_ASC
  UDT_NAME_DESC
  PRIVILEGE_TYPE_ASC
  PRIVILEGE_TYPE_DESC
  IS_GRANTABLE_ASC
  IS_GRANTABLE_DESC
}

type UsagePrivilege {
  grantor: SqlIdentifier
  grantee: SqlIdentifier
  objectCatalog: SqlIdentifier
  objectSchema: SqlIdentifier
  objectName: SqlIdentifier
  objectType: CharacterData
  privilegeType: CharacterData
  isGrantable: YesOrNo
}

# A connection to a list of \`UsagePrivilege\` values.
type UsagePrivilegesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`UsagePrivilege\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`UsagePrivilege\` and cursor to aid in pagination.
  edges: [UsagePrivilegesEdge]

  # A list of \`UsagePrivilege\` objects.
  nodes: [UsagePrivilege!]
}

# A \`UsagePrivilege\` edge in the connection.
type UsagePrivilegesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`UsagePrivilege\` at the end of the edge.
  node: UsagePrivilege!
}

# Methods to use when ordering \`UsagePrivilege\`.
enum UsagePrivilegesOrderBy {
  NATURAL
  GRANTOR_ASC
  GRANTOR_DESC
  GRANTEE_ASC
  GRANTEE_DESC
  OBJECT_CATALOG_ASC
  OBJECT_CATALOG_DESC
  OBJECT_SCHEMA_ASC
  OBJECT_SCHEMA_DESC
  OBJECT_NAME_ASC
  OBJECT_NAME_DESC
  OBJECT_TYPE_ASC
  OBJECT_TYPE_DESC
  PRIVILEGE_TYPE_ASC
  PRIVILEGE_TYPE_DESC
  IS_GRANTABLE_ASC
  IS_GRANTABLE_DESC
}

type UserDefinedType {
  userDefinedTypeCatalog: SqlIdentifier
  userDefinedTypeSchema: SqlIdentifier
  userDefinedTypeName: SqlIdentifier
  userDefinedTypeCategory: CharacterData
  isInstantiable: YesOrNo
  isFinal: YesOrNo
  orderingForm: CharacterData
  orderingCategory: CharacterData
  orderingRoutineCatalog: SqlIdentifier
  orderingRoutineSchema: SqlIdentifier
  orderingRoutineName: SqlIdentifier
  referenceType: CharacterData
  dataType: CharacterData
  characterMaximumLength: CardinalNumber
  characterOctetLength: CardinalNumber
  characterSetCatalog: SqlIdentifier
  characterSetSchema: SqlIdentifier
  characterSetName: SqlIdentifier
  collationCatalog: SqlIdentifier
  collationSchema: SqlIdentifier
  collationName: SqlIdentifier
  numericPrecision: CardinalNumber
  numericPrecisionRadix: CardinalNumber
  numericScale: CardinalNumber
  datetimePrecision: CardinalNumber
  intervalType: CharacterData
  intervalPrecision: CardinalNumber
  sourceDtdIdentifier: SqlIdentifier
  refDtdIdentifier: SqlIdentifier
}

# A connection to a list of \`UserDefinedType\` values.
type UserDefinedTypesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`UserDefinedType\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`UserDefinedType\` and cursor to aid in pagination.
  edges: [UserDefinedTypesEdge]

  # A list of \`UserDefinedType\` objects.
  nodes: [UserDefinedType!]
}

# A \`UserDefinedType\` edge in the connection.
type UserDefinedTypesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`UserDefinedType\` at the end of the edge.
  node: UserDefinedType!
}

# Methods to use when ordering \`UserDefinedType\`.
enum UserDefinedTypesOrderBy {
  NATURAL
  USER_DEFINED_TYPE_CATALOG_ASC
  USER_DEFINED_TYPE_CATALOG_DESC
  USER_DEFINED_TYPE_SCHEMA_ASC
  USER_DEFINED_TYPE_SCHEMA_DESC
  USER_DEFINED_TYPE_NAME_ASC
  USER_DEFINED_TYPE_NAME_DESC
  USER_DEFINED_TYPE_CATEGORY_ASC
  USER_DEFINED_TYPE_CATEGORY_DESC
  IS_INSTANTIABLE_ASC
  IS_INSTANTIABLE_DESC
  IS_FINAL_ASC
  IS_FINAL_DESC
  ORDERING_FORM_ASC
  ORDERING_FORM_DESC
  ORDERING_CATEGORY_ASC
  ORDERING_CATEGORY_DESC
  ORDERING_ROUTINE_CATALOG_ASC
  ORDERING_ROUTINE_CATALOG_DESC
  ORDERING_ROUTINE_SCHEMA_ASC
  ORDERING_ROUTINE_SCHEMA_DESC
  ORDERING_ROUTINE_NAME_ASC
  ORDERING_ROUTINE_NAME_DESC
  REFERENCE_TYPE_ASC
  REFERENCE_TYPE_DESC
  DATA_TYPE_ASC
  DATA_TYPE_DESC
  CHARACTER_MAXIMUM_LENGTH_ASC
  CHARACTER_MAXIMUM_LENGTH_DESC
  CHARACTER_OCTET_LENGTH_ASC
  CHARACTER_OCTET_LENGTH_DESC
  CHARACTER_SET_CATALOG_ASC
  CHARACTER_SET_CATALOG_DESC
  CHARACTER_SET_SCHEMA_ASC
  CHARACTER_SET_SCHEMA_DESC
  CHARACTER_SET_NAME_ASC
  CHARACTER_SET_NAME_DESC
  COLLATION_CATALOG_ASC
  COLLATION_CATALOG_DESC
  COLLATION_SCHEMA_ASC
  COLLATION_SCHEMA_DESC
  COLLATION_NAME_ASC
  COLLATION_NAME_DESC
  NUMERIC_PRECISION_ASC
  NUMERIC_PRECISION_DESC
  NUMERIC_PRECISION_RADIX_ASC
  NUMERIC_PRECISION_RADIX_DESC
  NUMERIC_SCALE_ASC
  NUMERIC_SCALE_DESC
  DATETIME_PRECISION_ASC
  DATETIME_PRECISION_DESC
  INTERVAL_TYPE_ASC
  INTERVAL_TYPE_DESC
  INTERVAL_PRECISION_ASC
  INTERVAL_PRECISION_DESC
  SOURCE_DTD_IDENTIFIER_ASC
  SOURCE_DTD_IDENTIFIER_DESC
  REF_DTD_IDENTIFIER_ASC
  REF_DTD_IDENTIFIER_DESC
}

type UserMapping {
  authorizationIdentifier: SqlIdentifier
  foreignServerCatalog: SqlIdentifier
  foreignServerName: SqlIdentifier
}

type UserMappingOption {
  authorizationIdentifier: SqlIdentifier
  foreignServerCatalog: SqlIdentifier
  foreignServerName: SqlIdentifier
  optionName: SqlIdentifier
  optionValue: CharacterData
}

# A connection to a list of \`UserMappingOption\` values.
type UserMappingOptionsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`UserMappingOption\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`UserMappingOption\` and cursor to aid in pagination.
  edges: [UserMappingOptionsEdge]

  # A list of \`UserMappingOption\` objects.
  nodes: [UserMappingOption!]
}

# A \`UserMappingOption\` edge in the connection.
type UserMappingOptionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`UserMappingOption\` at the end of the edge.
  node: UserMappingOption!
}

# Methods to use when ordering \`UserMappingOption\`.
enum UserMappingOptionsOrderBy {
  NATURAL
  AUTHORIZATION_IDENTIFIER_ASC
  AUTHORIZATION_IDENTIFIER_DESC
  FOREIGN_SERVER_CATALOG_ASC
  FOREIGN_SERVER_CATALOG_DESC
  FOREIGN_SERVER_NAME_ASC
  FOREIGN_SERVER_NAME_DESC
  OPTION_NAME_ASC
  OPTION_NAME_DESC
  OPTION_VALUE_ASC
  OPTION_VALUE_DESC
}

# A connection to a list of \`UserMapping\` values.
type UserMappingsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`UserMapping\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`UserMapping\` and cursor to aid in pagination.
  edges: [UserMappingsEdge]

  # A list of \`UserMapping\` objects.
  nodes: [UserMapping!]
}

# A \`UserMapping\` edge in the connection.
type UserMappingsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`UserMapping\` at the end of the edge.
  node: UserMapping!
}

# Methods to use when ordering \`UserMapping\`.
enum UserMappingsOrderBy {
  NATURAL
  AUTHORIZATION_IDENTIFIER_ASC
  AUTHORIZATION_IDENTIFIER_DESC
  FOREIGN_SERVER_CATALOG_ASC
  FOREIGN_SERVER_CATALOG_DESC
  FOREIGN_SERVER_NAME_ASC
  FOREIGN_SERVER_NAME_DESC
}

type View {
  tableCatalog: SqlIdentifier
  tableSchema: SqlIdentifier
  tableName: SqlIdentifier
  viewDefinition: CharacterData
  checkOption: CharacterData
  isUpdatable: YesOrNo
  isInsertableInto: YesOrNo
  isTriggerUpdatable: YesOrNo
  isTriggerDeletable: YesOrNo
  isTriggerInsertableInto: YesOrNo
}

type ViewColumnUsage {
  viewCatalog: SqlIdentifier
  viewSchema: SqlIdentifier
  viewName: SqlIdentifier
  tableCatalog: SqlIdentifier
  tableSchema: SqlIdentifier
  tableName: SqlIdentifier
  columnName: SqlIdentifier
}

# A connection to a list of \`ViewColumnUsage\` values.
type ViewColumnUsagesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`ViewColumnUsage\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`ViewColumnUsage\` and cursor to aid in pagination.
  edges: [ViewColumnUsagesEdge]

  # A list of \`ViewColumnUsage\` objects.
  nodes: [ViewColumnUsage!]
}

# A \`ViewColumnUsage\` edge in the connection.
type ViewColumnUsagesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`ViewColumnUsage\` at the end of the edge.
  node: ViewColumnUsage!
}

# Methods to use when ordering \`ViewColumnUsage\`.
enum ViewColumnUsagesOrderBy {
  NATURAL
  VIEW_CATALOG_ASC
  VIEW_CATALOG_DESC
  VIEW_SCHEMA_ASC
  VIEW_SCHEMA_DESC
  VIEW_NAME_ASC
  VIEW_NAME_DESC
  TABLE_CATALOG_ASC
  TABLE_CATALOG_DESC
  TABLE_SCHEMA_ASC
  TABLE_SCHEMA_DESC
  TABLE_NAME_ASC
  TABLE_NAME_DESC
  COLUMN_NAME_ASC
  COLUMN_NAME_DESC
}

type ViewRoutineUsage {
  tableCatalog: SqlIdentifier
  tableSchema: SqlIdentifier
  tableName: SqlIdentifier
  specificCatalog: SqlIdentifier
  specificSchema: SqlIdentifier
  specificName: SqlIdentifier
}

# A connection to a list of \`ViewRoutineUsage\` values.
type ViewRoutineUsagesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`ViewRoutineUsage\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`ViewRoutineUsage\` and cursor to aid in pagination.
  edges: [ViewRoutineUsagesEdge]

  # A list of \`ViewRoutineUsage\` objects.
  nodes: [ViewRoutineUsage!]
}

# A \`ViewRoutineUsage\` edge in the connection.
type ViewRoutineUsagesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`ViewRoutineUsage\` at the end of the edge.
  node: ViewRoutineUsage!
}

# Methods to use when ordering \`ViewRoutineUsage\`.
enum ViewRoutineUsagesOrderBy {
  NATURAL
  TABLE_CATALOG_ASC
  TABLE_CATALOG_DESC
  TABLE_SCHEMA_ASC
  TABLE_SCHEMA_DESC
  TABLE_NAME_ASC
  TABLE_NAME_DESC
  SPECIFIC_CATALOG_ASC
  SPECIFIC_CATALOG_DESC
  SPECIFIC_SCHEMA_ASC
  SPECIFIC_SCHEMA_DESC
  SPECIFIC_NAME_ASC
  SPECIFIC_NAME_DESC
}

# A connection to a list of \`View\` values.
type ViewsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`View\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`View\` and cursor to aid in pagination.
  edges: [ViewsEdge]

  # A list of \`View\` objects.
  nodes: [View!]
}

# A \`View\` edge in the connection.
type ViewsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`View\` at the end of the edge.
  node: View!
}

# Methods to use when ordering \`View\`.
enum ViewsOrderBy {
  NATURAL
  TABLE_CATALOG_ASC
  TABLE_CATALOG_DESC
  TABLE_SCHEMA_ASC
  TABLE_SCHEMA_DESC
  TABLE_NAME_ASC
  TABLE_NAME_DESC
  VIEW_DEFINITION_ASC
  VIEW_DEFINITION_DESC
  CHECK_OPTION_ASC
  CHECK_OPTION_DESC
  IS_UPDATABLE_ASC
  IS_UPDATABLE_DESC
  IS_INSERTABLE_INTO_ASC
  IS_INSERTABLE_INTO_DESC
  IS_TRIGGER_UPDATABLE_ASC
  IS_TRIGGER_UPDATABLE_DESC
  IS_TRIGGER_DELETABLE_ASC
  IS_TRIGGER_DELETABLE_DESC
  IS_TRIGGER_INSERTABLE_INTO_ASC
  IS_TRIGGER_INSERTABLE_INTO_DESC
}

type ViewTableUsage {
  viewCatalog: SqlIdentifier
  viewSchema: SqlIdentifier
  viewName: SqlIdentifier
  tableCatalog: SqlIdentifier
  tableSchema: SqlIdentifier
  tableName: SqlIdentifier
}

# A connection to a list of \`ViewTableUsage\` values.
type ViewTableUsagesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`ViewTableUsage\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`ViewTableUsage\` and cursor to aid in pagination.
  edges: [ViewTableUsagesEdge]

  # A list of \`ViewTableUsage\` objects.
  nodes: [ViewTableUsage!]
}

# A \`ViewTableUsage\` edge in the connection.
type ViewTableUsagesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`ViewTableUsage\` at the end of the edge.
  node: ViewTableUsage!
}

# Methods to use when ordering \`ViewTableUsage\`.
enum ViewTableUsagesOrderBy {
  NATURAL
  VIEW_CATALOG_ASC
  VIEW_CATALOG_DESC
  VIEW_SCHEMA_ASC
  VIEW_SCHEMA_DESC
  VIEW_NAME_ASC
  VIEW_NAME_DESC
  TABLE_CATALOG_ASC
  TABLE_CATALOG_DESC
  TABLE_SCHEMA_ASC
  TABLE_SCHEMA_DESC
  TABLE_NAME_ASC
  TABLE_NAME_DESC
}

scalar YesOrNo
"
`;
