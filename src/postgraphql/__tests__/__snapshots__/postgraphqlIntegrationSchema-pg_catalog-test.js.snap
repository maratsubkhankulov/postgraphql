exports[`test prints the GraphQL schema for \`pg_catalog\` 1`] = `
"input AsciiToMicInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type AsciiToMicPayload {
  clientMutationId: String
  string: String
  query: Query
}

input AsciiToUtf8Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type AsciiToUtf8Payload {
  clientMutationId: String
  string: String
  query: Query
}

input BernoulliInput {
  clientMutationId: String
  arg0: String!
}

type BernoulliPayload {
  clientMutationId: String
  string: String
  query: Query
}

input Big5ToEucTwInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Big5ToEucTwPayload {
  clientMutationId: String
  string: String
  query: Query
}

input Big5ToMicInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Big5ToMicPayload {
  clientMutationId: String
  string: String
  query: Query
}

input Big5ToUtf8Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Big5ToUtf8Payload {
  clientMutationId: String
  string: String
  query: Query
}

# range of bigints
type BigIntegerRange {
  start: BigIntegerRangeBound
  end: BigIntegerRangeBound
}

type BigIntegerRangeBound {
  value: Int!
  inclusive: Boolean!
}

input BigIntegerRangeBoundInput {
  value: Int!
  inclusive: Boolean!
}

# range of bigints
input BigIntegerRangeInput {
  start: BigIntegerRangeBoundInput
  end: BigIntegerRangeBoundInput
}

input BinaryUpgradeCreateEmptyExtensionInput {
  clientMutationId: String
  arg0: String
  arg1: String
  arg2: Boolean
  arg3: String
  arg4: [Float]
  arg5: [String]
  arg6: [String]
}

type BinaryUpgradeCreateEmptyExtensionPayload {
  clientMutationId: String
  string: String
  query: Query
}

input BinaryUpgradeSetNextArrayPgTypeOidInput {
  clientMutationId: String
  arg0: Float!
}

type BinaryUpgradeSetNextArrayPgTypeOidPayload {
  clientMutationId: String
  string: String
  query: Query
}

input BinaryUpgradeSetNextHeapPgClassOidInput {
  clientMutationId: String
  arg0: Float!
}

type BinaryUpgradeSetNextHeapPgClassOidPayload {
  clientMutationId: String
  string: String
  query: Query
}

input BinaryUpgradeSetNextIndexPgClassOidInput {
  clientMutationId: String
  arg0: Float!
}

type BinaryUpgradeSetNextIndexPgClassOidPayload {
  clientMutationId: String
  string: String
  query: Query
}

input BinaryUpgradeSetNextPgAuthidOidInput {
  clientMutationId: String
  arg0: Float!
}

type BinaryUpgradeSetNextPgAuthidOidPayload {
  clientMutationId: String
  string: String
  query: Query
}

input BinaryUpgradeSetNextPgEnumOidInput {
  clientMutationId: String
  arg0: Float!
}

type BinaryUpgradeSetNextPgEnumOidPayload {
  clientMutationId: String
  string: String
  query: Query
}

input BinaryUpgradeSetNextPgTypeOidInput {
  clientMutationId: String
  arg0: Float!
}

type BinaryUpgradeSetNextPgTypeOidPayload {
  clientMutationId: String
  string: String
  query: Query
}

input BinaryUpgradeSetNextToastPgClassOidInput {
  clientMutationId: String
  arg0: Float!
}

type BinaryUpgradeSetNextToastPgClassOidPayload {
  clientMutationId: String
  string: String
  query: Query
}

input BinaryUpgradeSetNextToastPgTypeOidInput {
  clientMutationId: String
  arg0: Float!
}

type BinaryUpgradeSetNextToastPgTypeOidPayload {
  clientMutationId: String
  string: String
  query: Query
}

input BrinbeginscanInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
}

type BrinbeginscanPayload {
  clientMutationId: String
  string: String
  query: Query
}

input BrinbuildemptyInput {
  clientMutationId: String
  arg0: String!
}

type BrinbuildemptyPayload {
  clientMutationId: String
  string: String
  query: Query
}

input BrinbuildInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
}

type BrinbuildPayload {
  clientMutationId: String
  string: String
  query: Query
}

input BrinbulkdeleteInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
  arg3: String!
}

type BrinbulkdeletePayload {
  clientMutationId: String
  string: String
  query: Query
}

input BrincostestimateInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
  arg3: String!
  arg4: String!
  arg5: String!
  arg6: String!
}

type BrincostestimatePayload {
  clientMutationId: String
  string: String
  query: Query
}

input BrinendscanInput {
  clientMutationId: String
  arg0: String!
}

type BrinendscanPayload {
  clientMutationId: String
  string: String
  query: Query
}

input BringetbitmapInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
}

type BringetbitmapPayload {
  clientMutationId: String
  integer: Int
  query: Query
}

input BrininsertInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
  arg3: String!
  arg4: String!
  arg5: String!
}

type BrininsertPayload {
  clientMutationId: String
  boolean: Boolean
  query: Query
}

input BrinmarkposInput {
  clientMutationId: String
  arg0: String!
}

type BrinmarkposPayload {
  clientMutationId: String
  string: String
  query: Query
}

input BrinrescanInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
  arg3: String!
  arg4: String!
}

type BrinrescanPayload {
  clientMutationId: String
  string: String
  query: Query
}

input BrinrestrposInput {
  clientMutationId: String
  arg0: String!
}

type BrinrestrposPayload {
  clientMutationId: String
  string: String
  query: Query
}

input BrinSummarizeNewValuesInput {
  clientMutationId: String
  arg0: Float
}

type BrinSummarizeNewValuesPayload {
  clientMutationId: String
  integer: Int
  query: Query
}

input BrinvacuumcleanupInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
}

type BrinvacuumcleanupPayload {
  clientMutationId: String
  string: String
  query: Query
}

input BtbeginscanInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
}

type BtbeginscanPayload {
  clientMutationId: String
  string: String
  query: Query
}

input BtbuildemptyInput {
  clientMutationId: String
  arg0: String!
}

type BtbuildemptyPayload {
  clientMutationId: String
  string: String
  query: Query
}

input BtbuildInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
}

type BtbuildPayload {
  clientMutationId: String
  string: String
  query: Query
}

input BtbulkdeleteInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
  arg3: String!
}

type BtbulkdeletePayload {
  clientMutationId: String
  string: String
  query: Query
}

input BtcostestimateInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
  arg3: String!
  arg4: String!
  arg5: String!
  arg6: String!
}

type BtcostestimatePayload {
  clientMutationId: String
  string: String
  query: Query
}

input BtendscanInput {
  clientMutationId: String
  arg0: String!
}

type BtendscanPayload {
  clientMutationId: String
  string: String
  query: Query
}

input BtgetbitmapInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
}

type BtgetbitmapPayload {
  clientMutationId: String
  integer: Int
  query: Query
}

input BtgettupleInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
}

type BtgettuplePayload {
  clientMutationId: String
  boolean: Boolean
  query: Query
}

input BtinsertInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
  arg3: String!
  arg4: String!
  arg5: String!
}

type BtinsertPayload {
  clientMutationId: String
  boolean: Boolean
  query: Query
}

input BtmarkposInput {
  clientMutationId: String
  arg0: String!
}

type BtmarkposPayload {
  clientMutationId: String
  string: String
  query: Query
}

input BtrescanInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
  arg3: String!
  arg4: String!
}

type BtrescanPayload {
  clientMutationId: String
  string: String
  query: Query
}

input BtrestrposInput {
  clientMutationId: String
  arg0: String!
}

type BtrestrposPayload {
  clientMutationId: String
  string: String
  query: Query
}

input BtvacuumcleanupInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
}

type BtvacuumcleanupPayload {
  clientMutationId: String
  string: String
  query: Query
}

input ClockTimestampInput {
  clientMutationId: String
}

type ClockTimestampPayload {
  clientMutationId: String
  datetime: Datetime
  query: Query
}

input CreatePgAggregateInput {
  clientMutationId: String
  pgAggregate: PgAggregateInput!
}

type CreatePgAggregatePayload {
  clientMutationId: String
  pgAggregate: PgAggregate
  pgAggregateEdge(
    # The method to use when ordering \`PgAggregate\`.
    orderBy: PgAggregatesOrderBy = NATURAL
  ): PgAggregatesEdge
  query: Query
}

input CreatePgAmInput {
  clientMutationId: String
  pgAm: PgAmInput!
}

input CreatePgAmopInput {
  clientMutationId: String
  pgAmop: PgAmopInput!
}

type CreatePgAmopPayload {
  clientMutationId: String
  pgAmop: PgAmop
  pgAmopEdge(
    # The method to use when ordering \`PgAmop\`.
    orderBy: PgAmopsOrderBy = NATURAL
  ): PgAmopsEdge
  query: Query
}

type CreatePgAmPayload {
  clientMutationId: String
  pgAm: PgAm
  pgAmEdge(
    # The method to use when ordering \`PgAm\`.
    orderBy: PgAmsOrderBy = NATURAL
  ): PgAmsEdge
  query: Query
}

input CreatePgAmprocInput {
  clientMutationId: String
  pgAmproc: PgAmprocInput!
}

type CreatePgAmprocPayload {
  clientMutationId: String
  pgAmproc: PgAmproc
  pgAmprocEdge(
    # The method to use when ordering \`PgAmproc\`.
    orderBy: PgAmprocsOrderBy = NATURAL
  ): PgAmprocsEdge
  query: Query
}

input CreatePgAttrdefInput {
  clientMutationId: String
  pgAttrdef: PgAttrdefInput!
}

type CreatePgAttrdefPayload {
  clientMutationId: String
  pgAttrdef: PgAttrdef
  pgAttrdefEdge(
    # The method to use when ordering \`PgAttrdef\`.
    orderBy: PgAttrdefsOrderBy = NATURAL
  ): PgAttrdefsEdge
  query: Query
}

input CreatePgAttributeInput {
  clientMutationId: String
  pgAttribute: PgAttributeInput!
}

type CreatePgAttributePayload {
  clientMutationId: String
  pgAttribute: PgAttribute
  pgAttributeEdge(
    # The method to use when ordering \`PgAttribute\`.
    orderBy: PgAttributesOrderBy = NATURAL
  ): PgAttributesEdge
  query: Query
}

input CreatePgAuthidInput {
  clientMutationId: String
  pgAuthid: PgAuthidInput!
}

type CreatePgAuthidPayload {
  clientMutationId: String
  pgAuthid: PgAuthid
  pgAuthidEdge(
    # The method to use when ordering \`PgAuthid\`.
    orderBy: PgAuthidsOrderBy = NATURAL
  ): PgAuthidsEdge
  query: Query
}

input CreatePgAuthMemberInput {
  clientMutationId: String
  pgAuthMember: PgAuthMemberInput!
}

type CreatePgAuthMemberPayload {
  clientMutationId: String
  pgAuthMember: PgAuthMember
  pgAuthMemberEdge(
    # The method to use when ordering \`PgAuthMember\`.
    orderBy: PgAuthMembersOrderBy = NATURAL
  ): PgAuthMembersEdge
  query: Query
}

input CreatePgCastInput {
  clientMutationId: String
  pgCast: PgCastInput!
}

type CreatePgCastPayload {
  clientMutationId: String
  pgCast: PgCast
  pgCastEdge(
    # The method to use when ordering \`PgCast\`.
    orderBy: PgCastsOrderBy = NATURAL
  ): PgCastsEdge
  query: Query
}

input CreatePgClassInput {
  clientMutationId: String
  pgClass: PgClassInput!
}

type CreatePgClassPayload {
  clientMutationId: String
  pgClass: PgClass
  pgClassEdge(
    # The method to use when ordering \`PgClass\`.
    orderBy: PgClassesOrderBy = NATURAL
  ): PgClassesEdge
  query: Query
}

input CreatePgCollationInput {
  clientMutationId: String
  pgCollation: PgCollationInput!
}

type CreatePgCollationPayload {
  clientMutationId: String
  pgCollation: PgCollation
  pgCollationEdge(
    # The method to use when ordering \`PgCollation\`.
    orderBy: PgCollationsOrderBy = NATURAL
  ): PgCollationsEdge
  query: Query
}

input CreatePgConstraintInput {
  clientMutationId: String
  pgConstraint: PgConstraintInput!
}

type CreatePgConstraintPayload {
  clientMutationId: String
  pgConstraint: PgConstraint
  pgConstraintEdge(
    # The method to use when ordering \`PgConstraint\`.
    orderBy: PgConstraintsOrderBy = NATURAL
  ): PgConstraintsEdge
  query: Query
}

input CreatePgConversionInput {
  clientMutationId: String
  pgConversion: PgConversionInput!
}

type CreatePgConversionPayload {
  clientMutationId: String
  pgConversion: PgConversion
  pgConversionEdge(
    # The method to use when ordering \`PgConversion\`.
    orderBy: PgConversionsOrderBy = NATURAL
  ): PgConversionsEdge
  query: Query
}

input CreatePgDatabaseInput {
  clientMutationId: String
  pgDatabase: PgDatabaseInput!
}

type CreatePgDatabasePayload {
  clientMutationId: String
  pgDatabase: PgDatabase
  pgDatabaseEdge(
    # The method to use when ordering \`PgDatabase\`.
    orderBy: PgDatabasesOrderBy = NATURAL
  ): PgDatabasesEdge
  query: Query
}

input CreatePgDbRoleSettingInput {
  clientMutationId: String
  pgDbRoleSetting: PgDbRoleSettingInput!
}

type CreatePgDbRoleSettingPayload {
  clientMutationId: String
  pgDbRoleSetting: PgDbRoleSetting
  pgDbRoleSettingEdge(
    # The method to use when ordering \`PgDbRoleSetting\`.
    orderBy: PgDbRoleSettingsOrderBy = NATURAL
  ): PgDbRoleSettingsEdge
  query: Query
}

input CreatePgDefaultAclInput {
  clientMutationId: String
  pgDefaultAcl: PgDefaultAclInput!
}

type CreatePgDefaultAclPayload {
  clientMutationId: String
  pgDefaultAcl: PgDefaultAcl
  pgDefaultAclEdge(
    # The method to use when ordering \`PgDefaultAcl\`.
    orderBy: PgDefaultAclsOrderBy = NATURAL
  ): PgDefaultAclsEdge
  query: Query
}

input CreatePgDependInput {
  clientMutationId: String
  pgDepend: PgDependInput!
}

type CreatePgDependPayload {
  clientMutationId: String
  pgDepend: PgDepend
  pgDependEdge(
    # The method to use when ordering \`PgDepend\`.
    orderBy: PgDependsOrderBy = NATURAL
  ): PgDependsEdge
  query: Query
}

input CreatePgDescriptionInput {
  clientMutationId: String
  pgDescription: PgDescriptionInput!
}

type CreatePgDescriptionPayload {
  clientMutationId: String
  pgDescription: PgDescription
  pgDescriptionEdge(
    # The method to use when ordering \`PgDescription\`.
    orderBy: PgDescriptionsOrderBy = NATURAL
  ): PgDescriptionsEdge
  query: Query
}

input CreatePgEnumInput {
  clientMutationId: String
  pgEnum: PgEnumInput!
}

type CreatePgEnumPayload {
  clientMutationId: String
  pgEnum: PgEnum
  pgEnumEdge(
    # The method to use when ordering \`PgEnum\`.
    orderBy: PgEnumsOrderBy = NATURAL
  ): PgEnumsEdge
  query: Query
}

input CreatePgEventTriggerInput {
  clientMutationId: String
  pgEventTrigger: PgEventTriggerInput!
}

type CreatePgEventTriggerPayload {
  clientMutationId: String
  pgEventTrigger: PgEventTrigger
  pgEventTriggerEdge(
    # The method to use when ordering \`PgEventTrigger\`.
    orderBy: PgEventTriggersOrderBy = NATURAL
  ): PgEventTriggersEdge
  query: Query
}

input CreatePgExtensionInput {
  clientMutationId: String
  pgExtension: PgExtensionInput!
}

type CreatePgExtensionPayload {
  clientMutationId: String
  pgExtension: PgExtension
  pgExtensionEdge(
    # The method to use when ordering \`PgExtension\`.
    orderBy: PgExtensionsOrderBy = NATURAL
  ): PgExtensionsEdge
  query: Query
}

input CreatePgForeignDataWrapperInput {
  clientMutationId: String
  pgForeignDataWrapper: PgForeignDataWrapperInput!
}

type CreatePgForeignDataWrapperPayload {
  clientMutationId: String
  pgForeignDataWrapper: PgForeignDataWrapper
  pgForeignDataWrapperEdge(
    # The method to use when ordering \`PgForeignDataWrapper\`.
    orderBy: PgForeignDataWrappersOrderBy = NATURAL
  ): PgForeignDataWrappersEdge
  query: Query
}

input CreatePgForeignServerInput {
  clientMutationId: String
  pgForeignServer: PgForeignServerInput!
}

type CreatePgForeignServerPayload {
  clientMutationId: String
  pgForeignServer: PgForeignServer
  pgForeignServerEdge(
    # The method to use when ordering \`PgForeignServer\`.
    orderBy: PgForeignServersOrderBy = NATURAL
  ): PgForeignServersEdge
  query: Query
}

input CreatePgForeignTableInput {
  clientMutationId: String
  pgForeignTable: PgForeignTableInput!
}

type CreatePgForeignTablePayload {
  clientMutationId: String
  pgForeignTable: PgForeignTable
  pgForeignTableEdge(
    # The method to use when ordering \`PgForeignTable\`.
    orderBy: PgForeignTablesOrderBy = NATURAL
  ): PgForeignTablesEdge
  query: Query
}

input CreatePgGroupInput {
  clientMutationId: String
  pgGroup: PgGroupInput!
}

type CreatePgGroupPayload {
  clientMutationId: String
  pgGroup: PgGroup
  pgGroupEdge(
    # The method to use when ordering \`PgGroup\`.
    orderBy: PgGroupsOrderBy = NATURAL
  ): PgGroupsEdge
  query: Query
}

input CreatePgIndexInput {
  clientMutationId: String
  pgIndex: PgIndexInput!
}

type CreatePgIndexPayload {
  clientMutationId: String
  pgIndex: PgIndex
  pgIndexEdge(
    # The method to use when ordering \`PgIndex\`.
    orderBy: PgIndicesOrderBy = NATURAL
  ): PgIndicesEdge
  query: Query
}

input CreatePgInheritInput {
  clientMutationId: String
  pgInherit: PgInheritInput!
}

type CreatePgInheritPayload {
  clientMutationId: String
  pgInherit: PgInherit
  pgInheritEdge(
    # The method to use when ordering \`PgInherit\`.
    orderBy: PgInheritsOrderBy = NATURAL
  ): PgInheritsEdge
  query: Query
}

input CreatePgLanguageInput {
  clientMutationId: String
  pgLanguage: PgLanguageInput!
}

type CreatePgLanguagePayload {
  clientMutationId: String
  pgLanguage: PgLanguage
  pgLanguageEdge(
    # The method to use when ordering \`PgLanguage\`.
    orderBy: PgLanguagesOrderBy = NATURAL
  ): PgLanguagesEdge
  query: Query
}

input CreatePgLargeobjectInput {
  clientMutationId: String
  pgLargeobject: PgLargeobjectInput!
}

input CreatePgLargeobjectMetadatumInput {
  clientMutationId: String
  pgLargeobjectMetadatum: PgLargeobjectMetadatumInput!
}

type CreatePgLargeobjectMetadatumPayload {
  clientMutationId: String
  pgLargeobjectMetadatum: PgLargeobjectMetadatum
  pgLargeobjectMetadatumEdge(
    # The method to use when ordering \`PgLargeobjectMetadatum\`.
    orderBy: PgLargeobjectMetadataOrderBy = NATURAL
  ): PgLargeobjectMetadataEdge
  query: Query
}

type CreatePgLargeobjectPayload {
  clientMutationId: String
  pgLargeobject: PgLargeobject
  pgLargeobjectEdge(
    # The method to use when ordering \`PgLargeobject\`.
    orderBy: PgLargeobjectsOrderBy = NATURAL
  ): PgLargeobjectsEdge
  query: Query
}

input CreatePgNamespaceInput {
  clientMutationId: String
  pgNamespace: PgNamespaceInput!
}

type CreatePgNamespacePayload {
  clientMutationId: String
  pgNamespace: PgNamespace
  pgNamespaceEdge(
    # The method to use when ordering \`PgNamespace\`.
    orderBy: PgNamespacesOrderBy = NATURAL
  ): PgNamespacesEdge
  query: Query
}

input CreatePgOpclassInput {
  clientMutationId: String
  pgOpclass: PgOpclassInput!
}

type CreatePgOpclassPayload {
  clientMutationId: String
  pgOpclass: PgOpclass
  pgOpclassEdge(
    # The method to use when ordering \`PgOpclass\`.
    orderBy: PgOpclassesOrderBy = NATURAL
  ): PgOpclassesEdge
  query: Query
}

input CreatePgOperatorInput {
  clientMutationId: String
  pgOperator: PgOperatorInput!
}

type CreatePgOperatorPayload {
  clientMutationId: String
  pgOperator: PgOperator
  pgOperatorEdge(
    # The method to use when ordering \`PgOperator\`.
    orderBy: PgOperatorsOrderBy = NATURAL
  ): PgOperatorsEdge
  query: Query
}

input CreatePgOpfamilyInput {
  clientMutationId: String
  pgOpfamily: PgOpfamilyInput!
}

type CreatePgOpfamilyPayload {
  clientMutationId: String
  pgOpfamily: PgOpfamily
  pgOpfamilyEdge(
    # The method to use when ordering \`PgOpfamily\`.
    orderBy: PgOpfamiliesOrderBy = NATURAL
  ): PgOpfamiliesEdge
  query: Query
}

input CreatePgPltemplateInput {
  clientMutationId: String
  pgPltemplate: PgPltemplateInput!
}

type CreatePgPltemplatePayload {
  clientMutationId: String
  pgPltemplate: PgPltemplate
  pgPltemplateEdge(
    # The method to use when ordering \`PgPltemplate\`.
    orderBy: PgPltemplatesOrderBy = NATURAL
  ): PgPltemplatesEdge
  query: Query
}

input CreatePgPolicyInput {
  clientMutationId: String
  pgPolicy: PgPolicyInput!
}

type CreatePgPolicyPayload {
  clientMutationId: String
  pgPolicy: PgPolicy
  pgPolicyEdge(
    # The method to use when ordering \`PgPolicy\`.
    orderBy: PgPolicyOrderBy = NATURAL
  ): PgPolicyEdge
  query: Query
}

input CreatePgProcInput {
  clientMutationId: String
  pgProc: PgProcInput!
}

type CreatePgProcPayload {
  clientMutationId: String
  pgProc: PgProc
  pgProcEdge(
    # The method to use when ordering \`PgProc\`.
    orderBy: PgProcsOrderBy = NATURAL
  ): PgProcsEdge
  query: Query
}

input CreatePgRangeInput {
  clientMutationId: String
  pgRange: PgRangeInput!
}

type CreatePgRangePayload {
  clientMutationId: String
  pgRange: PgRange
  pgRangeEdge(
    # The method to use when ordering \`PgRange\`.
    orderBy: PgRangesOrderBy = NATURAL
  ): PgRangesEdge
  query: Query
}

input CreatePgReplicationOriginInput {
  clientMutationId: String
  pgReplicationOrigin: PgReplicationOriginInput!
}

type CreatePgReplicationOriginPayload {
  clientMutationId: String
  pgReplicationOrigin: PgReplicationOrigin
  pgReplicationOriginEdge(
    # The method to use when ordering \`PgReplicationOrigin\`.
    orderBy: PgReplicationOriginsOrderBy = NATURAL
  ): PgReplicationOriginsEdge
  query: Query
}

input CreatePgRewriteInput {
  clientMutationId: String
  pgRewrite: PgRewriteInput!
}

type CreatePgRewritePayload {
  clientMutationId: String
  pgRewrite: PgRewrite
  pgRewriteEdge(
    # The method to use when ordering \`PgRewrite\`.
    orderBy: PgRewritesOrderBy = NATURAL
  ): PgRewritesEdge
  query: Query
}

input CreatePgSeclabelInput {
  clientMutationId: String
  pgSeclabel: PgSeclabelInput!
}

type CreatePgSeclabelPayload {
  clientMutationId: String
  pgSeclabel: PgSeclabel
  pgSeclabelEdge(
    # The method to use when ordering \`PgSeclabel\`.
    orderBy: PgSeclabelOrderBy = NATURAL
  ): PgSeclabelEdge
  query: Query
}

input CreatePgShdependInput {
  clientMutationId: String
  pgShdepend: PgShdependInput!
}

type CreatePgShdependPayload {
  clientMutationId: String
  pgShdepend: PgShdepend
  pgShdependEdge(
    # The method to use when ordering \`PgShdepend\`.
    orderBy: PgShdependsOrderBy = NATURAL
  ): PgShdependsEdge
  query: Query
}

input CreatePgShdescriptionInput {
  clientMutationId: String
  pgShdescription: PgShdescriptionInput!
}

type CreatePgShdescriptionPayload {
  clientMutationId: String
  pgShdescription: PgShdescription
  pgShdescriptionEdge(
    # The method to use when ordering \`PgShdescription\`.
    orderBy: PgShdescriptionsOrderBy = NATURAL
  ): PgShdescriptionsEdge
  query: Query
}

input CreatePgShseclabelInput {
  clientMutationId: String
  pgShseclabel: PgShseclabelInput!
}

type CreatePgShseclabelPayload {
  clientMutationId: String
  pgShseclabel: PgShseclabel
  pgShseclabelEdge(
    # The method to use when ordering \`PgShseclabel\`.
    orderBy: PgShseclabelsOrderBy = NATURAL
  ): PgShseclabelsEdge
  query: Query
}

input CreatePgStatDatabaseConflictInput {
  clientMutationId: String
  pgStatDatabaseConflict: PgStatDatabaseConflictInput!
}

type CreatePgStatDatabaseConflictPayload {
  clientMutationId: String
  pgStatDatabaseConflict: PgStatDatabaseConflict
  pgStatDatabaseConflictEdge(
    # The method to use when ordering \`PgStatDatabaseConflict\`.
    orderBy: PgStatDatabaseConflictsOrderBy = NATURAL
  ): PgStatDatabaseConflictsEdge
  query: Query
}

input CreatePgStatDatabaseInput {
  clientMutationId: String
  pgStatDatabase: PgStatDatabaseInput!
}

type CreatePgStatDatabasePayload {
  clientMutationId: String
  pgStatDatabase: PgStatDatabase
  pgStatDatabaseEdge(
    # The method to use when ordering \`PgStatDatabase\`.
    orderBy: PgStatDatabasesOrderBy = NATURAL
  ): PgStatDatabasesEdge
  query: Query
}

input CreatePgStatisticInput {
  clientMutationId: String
  pgStatistic: PgStatisticInput!
}

type CreatePgStatisticPayload {
  clientMutationId: String
  pgStatistic: PgStatistic
  pgStatisticEdge(
    # The method to use when ordering \`PgStatistic\`.
    orderBy: PgStatisticsOrderBy = NATURAL
  ): PgStatisticsEdge
  query: Query
}

input CreatePgTablespaceInput {
  clientMutationId: String
  pgTablespace: PgTablespaceInput!
}

type CreatePgTablespacePayload {
  clientMutationId: String
  pgTablespace: PgTablespace
  pgTablespaceEdge(
    # The method to use when ordering \`PgTablespace\`.
    orderBy: PgTablespacesOrderBy = NATURAL
  ): PgTablespacesEdge
  query: Query
}

input CreatePgTransformInput {
  clientMutationId: String
  pgTransform: PgTransformInput!
}

type CreatePgTransformPayload {
  clientMutationId: String
  pgTransform: PgTransform
  pgTransformEdge(
    # The method to use when ordering \`PgTransform\`.
    orderBy: PgTransformsOrderBy = NATURAL
  ): PgTransformsEdge
  query: Query
}

input CreatePgTriggerInput {
  clientMutationId: String
  pgTrigger: PgTriggerInput!
}

type CreatePgTriggerPayload {
  clientMutationId: String
  pgTrigger: PgTrigger
  pgTriggerEdge(
    # The method to use when ordering \`PgTrigger\`.
    orderBy: PgTriggersOrderBy = NATURAL
  ): PgTriggersEdge
  query: Query
}

input CreatePgTsConfigInput {
  clientMutationId: String
  pgTsConfig: PgTsConfigInput!
}

input CreatePgTsConfigMapInput {
  clientMutationId: String
  pgTsConfigMap: PgTsConfigMapInput!
}

type CreatePgTsConfigMapPayload {
  clientMutationId: String
  pgTsConfigMap: PgTsConfigMap
  pgTsConfigMapEdge(
    # The method to use when ordering \`PgTsConfigMap\`.
    orderBy: PgTsConfigMapsOrderBy = NATURAL
  ): PgTsConfigMapsEdge
  query: Query
}

type CreatePgTsConfigPayload {
  clientMutationId: String
  pgTsConfig: PgTsConfig
  pgTsConfigEdge(
    # The method to use when ordering \`PgTsConfig\`.
    orderBy: PgTsConfigsOrderBy = NATURAL
  ): PgTsConfigsEdge
  query: Query
}

input CreatePgTsDictInput {
  clientMutationId: String
  pgTsDict: PgTsDictInput!
}

type CreatePgTsDictPayload {
  clientMutationId: String
  pgTsDict: PgTsDict
  pgTsDictEdge(
    # The method to use when ordering \`PgTsDict\`.
    orderBy: PgTsDictsOrderBy = NATURAL
  ): PgTsDictsEdge
  query: Query
}

input CreatePgTsParserInput {
  clientMutationId: String
  pgTsParser: PgTsParserInput!
}

type CreatePgTsParserPayload {
  clientMutationId: String
  pgTsParser: PgTsParser
  pgTsParserEdge(
    # The method to use when ordering \`PgTsParser\`.
    orderBy: PgTsParsersOrderBy = NATURAL
  ): PgTsParsersEdge
  query: Query
}

input CreatePgTsTemplateInput {
  clientMutationId: String
  pgTsTemplate: PgTsTemplateInput!
}

type CreatePgTsTemplatePayload {
  clientMutationId: String
  pgTsTemplate: PgTsTemplate
  pgTsTemplateEdge(
    # The method to use when ordering \`PgTsTemplate\`.
    orderBy: PgTsTemplatesOrderBy = NATURAL
  ): PgTsTemplatesEdge
  query: Query
}

input CreatePgTypeInput {
  clientMutationId: String
  pgType: PgTypeInput!
}

type CreatePgTypePayload {
  clientMutationId: String
  pgType: PgType
  pgTypeEdge(
    # The method to use when ordering \`PgType\`.
    orderBy: PgTypesOrderBy = NATURAL
  ): PgTypesEdge
  query: Query
}

input CreatePgUserMappingInput {
  clientMutationId: String
  pgUserMapping: PgUserMappingInput!
}

type CreatePgUserMappingPayload {
  clientMutationId: String
  pgUserMapping: PgUserMapping
  pgUserMappingEdge(
    # The method to use when ordering \`PgUserMapping\`.
    orderBy: PgUserMappingOrderBy = NATURAL
  ): PgUserMappingEdge
  query: Query
}

input CurrentQueryInput {
  clientMutationId: String
}

type CurrentQueryPayload {
  clientMutationId: String
  string: String
  query: Query
}

input Currtid2Input {
  clientMutationId: String
  arg0: String!
  arg1: String!
}

type Currtid2Payload {
  clientMutationId: String
  string: String
  query: Query
}

input CurrtidInput {
  clientMutationId: String
  arg0: Float!
  arg1: String!
}

type CurrtidPayload {
  clientMutationId: String
  string: String
  query: Query
}

input CurrvalInput {
  clientMutationId: String
  arg0: Float!
}

type CurrvalPayload {
  clientMutationId: String
  integer: Int
  query: Query
}

# A location in a connection that can be used for resuming pagination.
scalar Cursor

# The day, does not include a time.
scalar Date

# range of dates
type DateRange {
  start: DateRangeBound
  end: DateRangeBound
}

type DateRangeBound {
  value: Date!
  inclusive: Boolean!
}

input DateRangeBoundInput {
  value: Date!
  inclusive: Boolean!
}

# range of dates
input DateRangeInput {
  start: DateRangeBoundInput
  end: DateRangeBoundInput
}

# A point in time as described by the [ISO
# 8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
scalar Datetime

input DsnowballInitInput {
  clientMutationId: String
  arg0: String!
}

type DsnowballInitPayload {
  clientMutationId: String
  string: String
  query: Query
}

input DsnowballLexizeInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
  arg3: String!
}

type DsnowballLexizePayload {
  clientMutationId: String
  string: String
  query: Query
}

input EucCnToMicInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type EucCnToMicPayload {
  clientMutationId: String
  string: String
  query: Query
}

input EucCnToUtf8Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type EucCnToUtf8Payload {
  clientMutationId: String
  string: String
  query: Query
}

input EucJis2004ToShiftJis2004Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type EucJis2004ToShiftJis2004Payload {
  clientMutationId: String
  string: String
  query: Query
}

input EucJis2004ToUtf8Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type EucJis2004ToUtf8Payload {
  clientMutationId: String
  string: String
  query: Query
}

input EucJpToMicInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type EucJpToMicPayload {
  clientMutationId: String
  string: String
  query: Query
}

input EucJpToSjisInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type EucJpToSjisPayload {
  clientMutationId: String
  string: String
  query: Query
}

input EucJpToUtf8Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type EucJpToUtf8Payload {
  clientMutationId: String
  string: String
  query: Query
}

input EucKrToMicInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type EucKrToMicPayload {
  clientMutationId: String
  string: String
  query: Query
}

input EucKrToUtf8Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type EucKrToUtf8Payload {
  clientMutationId: String
  string: String
  query: Query
}

input EucTwToBig5Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type EucTwToBig5Payload {
  clientMutationId: String
  string: String
  query: Query
}

input EucTwToMicInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type EucTwToMicPayload {
  clientMutationId: String
  string: String
  query: Query
}

input EucTwToUtf8Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type EucTwToUtf8Payload {
  clientMutationId: String
  string: String
  query: Query
}

input Gb18030ToUtf8Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Gb18030ToUtf8Payload {
  clientMutationId: String
  string: String
  query: Query
}

input GbkToUtf8Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type GbkToUtf8Payload {
  clientMutationId: String
  string: String
  query: Query
}

input GinbeginscanInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
}

type GinbeginscanPayload {
  clientMutationId: String
  string: String
  query: Query
}

input GinbuildemptyInput {
  clientMutationId: String
  arg0: String!
}

type GinbuildemptyPayload {
  clientMutationId: String
  string: String
  query: Query
}

input GinbuildInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
}

type GinbuildPayload {
  clientMutationId: String
  string: String
  query: Query
}

input GinbulkdeleteInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
  arg3: String!
}

type GinbulkdeletePayload {
  clientMutationId: String
  string: String
  query: Query
}

input GincostestimateInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
  arg3: String!
  arg4: String!
  arg5: String!
  arg6: String!
}

type GincostestimatePayload {
  clientMutationId: String
  string: String
  query: Query
}

input GinendscanInput {
  clientMutationId: String
  arg0: String!
}

type GinendscanPayload {
  clientMutationId: String
  string: String
  query: Query
}

input GingetbitmapInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
}

type GingetbitmapPayload {
  clientMutationId: String
  integer: Int
  query: Query
}

input GininsertInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
  arg3: String!
  arg4: String!
  arg5: String!
}

type GininsertPayload {
  clientMutationId: String
  boolean: Boolean
  query: Query
}

input GinmarkposInput {
  clientMutationId: String
  arg0: String!
}

type GinmarkposPayload {
  clientMutationId: String
  string: String
  query: Query
}

input GinrescanInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
  arg3: String!
  arg4: String!
}

type GinrescanPayload {
  clientMutationId: String
  string: String
  query: Query
}

input GinrestrposInput {
  clientMutationId: String
  arg0: String!
}

type GinrestrposPayload {
  clientMutationId: String
  string: String
  query: Query
}

input GinvacuumcleanupInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
}

type GinvacuumcleanupPayload {
  clientMutationId: String
  string: String
  query: Query
}

input GistbeginscanInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
}

type GistbeginscanPayload {
  clientMutationId: String
  string: String
  query: Query
}

input GistbuildemptyInput {
  clientMutationId: String
  arg0: String!
}

type GistbuildemptyPayload {
  clientMutationId: String
  string: String
  query: Query
}

input GistbuildInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
}

type GistbuildPayload {
  clientMutationId: String
  string: String
  query: Query
}

input GistbulkdeleteInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
  arg3: String!
}

type GistbulkdeletePayload {
  clientMutationId: String
  string: String
  query: Query
}

input GistcostestimateInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
  arg3: String!
  arg4: String!
  arg5: String!
  arg6: String!
}

type GistcostestimatePayload {
  clientMutationId: String
  string: String
  query: Query
}

input GistendscanInput {
  clientMutationId: String
  arg0: String!
}

type GistendscanPayload {
  clientMutationId: String
  string: String
  query: Query
}

input GistgetbitmapInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
}

type GistgetbitmapPayload {
  clientMutationId: String
  integer: Int
  query: Query
}

input GistgettupleInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
}

type GistgettuplePayload {
  clientMutationId: String
  boolean: Boolean
  query: Query
}

input GistinsertInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
  arg3: String!
  arg4: String!
  arg5: String!
}

type GistinsertPayload {
  clientMutationId: String
  boolean: Boolean
  query: Query
}

input GistmarkposInput {
  clientMutationId: String
  arg0: String!
}

type GistmarkposPayload {
  clientMutationId: String
  string: String
  query: Query
}

input GistrescanInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
  arg3: String!
  arg4: String!
}

type GistrescanPayload {
  clientMutationId: String
  string: String
  query: Query
}

input GistrestrposInput {
  clientMutationId: String
  arg0: String!
}

type GistrestrposPayload {
  clientMutationId: String
  string: String
  query: Query
}

input GistvacuumcleanupInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
}

type GistvacuumcleanupPayload {
  clientMutationId: String
  string: String
  query: Query
}

input HashbeginscanInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
}

type HashbeginscanPayload {
  clientMutationId: String
  string: String
  query: Query
}

input HashbuildemptyInput {
  clientMutationId: String
  arg0: String!
}

type HashbuildemptyPayload {
  clientMutationId: String
  string: String
  query: Query
}

input HashbuildInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
}

type HashbuildPayload {
  clientMutationId: String
  string: String
  query: Query
}

input HashbulkdeleteInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
  arg3: String!
}

type HashbulkdeletePayload {
  clientMutationId: String
  string: String
  query: Query
}

input HashcostestimateInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
  arg3: String!
  arg4: String!
  arg5: String!
  arg6: String!
}

type HashcostestimatePayload {
  clientMutationId: String
  string: String
  query: Query
}

input HashendscanInput {
  clientMutationId: String
  arg0: String!
}

type HashendscanPayload {
  clientMutationId: String
  string: String
  query: Query
}

input HashgetbitmapInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
}

type HashgetbitmapPayload {
  clientMutationId: String
  integer: Int
  query: Query
}

input HashgettupleInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
}

type HashgettuplePayload {
  clientMutationId: String
  boolean: Boolean
  query: Query
}

input HashinsertInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
  arg3: String!
  arg4: String!
  arg5: String!
}

type HashinsertPayload {
  clientMutationId: String
  boolean: Boolean
  query: Query
}

input HashmarkposInput {
  clientMutationId: String
  arg0: String!
}

type HashmarkposPayload {
  clientMutationId: String
  string: String
  query: Query
}

input HashrescanInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
  arg3: String!
  arg4: String!
}

type HashrescanPayload {
  clientMutationId: String
  string: String
  query: Query
}

input HashrestrposInput {
  clientMutationId: String
  arg0: String!
}

type HashrestrposPayload {
  clientMutationId: String
  string: String
  query: Query
}

input HashvacuumcleanupInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
}

type HashvacuumcleanupPayload {
  clientMutationId: String
  string: String
  query: Query
}

# range of integers
type IntegerRange {
  start: IntegerRangeBound
  end: IntegerRangeBound
}

type IntegerRangeBound {
  value: Int!
  inclusive: Boolean!
}

input IntegerRangeBoundInput {
  value: Int!
  inclusive: Boolean!
}

# range of integers
input IntegerRangeInput {
  start: IntegerRangeBoundInput
  end: IntegerRangeBoundInput
}

# An interval of time that has passed.
type Interval {
  seconds: Float
  minutes: Int
  hours: Int
  days: Int
  months: Int
  years: Int
}

# An interval of time that has passed.
input IntervalInput {
  seconds: Float
  minutes: Int
  hours: Int
  days: Int
  months: Int
  years: Int
}

input Iso88591ToUtf8Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Iso88591ToUtf8Payload {
  clientMutationId: String
  string: String
  query: Query
}

input Iso8859ToUtf8Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Iso8859ToUtf8Payload {
  clientMutationId: String
  string: String
  query: Query
}

input IsoToKoi8rInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type IsoToKoi8rPayload {
  clientMutationId: String
  string: String
  query: Query
}

input IsoToMicInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type IsoToMicPayload {
  clientMutationId: String
  string: String
  query: Query
}

input IsoToWin1251Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type IsoToWin1251Payload {
  clientMutationId: String
  string: String
  query: Query
}

input IsoToWin866Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type IsoToWin866Payload {
  clientMutationId: String
  string: String
  query: Query
}

input JohabToUtf8Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type JohabToUtf8Payload {
  clientMutationId: String
  string: String
  query: Query
}

# A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar Json

# A connection to a list of \`String\` values.
type JsonbObjectKeysConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`String\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`String\` and cursor to aid in pagination.
  edges: [JsonbObjectKeysEdge]

  # A list of \`String\` objects.
  nodes: [String]
}

# A \`String\` edge in the connection.
type JsonbObjectKeysEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`String\` at the end of the edge.
  node: String
}

# Methods to use when ordering \`String\`.
enum JsonbObjectKeysOrderBy {
  NATURAL
}

# A connection to a list of \`String\` values.
type JsonbPopulateRecordsetConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`String\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`String\` and cursor to aid in pagination.
  edges: [JsonbPopulateRecordsetEdge]

  # A list of \`String\` objects.
  nodes: [String]
}

# A \`String\` edge in the connection.
type JsonbPopulateRecordsetEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`String\` at the end of the edge.
  node: String
}

# Methods to use when ordering \`String\`.
enum JsonbPopulateRecordsetOrderBy {
  NATURAL
}

# A connection to a list of \`String\` values.
type JsonbToRecordsetConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`String\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`String\` and cursor to aid in pagination.
  edges: [JsonbToRecordsetEdge]

  # A list of \`String\` objects.
  nodes: [String]
}

# A \`String\` edge in the connection.
type JsonbToRecordsetEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`String\` at the end of the edge.
  node: String
}

# Methods to use when ordering \`String\`.
enum JsonbToRecordsetOrderBy {
  NATURAL
}

# A connection to a list of \`String\` values.
type JsonObjectKeysConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`String\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`String\` and cursor to aid in pagination.
  edges: [JsonObjectKeysEdge]

  # A list of \`String\` objects.
  nodes: [String]
}

# A \`String\` edge in the connection.
type JsonObjectKeysEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`String\` at the end of the edge.
  node: String
}

# Methods to use when ordering \`String\`.
enum JsonObjectKeysOrderBy {
  NATURAL
}

# A connection to a list of \`String\` values.
type JsonPopulateRecordsetConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`String\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`String\` and cursor to aid in pagination.
  edges: [JsonPopulateRecordsetEdge]

  # A list of \`String\` objects.
  nodes: [String]
}

# A \`String\` edge in the connection.
type JsonPopulateRecordsetEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`String\` at the end of the edge.
  node: String
}

# Methods to use when ordering \`String\`.
enum JsonPopulateRecordsetOrderBy {
  NATURAL
}

# A connection to a list of \`String\` values.
type JsonToRecordsetConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`String\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`String\` and cursor to aid in pagination.
  edges: [JsonToRecordsetEdge]

  # A list of \`String\` objects.
  nodes: [String]
}

# A \`String\` edge in the connection.
type JsonToRecordsetEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`String\` at the end of the edge.
  node: String
}

# Methods to use when ordering \`String\`.
enum JsonToRecordsetOrderBy {
  NATURAL
}

input Koi8rToIsoInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Koi8rToIsoPayload {
  clientMutationId: String
  string: String
  query: Query
}

input Koi8rToMicInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Koi8rToMicPayload {
  clientMutationId: String
  string: String
  query: Query
}

input Koi8rToUtf8Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Koi8rToUtf8Payload {
  clientMutationId: String
  string: String
  query: Query
}

input Koi8rToWin1251Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Koi8rToWin1251Payload {
  clientMutationId: String
  string: String
  query: Query
}

input Koi8rToWin866Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Koi8rToWin866Payload {
  clientMutationId: String
  string: String
  query: Query
}

input Koi8uToUtf8Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Koi8uToUtf8Payload {
  clientMutationId: String
  string: String
  query: Query
}

input LastvalInput {
  clientMutationId: String
}

type LastvalPayload {
  clientMutationId: String
  integer: Int
  query: Query
}

input Latin1ToMicInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Latin1ToMicPayload {
  clientMutationId: String
  string: String
  query: Query
}

input Latin2ToMicInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Latin2ToMicPayload {
  clientMutationId: String
  string: String
  query: Query
}

input Latin2ToWin1250Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Latin2ToWin1250Payload {
  clientMutationId: String
  string: String
  query: Query
}

input Latin3ToMicInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Latin3ToMicPayload {
  clientMutationId: String
  string: String
  query: Query
}

input Latin4ToMicInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Latin4ToMicPayload {
  clientMutationId: String
  string: String
  query: Query
}

input LoCloseInput {
  clientMutationId: String
  arg0: Int!
}

type LoClosePayload {
  clientMutationId: String
  integer: Int
  query: Query
}

input LoCreateInput {
  clientMutationId: String
  arg0: Float!
}

type LoCreatePayload {
  clientMutationId: String
  float: Float
  query: Query
}

input LoCreatInput {
  clientMutationId: String
  arg0: Int!
}

type LoCreatPayload {
  clientMutationId: String
  float: Float
  query: Query
}

input LoExportInput {
  clientMutationId: String
  arg0: Float!
  arg1: String!
}

type LoExportPayload {
  clientMutationId: String
  integer: Int
  query: Query
}

input LoFromByteaInput {
  clientMutationId: String
  arg0: Float!
  arg1: String!
}

type LoFromByteaPayload {
  clientMutationId: String
  float: Float
  query: Query
}

input LoLseek64Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: Int!
}

type LoLseek64Payload {
  clientMutationId: String
  integer: Int
  query: Query
}

input LoLseekInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: Int!
}

type LoLseekPayload {
  clientMutationId: String
  integer: Int
  query: Query
}

input LoOpenInput {
  clientMutationId: String
  arg0: Float!
  arg1: Int!
}

type LoOpenPayload {
  clientMutationId: String
  integer: Int
  query: Query
}

input LoPutInput {
  clientMutationId: String
  arg0: Float!
  arg1: Int!
  arg2: String!
}

type LoPutPayload {
  clientMutationId: String
  string: String
  query: Query
}

input LoreadInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
}

type LoreadPayload {
  clientMutationId: String
  string: String
  query: Query
}

input LoTell64Input {
  clientMutationId: String
  arg0: Int!
}

type LoTell64Payload {
  clientMutationId: String
  integer: Int
  query: Query
}

input LoTellInput {
  clientMutationId: String
  arg0: Int!
}

type LoTellPayload {
  clientMutationId: String
  integer: Int
  query: Query
}

input LoTruncate64Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
}

type LoTruncate64Payload {
  clientMutationId: String
  integer: Int
  query: Query
}

input LoTruncateInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
}

type LoTruncatePayload {
  clientMutationId: String
  integer: Int
  query: Query
}

input LoUnlinkInput {
  clientMutationId: String
  arg0: Float!
}

type LoUnlinkPayload {
  clientMutationId: String
  integer: Int
  query: Query
}

input LowriteInput {
  clientMutationId: String
  arg0: Int!
  arg1: String!
}

type LowritePayload {
  clientMutationId: String
  integer: Int
  query: Query
}

input MicToAsciiInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type MicToAsciiPayload {
  clientMutationId: String
  string: String
  query: Query
}

input MicToBig5Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type MicToBig5Payload {
  clientMutationId: String
  string: String
  query: Query
}

input MicToEucCnInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type MicToEucCnPayload {
  clientMutationId: String
  string: String
  query: Query
}

input MicToEucJpInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type MicToEucJpPayload {
  clientMutationId: String
  string: String
  query: Query
}

input MicToEucKrInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type MicToEucKrPayload {
  clientMutationId: String
  string: String
  query: Query
}

input MicToEucTwInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type MicToEucTwPayload {
  clientMutationId: String
  string: String
  query: Query
}

input MicToIsoInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type MicToIsoPayload {
  clientMutationId: String
  string: String
  query: Query
}

input MicToKoi8rInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type MicToKoi8rPayload {
  clientMutationId: String
  string: String
  query: Query
}

input MicToLatin1Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type MicToLatin1Payload {
  clientMutationId: String
  string: String
  query: Query
}

input MicToLatin2Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type MicToLatin2Payload {
  clientMutationId: String
  string: String
  query: Query
}

input MicToLatin3Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type MicToLatin3Payload {
  clientMutationId: String
  string: String
  query: Query
}

input MicToLatin4Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type MicToLatin4Payload {
  clientMutationId: String
  string: String
  query: Query
}

input MicToSjisInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type MicToSjisPayload {
  clientMutationId: String
  string: String
  query: Query
}

input MicToWin1250Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type MicToWin1250Payload {
  clientMutationId: String
  string: String
  query: Query
}

input MicToWin1251Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type MicToWin1251Payload {
  clientMutationId: String
  string: String
  query: Query
}

input MicToWin866Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type MicToWin866Payload {
  clientMutationId: String
  string: String
  query: Query
}

# The root mutation type which contains root level fields which mutate data.
type Mutation {
  # referential integrity ON DELETE CASCADE
  riFKeyCascadeDel(input: RiFKeyCascadeDelInput!): RiFKeyCascadeDelPayload

  # referential integrity ON UPDATE CASCADE
  riFKeyCascadeUpd(input: RiFKeyCascadeUpdInput!): RiFKeyCascadeUpdPayload

  # referential integrity FOREIGN KEY ... REFERENCES
  riFKeyCheckIns(input: RiFKeyCheckInsInput!): RiFKeyCheckInsPayload

  # referential integrity FOREIGN KEY ... REFERENCES
  riFKeyCheckUpd(input: RiFKeyCheckUpdInput!): RiFKeyCheckUpdPayload

  # referential integrity ON DELETE NO ACTION
  riFKeyNoactionDel(input: RiFKeyNoactionDelInput!): RiFKeyNoactionDelPayload

  # referential integrity ON UPDATE NO ACTION
  riFKeyNoactionUpd(input: RiFKeyNoactionUpdInput!): RiFKeyNoactionUpdPayload

  # referential integrity ON DELETE RESTRICT
  riFKeyRestrictDel(input: RiFKeyRestrictDelInput!): RiFKeyRestrictDelPayload

  # referential integrity ON UPDATE RESTRICT
  riFKeyRestrictUpd(input: RiFKeyRestrictUpdInput!): RiFKeyRestrictUpdPayload

  # referential integrity ON DELETE SET DEFAULT
  riFKeySetdefaultDel(input: RiFKeySetdefaultDelInput!): RiFKeySetdefaultDelPayload

  # referential integrity ON UPDATE SET DEFAULT
  riFKeySetdefaultUpd(input: RiFKeySetdefaultUpdInput!): RiFKeySetdefaultUpdPayload

  # referential integrity ON DELETE SET NULL
  riFKeySetnullDel(input: RiFKeySetnullDelInput!): RiFKeySetnullDelPayload

  # referential integrity ON UPDATE SET NULL
  riFKeySetnullUpd(input: RiFKeySetnullUpdInput!): RiFKeySetnullUpdPayload

  # internal conversion function for SQL_ASCII to MULE_INTERNAL
  asciiToMic(input: AsciiToMicInput!): AsciiToMicPayload

  # internal conversion function for SQL_ASCII to UTF8
  asciiToUtf8(input: AsciiToUtf8Input!): AsciiToUtf8Payload

  # BERNOULLI tablesample method handler
  bernoulli(input: BernoulliInput!): BernoulliPayload

  # internal conversion function for BIG5 to EUC_TW
  big5ToEucTw(input: Big5ToEucTwInput!): Big5ToEucTwPayload

  # internal conversion function for BIG5 to MULE_INTERNAL
  big5ToMic(input: Big5ToMicInput!): Big5ToMicPayload

  # internal conversion function for BIG5 to UTF8
  big5ToUtf8(input: Big5ToUtf8Input!): Big5ToUtf8Payload

  # for use by pg_upgrade
  binaryUpgradeCreateEmptyExtension(input: BinaryUpgradeCreateEmptyExtensionInput!): BinaryUpgradeCreateEmptyExtensionPayload

  # for use by pg_upgrade
  binaryUpgradeSetNextArrayPgTypeOid(input: BinaryUpgradeSetNextArrayPgTypeOidInput!): BinaryUpgradeSetNextArrayPgTypeOidPayload

  # for use by pg_upgrade
  binaryUpgradeSetNextHeapPgClassOid(input: BinaryUpgradeSetNextHeapPgClassOidInput!): BinaryUpgradeSetNextHeapPgClassOidPayload

  # for use by pg_upgrade
  binaryUpgradeSetNextIndexPgClassOid(input: BinaryUpgradeSetNextIndexPgClassOidInput!): BinaryUpgradeSetNextIndexPgClassOidPayload

  # for use by pg_upgrade
  binaryUpgradeSetNextPgAuthidOid(input: BinaryUpgradeSetNextPgAuthidOidInput!): BinaryUpgradeSetNextPgAuthidOidPayload

  # for use by pg_upgrade
  binaryUpgradeSetNextPgEnumOid(input: BinaryUpgradeSetNextPgEnumOidInput!): BinaryUpgradeSetNextPgEnumOidPayload

  # for use by pg_upgrade
  binaryUpgradeSetNextPgTypeOid(input: BinaryUpgradeSetNextPgTypeOidInput!): BinaryUpgradeSetNextPgTypeOidPayload

  # for use by pg_upgrade
  binaryUpgradeSetNextToastPgClassOid(input: BinaryUpgradeSetNextToastPgClassOidInput!): BinaryUpgradeSetNextToastPgClassOidPayload

  # for use by pg_upgrade
  binaryUpgradeSetNextToastPgTypeOid(input: BinaryUpgradeSetNextToastPgTypeOidInput!): BinaryUpgradeSetNextToastPgTypeOidPayload

  # brin: standalone scan new table pages
  brinSummarizeNewValues(input: BrinSummarizeNewValuesInput!): BrinSummarizeNewValuesPayload

  # brin(internal)
  brinbeginscan(input: BrinbeginscanInput!): BrinbeginscanPayload

  # brin(internal)
  brinbuild(input: BrinbuildInput!): BrinbuildPayload

  # brin(internal)
  brinbuildempty(input: BrinbuildemptyInput!): BrinbuildemptyPayload

  # brin(internal)
  brinbulkdelete(input: BrinbulkdeleteInput!): BrinbulkdeletePayload

  # brin(internal)
  brincostestimate(input: BrincostestimateInput!): BrincostestimatePayload

  # brin(internal)
  brinendscan(input: BrinendscanInput!): BrinendscanPayload

  # brin(internal)
  bringetbitmap(input: BringetbitmapInput!): BringetbitmapPayload

  # brin(internal)
  brininsert(input: BrininsertInput!): BrininsertPayload

  # brin(internal)
  brinmarkpos(input: BrinmarkposInput!): BrinmarkposPayload

  # brin(internal)
  brinrescan(input: BrinrescanInput!): BrinrescanPayload

  # brin(internal)
  brinrestrpos(input: BrinrestrposInput!): BrinrestrposPayload

  # brin(internal)
  brinvacuumcleanup(input: BrinvacuumcleanupInput!): BrinvacuumcleanupPayload

  # btree(internal)
  btbeginscan(input: BtbeginscanInput!): BtbeginscanPayload

  # btree(internal)
  btbuild(input: BtbuildInput!): BtbuildPayload

  # btree(internal)
  btbuildempty(input: BtbuildemptyInput!): BtbuildemptyPayload

  # btree(internal)
  btbulkdelete(input: BtbulkdeleteInput!): BtbulkdeletePayload

  # btree(internal)
  btcostestimate(input: BtcostestimateInput!): BtcostestimatePayload

  # btree(internal)
  btendscan(input: BtendscanInput!): BtendscanPayload

  # btree(internal)
  btgetbitmap(input: BtgetbitmapInput!): BtgetbitmapPayload

  # btree(internal)
  btgettuple(input: BtgettupleInput!): BtgettuplePayload

  # btree(internal)
  btinsert(input: BtinsertInput!): BtinsertPayload

  # btree(internal)
  btmarkpos(input: BtmarkposInput!): BtmarkposPayload

  # btree(internal)
  btrescan(input: BtrescanInput!): BtrescanPayload

  # btree(internal)
  btrestrpos(input: BtrestrposInput!): BtrestrposPayload

  # btree(internal)
  btvacuumcleanup(input: BtvacuumcleanupInput!): BtvacuumcleanupPayload

  # current clock time
  clockTimestamp(input: ClockTimestampInput!): ClockTimestampPayload

  # get the currently executing query
  currentQuery(input: CurrentQueryInput!): CurrentQueryPayload

  # latest tid of a tuple
  currtid(input: CurrtidInput!): CurrtidPayload

  # latest tid of a tuple
  currtid2(input: Currtid2Input!): Currtid2Payload

  # sequence current value
  currval(input: CurrvalInput!): CurrvalPayload
  dsnowballInit(input: DsnowballInitInput!): DsnowballInitPayload
  dsnowballLexize(input: DsnowballLexizeInput!): DsnowballLexizePayload

  # internal conversion function for EUC_CN to MULE_INTERNAL
  eucCnToMic(input: EucCnToMicInput!): EucCnToMicPayload

  # internal conversion function for EUC_CN to UTF8
  eucCnToUtf8(input: EucCnToUtf8Input!): EucCnToUtf8Payload

  # internal conversion function for EUC_JIS_2004 to SHIFT_JIS_2004
  eucJis2004ToShiftJis2004(input: EucJis2004ToShiftJis2004Input!): EucJis2004ToShiftJis2004Payload

  # internal conversion function for EUC_JIS_2004 to UTF8
  eucJis2004ToUtf8(input: EucJis2004ToUtf8Input!): EucJis2004ToUtf8Payload

  # internal conversion function for EUC_JP to MULE_INTERNAL
  eucJpToMic(input: EucJpToMicInput!): EucJpToMicPayload

  # internal conversion function for EUC_JP to SJIS
  eucJpToSjis(input: EucJpToSjisInput!): EucJpToSjisPayload

  # internal conversion function for EUC_JP to UTF8
  eucJpToUtf8(input: EucJpToUtf8Input!): EucJpToUtf8Payload

  # internal conversion function for EUC_KR to MULE_INTERNAL
  eucKrToMic(input: EucKrToMicInput!): EucKrToMicPayload

  # internal conversion function for EUC_KR to UTF8
  eucKrToUtf8(input: EucKrToUtf8Input!): EucKrToUtf8Payload

  # internal conversion function for EUC_TW to BIG5
  eucTwToBig5(input: EucTwToBig5Input!): EucTwToBig5Payload

  # internal conversion function for EUC_TW to MULE_INTERNAL
  eucTwToMic(input: EucTwToMicInput!): EucTwToMicPayload

  # internal conversion function for EUC_TW to UTF8
  eucTwToUtf8(input: EucTwToUtf8Input!): EucTwToUtf8Payload

  # internal conversion function for GB18030 to UTF8
  gb18030ToUtf8(input: Gb18030ToUtf8Input!): Gb18030ToUtf8Payload

  # internal conversion function for GBK to UTF8
  gbkToUtf8(input: GbkToUtf8Input!): GbkToUtf8Payload

  # gin(internal)
  ginbeginscan(input: GinbeginscanInput!): GinbeginscanPayload

  # gin(internal)
  ginbuild(input: GinbuildInput!): GinbuildPayload

  # gin(internal)
  ginbuildempty(input: GinbuildemptyInput!): GinbuildemptyPayload

  # gin(internal)
  ginbulkdelete(input: GinbulkdeleteInput!): GinbulkdeletePayload

  # gin(internal)
  gincostestimate(input: GincostestimateInput!): GincostestimatePayload

  # gin(internal)
  ginendscan(input: GinendscanInput!): GinendscanPayload

  # gin(internal)
  gingetbitmap(input: GingetbitmapInput!): GingetbitmapPayload

  # gin(internal)
  gininsert(input: GininsertInput!): GininsertPayload

  # gin(internal)
  ginmarkpos(input: GinmarkposInput!): GinmarkposPayload

  # gin(internal)
  ginrescan(input: GinrescanInput!): GinrescanPayload

  # gin(internal)
  ginrestrpos(input: GinrestrposInput!): GinrestrposPayload

  # gin(internal)
  ginvacuumcleanup(input: GinvacuumcleanupInput!): GinvacuumcleanupPayload

  # gist(internal)
  gistbeginscan(input: GistbeginscanInput!): GistbeginscanPayload

  # gist(internal)
  gistbuild(input: GistbuildInput!): GistbuildPayload

  # gist(internal)
  gistbuildempty(input: GistbuildemptyInput!): GistbuildemptyPayload

  # gist(internal)
  gistbulkdelete(input: GistbulkdeleteInput!): GistbulkdeletePayload

  # gist(internal)
  gistcostestimate(input: GistcostestimateInput!): GistcostestimatePayload

  # gist(internal)
  gistendscan(input: GistendscanInput!): GistendscanPayload

  # gist(internal)
  gistgetbitmap(input: GistgetbitmapInput!): GistgetbitmapPayload

  # gist(internal)
  gistgettuple(input: GistgettupleInput!): GistgettuplePayload

  # gist(internal)
  gistinsert(input: GistinsertInput!): GistinsertPayload

  # gist(internal)
  gistmarkpos(input: GistmarkposInput!): GistmarkposPayload

  # gist(internal)
  gistrescan(input: GistrescanInput!): GistrescanPayload

  # gist(internal)
  gistrestrpos(input: GistrestrposInput!): GistrestrposPayload

  # gist(internal)
  gistvacuumcleanup(input: GistvacuumcleanupInput!): GistvacuumcleanupPayload

  # hash(internal)
  hashbeginscan(input: HashbeginscanInput!): HashbeginscanPayload

  # hash(internal)
  hashbuild(input: HashbuildInput!): HashbuildPayload

  # hash(internal)
  hashbuildempty(input: HashbuildemptyInput!): HashbuildemptyPayload

  # hash(internal)
  hashbulkdelete(input: HashbulkdeleteInput!): HashbulkdeletePayload

  # hash(internal)
  hashcostestimate(input: HashcostestimateInput!): HashcostestimatePayload

  # hash(internal)
  hashendscan(input: HashendscanInput!): HashendscanPayload

  # hash(internal)
  hashgetbitmap(input: HashgetbitmapInput!): HashgetbitmapPayload

  # hash(internal)
  hashgettuple(input: HashgettupleInput!): HashgettuplePayload

  # hash(internal)
  hashinsert(input: HashinsertInput!): HashinsertPayload

  # hash(internal)
  hashmarkpos(input: HashmarkposInput!): HashmarkposPayload

  # hash(internal)
  hashrescan(input: HashrescanInput!): HashrescanPayload

  # hash(internal)
  hashrestrpos(input: HashrestrposInput!): HashrestrposPayload

  # hash(internal)
  hashvacuumcleanup(input: HashvacuumcleanupInput!): HashvacuumcleanupPayload

  # internal conversion function for LATIN1 to UTF8
  iso88591ToUtf8(input: Iso88591ToUtf8Input!): Iso88591ToUtf8Payload

  # internal conversion function for ISO-8859-8 to UTF8
  iso8859ToUtf8(input: Iso8859ToUtf8Input!): Iso8859ToUtf8Payload

  # internal conversion function for ISO-8859-5 to KOI8R
  isoToKoi8r(input: IsoToKoi8rInput!): IsoToKoi8rPayload

  # internal conversion function for ISO-8859-5 to MULE_INTERNAL
  isoToMic(input: IsoToMicInput!): IsoToMicPayload

  # internal conversion function for ISO-8859-5 to WIN1251
  isoToWin1251(input: IsoToWin1251Input!): IsoToWin1251Payload

  # internal conversion function for ISO-8859-5 to WIN866
  isoToWin866(input: IsoToWin866Input!): IsoToWin866Payload

  # internal conversion function for JOHAB to UTF8
  johabToUtf8(input: JohabToUtf8Input!): JohabToUtf8Payload

  # internal conversion function for KOI8R to ISO-8859-5
  koi8rToIso(input: Koi8rToIsoInput!): Koi8rToIsoPayload

  # internal conversion function for KOI8R to MULE_INTERNAL
  koi8rToMic(input: Koi8rToMicInput!): Koi8rToMicPayload

  # internal conversion function for KOI8R to UTF8
  koi8rToUtf8(input: Koi8rToUtf8Input!): Koi8rToUtf8Payload

  # internal conversion function for KOI8R to WIN1251
  koi8rToWin1251(input: Koi8rToWin1251Input!): Koi8rToWin1251Payload

  # internal conversion function for KOI8R to WIN866
  koi8rToWin866(input: Koi8rToWin866Input!): Koi8rToWin866Payload

  # internal conversion function for KOI8U to UTF8
  koi8uToUtf8(input: Koi8uToUtf8Input!): Koi8uToUtf8Payload

  # current value from last used sequence
  lastval(input: LastvalInput!): LastvalPayload

  # internal conversion function for LATIN1 to MULE_INTERNAL
  latin1ToMic(input: Latin1ToMicInput!): Latin1ToMicPayload

  # internal conversion function for LATIN2 to MULE_INTERNAL
  latin2ToMic(input: Latin2ToMicInput!): Latin2ToMicPayload

  # internal conversion function for LATIN2 to WIN1250
  latin2ToWin1250(input: Latin2ToWin1250Input!): Latin2ToWin1250Payload

  # internal conversion function for LATIN3 to MULE_INTERNAL
  latin3ToMic(input: Latin3ToMicInput!): Latin3ToMicPayload

  # internal conversion function for LATIN4 to MULE_INTERNAL
  latin4ToMic(input: Latin4ToMicInput!): Latin4ToMicPayload

  # large object close
  loClose(input: LoCloseInput!): LoClosePayload

  # large object create
  loCreat(input: LoCreatInput!): LoCreatPayload

  # large object create
  loCreate(input: LoCreateInput!): LoCreatePayload

  # large object export
  loExport(input: LoExportInput!): LoExportPayload

  # create new large object with given content
  loFromBytea(input: LoFromByteaInput!): LoFromByteaPayload

  # large object seek
  loLseek(input: LoLseekInput!): LoLseekPayload

  # large object seek (64 bit)
  loLseek64(input: LoLseek64Input!): LoLseek64Payload

  # large object open
  loOpen(input: LoOpenInput!): LoOpenPayload

  # write data at offset
  loPut(input: LoPutInput!): LoPutPayload

  # large object position
  loTell(input: LoTellInput!): LoTellPayload

  # large object position (64 bit)
  loTell64(input: LoTell64Input!): LoTell64Payload

  # truncate large object
  loTruncate(input: LoTruncateInput!): LoTruncatePayload

  # truncate large object (64 bit)
  loTruncate64(input: LoTruncate64Input!): LoTruncate64Payload

  # large object unlink (delete)
  loUnlink(input: LoUnlinkInput!): LoUnlinkPayload

  # large object read
  loread(input: LoreadInput!): LoreadPayload

  # large object write
  lowrite(input: LowriteInput!): LowritePayload

  # internal conversion function for MULE_INTERNAL to SQL_ASCII
  micToAscii(input: MicToAsciiInput!): MicToAsciiPayload

  # internal conversion function for MULE_INTERNAL to BIG5
  micToBig5(input: MicToBig5Input!): MicToBig5Payload

  # internal conversion function for MULE_INTERNAL to EUC_CN
  micToEucCn(input: MicToEucCnInput!): MicToEucCnPayload

  # internal conversion function for MULE_INTERNAL to EUC_JP
  micToEucJp(input: MicToEucJpInput!): MicToEucJpPayload

  # internal conversion function for MULE_INTERNAL to EUC_KR
  micToEucKr(input: MicToEucKrInput!): MicToEucKrPayload

  # internal conversion function for MULE_INTERNAL to EUC_TW
  micToEucTw(input: MicToEucTwInput!): MicToEucTwPayload

  # internal conversion function for MULE_INTERNAL to ISO-8859-5
  micToIso(input: MicToIsoInput!): MicToIsoPayload

  # internal conversion function for MULE_INTERNAL to KOI8R
  micToKoi8r(input: MicToKoi8rInput!): MicToKoi8rPayload

  # internal conversion function for MULE_INTERNAL to LATIN1
  micToLatin1(input: MicToLatin1Input!): MicToLatin1Payload

  # internal conversion function for MULE_INTERNAL to LATIN2
  micToLatin2(input: MicToLatin2Input!): MicToLatin2Payload

  # internal conversion function for MULE_INTERNAL to LATIN3
  micToLatin3(input: MicToLatin3Input!): MicToLatin3Payload

  # internal conversion function for MULE_INTERNAL to LATIN4
  micToLatin4(input: MicToLatin4Input!): MicToLatin4Payload

  # internal conversion function for MULE_INTERNAL to SJIS
  micToSjis(input: MicToSjisInput!): MicToSjisPayload

  # internal conversion function for MULE_INTERNAL to WIN1250
  micToWin1250(input: MicToWin1250Input!): MicToWin1250Payload

  # internal conversion function for MULE_INTERNAL to WIN1251
  micToWin1251(input: MicToWin1251Input!): MicToWin1251Payload

  # internal conversion function for MULE_INTERNAL to WIN866
  micToWin866(input: MicToWin866Input!): MicToWin866Payload

  # sequence next value
  nextval(input: NextvalInput!): NextvalPayload

  # release all advisory locks
  pgAdvisoryUnlockAll(input: PgAdvisoryUnlockAllInput!): PgAdvisoryUnlockAllPayload

  # cancel a server process\' current query
  pgCancelBackend(input: PgCancelBackendInput!): PgCancelBackendPayload

  # create a named restore point
  pgCreateRestorePoint(input: PgCreateRestorePointInput!): PgCreateRestorePointPayload

  # current xlog insert location
  pgCurrentXlogInsertLocation(input: PgCurrentXlogInsertLocationInput!): PgCurrentXlogInsertLocationPayload

  # current xlog write location
  pgCurrentXlogLocation(input: PgCurrentXlogLocationInput!): PgCurrentXlogLocationPayload

  # drop a replication slot
  pgDropReplicationSlot(input: PgDropReplicationSlotInput!): PgDropReplicationSlotPayload

  # export a snapshot
  pgExportSnapshot(input: PgExportSnapshotInput!): PgExportSnapshotPayload

  # flag an extension\'s table contents to be emitted by pg_dump
  pgExtensionConfigDump(input: PgExtensionConfigDumpInput!): PgExtensionConfigDumpPayload

  # disk space usage for all indexes attached to the specified table
  pgIndexesSize(input: PgIndexesSizeInput!): PgIndexesSizePayload

  # true if server is in online backup
  pgIsInBackup(input: PgIsInBackupInput!): PgIsInBackupPayload

  # true if server is in recovery
  pgIsInRecovery(input: PgIsInRecoveryInput!): PgIsInRecoveryPayload

  # true if xlog replay is paused
  pgIsXlogReplayPaused(input: PgIsXlogReplayPausedInput!): PgIsXlogReplayPausedPayload

  # timestamp of last replay xact
  pgLastXactReplayTimestamp(input: PgLastXactReplayTimestampInput!): PgLastXactReplayTimestampPayload

  # current xlog flush location
  pgLastXlogReceiveLocation(input: PgLastXlogReceiveLocationInput!): PgLastXlogReceiveLocationPayload

  # last xlog replay location
  pgLastXlogReplayLocation(input: PgLastXlogReplayLocationInput!): PgLastXlogReplayLocationPayload

  # send a notification event
  pgNotify(input: PgNotifyInput!): PgNotifyPayload

  # reload configuration files
  pgReloadConf(input: PgReloadConfInput!): PgReloadConfPayload

  # advance replication itentifier to specific location
  pgReplicationOriginAdvance(input: PgReplicationOriginAdvanceInput!): PgReplicationOriginAdvancePayload

  # create a replication origin
  pgReplicationOriginCreate(input: PgReplicationOriginCreateInput!): PgReplicationOriginCreatePayload

  # drop replication origin identified by its name
  pgReplicationOriginDrop(input: PgReplicationOriginDropInput!): PgReplicationOriginDropPayload

  # get an individual replication origin\'s replication progress
  pgReplicationOriginProgress(input: PgReplicationOriginProgressInput!): PgReplicationOriginProgressPayload

  # is a replication origin configured in this session
  pgReplicationOriginSessionIsSetup(input: PgReplicationOriginSessionIsSetupInput!): PgReplicationOriginSessionIsSetupPayload

  # get the replication progress of the current session
  pgReplicationOriginSessionProgress(input: PgReplicationOriginSessionProgressInput!): PgReplicationOriginSessionProgressPayload

  # teardown configured replication progress tracking
  pgReplicationOriginSessionReset(input: PgReplicationOriginSessionResetInput!): PgReplicationOriginSessionResetPayload

  # configure session to maintain replication progress tracking for the passed in origin
  pgReplicationOriginSessionSetup(input: PgReplicationOriginSessionSetupInput!): PgReplicationOriginSessionSetupPayload

  # reset the transaction\'s origin lsn and timestamp
  pgReplicationOriginXactReset(input: PgReplicationOriginXactResetInput!): PgReplicationOriginXactResetPayload

  # setup the transaction\'s origin lsn and timestamp
  pgReplicationOriginXactSetup(input: PgReplicationOriginXactSetupInput!): PgReplicationOriginXactSetupPayload

  # rotate log file
  pgRotateLogfile(input: PgRotateLogfileInput!): PgRotateLogfilePayload

  # sleep for the specified time in seconds
  pgSleep(input: PgSleepInput!): PgSleepPayload

  # sleep for the specified interval
  pgSleepFor(input: PgSleepForInput!): PgSleepForPayload

  # sleep until the specified time
  pgSleepUntil(input: PgSleepUntilInput!): PgSleepUntilPayload

  # prepare for taking an online backup
  pgStartBackup(input: PgStartBackupInput!): PgStartBackupPayload

  # statistics: discard current transaction\'s statistics snapshot
  pgStatClearSnapshot(input: PgStatClearSnapshotInput!): PgStatClearSnapshotPayload

  # statistics: number of blocks fetched in current transaction
  pgStatGetXactBlocksFetched(input: PgStatGetXactBlocksFetchedInput!): PgStatGetXactBlocksFetchedPayload

  # statistics: number of blocks found in cache in current transaction
  pgStatGetXactBlocksHit(input: PgStatGetXactBlocksHitInput!): PgStatGetXactBlocksHitPayload

  # statistics: number of function calls in current transaction
  pgStatGetXactFunctionCalls(input: PgStatGetXactFunctionCallsInput!): PgStatGetXactFunctionCallsPayload

  # statistics: self execution time of function in current transaction, in msec
  pgStatGetXactFunctionSelfTime(input: PgStatGetXactFunctionSelfTimeInput!): PgStatGetXactFunctionSelfTimePayload

  # statistics: total execution time of function in current transaction, in msec
  pgStatGetXactFunctionTotalTime(input: PgStatGetXactFunctionTotalTimeInput!): PgStatGetXactFunctionTotalTimePayload

  # statistics: number of scans done for table/index in current transaction
  pgStatGetXactNumscans(input: PgStatGetXactNumscansInput!): PgStatGetXactNumscansPayload

  # statistics: number of tuples deleted in current transaction
  pgStatGetXactTuplesDeleted(input: PgStatGetXactTuplesDeletedInput!): PgStatGetXactTuplesDeletedPayload

  # statistics: number of tuples fetched by idxscan in current transaction
  pgStatGetXactTuplesFetched(input: PgStatGetXactTuplesFetchedInput!): PgStatGetXactTuplesFetchedPayload

  # statistics: number of tuples hot updated in current transaction
  pgStatGetXactTuplesHotUpdated(input: PgStatGetXactTuplesHotUpdatedInput!): PgStatGetXactTuplesHotUpdatedPayload

  # statistics: number of tuples inserted in current transaction
  pgStatGetXactTuplesInserted(input: PgStatGetXactTuplesInsertedInput!): PgStatGetXactTuplesInsertedPayload

  # statistics: number of tuples read by seqscan in current transaction
  pgStatGetXactTuplesReturned(input: PgStatGetXactTuplesReturnedInput!): PgStatGetXactTuplesReturnedPayload

  # statistics: number of tuples updated in current transaction
  pgStatGetXactTuplesUpdated(input: PgStatGetXactTuplesUpdatedInput!): PgStatGetXactTuplesUpdatedPayload

  # statistics: reset collected statistics for current database
  pgStatReset(input: PgStatResetInput!): PgStatResetPayload

  # statistics: reset collected statistics shared across the cluster
  pgStatResetShared(input: PgStatResetSharedInput!): PgStatResetSharedPayload

  # statistics: reset collected statistics for a single function in the current database
  pgStatResetSingleFunctionCounters(input: PgStatResetSingleFunctionCountersInput!): PgStatResetSingleFunctionCountersPayload

  # statistics: reset collected statistics for a single table or index in the current database
  pgStatResetSingleTableCounters(input: PgStatResetSingleTableCountersInput!): PgStatResetSingleTableCountersPayload

  # finish taking an online backup
  pgStopBackup(input: PgStopBackupInput!): PgStopBackupPayload

  # switch to new xlog file
  pgSwitchXlog(input: PgSwitchXlogInput!): PgSwitchXlogPayload

  # disk space usage for the specified table, including TOAST, free space and visibility map
  pgTableSize(input: PgTableSizeInput!): PgTableSizePayload

  # terminate a server process
  pgTerminateBackend(input: PgTerminateBackendInput!): PgTerminateBackendPayload

  # total disk space usage for the specified table and associated indexes
  pgTotalRelationSize(input: PgTotalRelationSizeInput!): PgTotalRelationSizePayload

  # get commit timestamp of a transaction
  pgXactCommitTimestamp(input: PgXactCommitTimestampInput!): PgXactCommitTimestampPayload

  # pause xlog replay
  pgXlogReplayPause(input: PgXlogReplayPauseInput!): PgXlogReplayPausePayload

  # resume xlog replay, if it was paused
  pgXlogReplayResume(input: PgXlogReplayResumeInput!): PgXlogReplayResumePayload
  plpgsqlCallHandler(input: PlpgsqlCallHandlerInput!): PlpgsqlCallHandlerPayload
  plpgsqlInlineHandler(input: PlpgsqlInlineHandlerInput!): PlpgsqlInlineHandlerPayload
  plpgsqlValidator(input: PlpgsqlValidatorInput!): PlpgsqlValidatorPayload

  # random value
  random(input: RandomInput!): RandomPayload

  # SET X as a function
  setConfig(input: SetConfigInput!): SetConfigPayload

  # set random seed
  setseed(input: SetseedInput!): SetseedPayload

  # internal conversion function for SHIFT_JIS_2004 to EUC_JIS_2004
  shiftJis2004ToEucJis2004(input: ShiftJis2004ToEucJis2004Input!): ShiftJis2004ToEucJis2004Payload

  # internal conversion function for SHIFT_JIS_2004 to UTF8
  shiftJis2004ToUtf8(input: ShiftJis2004ToUtf8Input!): ShiftJis2004ToUtf8Payload

  # internal conversion function for SJIS to EUC_JP
  sjisToEucJp(input: SjisToEucJpInput!): SjisToEucJpPayload

  # internal conversion function for SJIS to MULE_INTERNAL
  sjisToMic(input: SjisToMicInput!): SjisToMicPayload

  # internal conversion function for SJIS to UTF8
  sjisToUtf8(input: SjisToUtf8Input!): SjisToUtf8Payload

  # spgist(internal)
  spgbeginscan(input: SpgbeginscanInput!): SpgbeginscanPayload

  # spgist(internal)
  spgbuild(input: SpgbuildInput!): SpgbuildPayload

  # spgist(internal)
  spgbuildempty(input: SpgbuildemptyInput!): SpgbuildemptyPayload

  # spgist(internal)
  spgbulkdelete(input: SpgbulkdeleteInput!): SpgbulkdeletePayload

  # spgist(internal)
  spgcostestimate(input: SpgcostestimateInput!): SpgcostestimatePayload

  # spgist(internal)
  spgendscan(input: SpgendscanInput!): SpgendscanPayload

  # spgist(internal)
  spggetbitmap(input: SpggetbitmapInput!): SpggetbitmapPayload

  # spgist(internal)
  spggettuple(input: SpggettupleInput!): SpggettuplePayload

  # spgist(internal)
  spginsert(input: SpginsertInput!): SpginsertPayload

  # spgist(internal)
  spgmarkpos(input: SpgmarkposInput!): SpgmarkposPayload

  # spgist(internal)
  spgrescan(input: SpgrescanInput!): SpgrescanPayload

  # spgist(internal)
  spgrestrpos(input: SpgrestrposInput!): SpgrestrposPayload

  # spgist(internal)
  spgvacuumcleanup(input: SpgvacuumcleanupInput!): SpgvacuumcleanupPayload

  # trigger to suppress updates when new and old records match
  suppressRedundantUpdatesTrigger(input: SuppressRedundantUpdatesTriggerInput!): SuppressRedundantUpdatesTriggerPayload

  # SYSTEM tablesample method handler
  system(input: SystemInput!): SystemPayload

  # current date and time - increments during transactions
  timeofday(input: TimeofdayInput!): TimeofdayPayload

  # trigger for automatic update of tsvector column
  tsvectorUpdateTrigger(input: TsvectorUpdateTriggerInput!): TsvectorUpdateTriggerPayload

  # trigger for automatic update of tsvector column
  tsvectorUpdateTriggerColumn(input: TsvectorUpdateTriggerColumnInput!): TsvectorUpdateTriggerColumnPayload

  # internal conversion function for UHC to UTF8
  uhcToUtf8(input: UhcToUtf8Input!): UhcToUtf8Payload

  # deferred UNIQUE constraint check
  uniqueKeyRecheck(input: UniqueKeyRecheckInput!): UniqueKeyRecheckPayload

  # internal conversion function for UTF8 to SQL_ASCII
  utf8ToAscii(input: Utf8ToAsciiInput!): Utf8ToAsciiPayload

  # internal conversion function for UTF8 to BIG5
  utf8ToBig5(input: Utf8ToBig5Input!): Utf8ToBig5Payload

  # internal conversion function for UTF8 to EUC_CN
  utf8ToEucCn(input: Utf8ToEucCnInput!): Utf8ToEucCnPayload

  # internal conversion function for UTF8 to EUC_JIS_2004
  utf8ToEucJis2004(input: Utf8ToEucJis2004Input!): Utf8ToEucJis2004Payload

  # internal conversion function for UTF8 to EUC_JP
  utf8ToEucJp(input: Utf8ToEucJpInput!): Utf8ToEucJpPayload

  # internal conversion function for UTF8 to EUC_KR
  utf8ToEucKr(input: Utf8ToEucKrInput!): Utf8ToEucKrPayload

  # internal conversion function for UTF8 to EUC_TW
  utf8ToEucTw(input: Utf8ToEucTwInput!): Utf8ToEucTwPayload

  # internal conversion function for UTF8 to GB18030
  utf8ToGb18030(input: Utf8ToGb18030Input!): Utf8ToGb18030Payload

  # internal conversion function for UTF8 to GBK
  utf8ToGbk(input: Utf8ToGbkInput!): Utf8ToGbkPayload

  # internal conversion function for UTF8 to ISO-8859-8
  utf8ToIso8859(input: Utf8ToIso8859Input!): Utf8ToIso8859Payload

  # internal conversion function for UTF8 to LATIN1
  utf8ToIso88591(input: Utf8ToIso88591Input!): Utf8ToIso88591Payload

  # internal conversion function for UTF8 to JOHAB
  utf8ToJohab(input: Utf8ToJohabInput!): Utf8ToJohabPayload

  # internal conversion function for UTF8 to KOI8R
  utf8ToKoi8r(input: Utf8ToKoi8rInput!): Utf8ToKoi8rPayload

  # internal conversion function for UTF8 to KOI8U
  utf8ToKoi8u(input: Utf8ToKoi8uInput!): Utf8ToKoi8uPayload

  # internal conversion function for UTF8 to SHIFT_JIS_2004
  utf8ToShiftJis2004(input: Utf8ToShiftJis2004Input!): Utf8ToShiftJis2004Payload

  # internal conversion function for UTF8 to SJIS
  utf8ToSjis(input: Utf8ToSjisInput!): Utf8ToSjisPayload

  # internal conversion function for UTF8 to UHC
  utf8ToUhc(input: Utf8ToUhcInput!): Utf8ToUhcPayload

  # internal conversion function for UTF8 to WIN1258
  utf8ToWin(input: Utf8ToWinInput!): Utf8ToWinPayload

  # internal conversion function for WIN1250 to LATIN2
  win1250ToLatin2(input: Win1250ToLatin2Input!): Win1250ToLatin2Payload

  # internal conversion function for WIN1250 to MULE_INTERNAL
  win1250ToMic(input: Win1250ToMicInput!): Win1250ToMicPayload

  # internal conversion function for WIN1251 to ISO-8859-5
  win1251ToIso(input: Win1251ToIsoInput!): Win1251ToIsoPayload

  # internal conversion function for WIN1251 to KOI8R
  win1251ToKoi8r(input: Win1251ToKoi8rInput!): Win1251ToKoi8rPayload

  # internal conversion function for WIN1251 to MULE_INTERNAL
  win1251ToMic(input: Win1251ToMicInput!): Win1251ToMicPayload

  # internal conversion function for WIN1251 to WIN866
  win1251ToWin866(input: Win1251ToWin866Input!): Win1251ToWin866Payload

  # internal conversion function for WIN866 to ISO-8859-5
  win866ToIso(input: Win866ToIsoInput!): Win866ToIsoPayload

  # internal conversion function for WIN866 to KOI8R
  win866ToKoi8r(input: Win866ToKoi8rInput!): Win866ToKoi8rPayload

  # internal conversion function for WIN866 to MULE_INTERNAL
  win866ToMic(input: Win866ToMicInput!): Win866ToMicPayload

  # internal conversion function for WIN866 to WIN1251
  win866ToWin1251(input: Win866ToWin1251Input!): Win866ToWin1251Payload

  # internal conversion function for WIN1258 to UTF8
  winToUtf8(input: WinToUtf8Input!): WinToUtf8Payload
  createPgAggregate(input: CreatePgAggregateInput!): CreatePgAggregatePayload
  createPgAm(input: CreatePgAmInput!): CreatePgAmPayload
  createPgAmop(input: CreatePgAmopInput!): CreatePgAmopPayload
  createPgAmproc(input: CreatePgAmprocInput!): CreatePgAmprocPayload
  createPgAttrdef(input: CreatePgAttrdefInput!): CreatePgAttrdefPayload
  createPgAttribute(input: CreatePgAttributeInput!): CreatePgAttributePayload
  createPgAuthMember(input: CreatePgAuthMemberInput!): CreatePgAuthMemberPayload
  createPgAuthid(input: CreatePgAuthidInput!): CreatePgAuthidPayload
  createPgCast(input: CreatePgCastInput!): CreatePgCastPayload
  createPgClass(input: CreatePgClassInput!): CreatePgClassPayload
  createPgCollation(input: CreatePgCollationInput!): CreatePgCollationPayload
  createPgConstraint(input: CreatePgConstraintInput!): CreatePgConstraintPayload
  createPgConversion(input: CreatePgConversionInput!): CreatePgConversionPayload
  createPgDatabase(input: CreatePgDatabaseInput!): CreatePgDatabasePayload
  createPgDbRoleSetting(input: CreatePgDbRoleSettingInput!): CreatePgDbRoleSettingPayload
  createPgDefaultAcl(input: CreatePgDefaultAclInput!): CreatePgDefaultAclPayload
  createPgDepend(input: CreatePgDependInput!): CreatePgDependPayload
  createPgDescription(input: CreatePgDescriptionInput!): CreatePgDescriptionPayload
  createPgEnum(input: CreatePgEnumInput!): CreatePgEnumPayload
  createPgEventTrigger(input: CreatePgEventTriggerInput!): CreatePgEventTriggerPayload
  createPgExtension(input: CreatePgExtensionInput!): CreatePgExtensionPayload
  createPgForeignDataWrapper(input: CreatePgForeignDataWrapperInput!): CreatePgForeignDataWrapperPayload
  createPgForeignServer(input: CreatePgForeignServerInput!): CreatePgForeignServerPayload
  createPgForeignTable(input: CreatePgForeignTableInput!): CreatePgForeignTablePayload
  createPgGroup(input: CreatePgGroupInput!): CreatePgGroupPayload
  createPgIndex(input: CreatePgIndexInput!): CreatePgIndexPayload
  createPgInherit(input: CreatePgInheritInput!): CreatePgInheritPayload
  createPgLanguage(input: CreatePgLanguageInput!): CreatePgLanguagePayload
  createPgLargeobject(input: CreatePgLargeobjectInput!): CreatePgLargeobjectPayload
  createPgLargeobjectMetadatum(input: CreatePgLargeobjectMetadatumInput!): CreatePgLargeobjectMetadatumPayload
  createPgNamespace(input: CreatePgNamespaceInput!): CreatePgNamespacePayload
  createPgOpclass(input: CreatePgOpclassInput!): CreatePgOpclassPayload
  createPgOperator(input: CreatePgOperatorInput!): CreatePgOperatorPayload
  createPgOpfamily(input: CreatePgOpfamilyInput!): CreatePgOpfamilyPayload
  createPgPltemplate(input: CreatePgPltemplateInput!): CreatePgPltemplatePayload
  createPgPolicy(input: CreatePgPolicyInput!): CreatePgPolicyPayload
  createPgProc(input: CreatePgProcInput!): CreatePgProcPayload
  createPgRange(input: CreatePgRangeInput!): CreatePgRangePayload
  createPgReplicationOrigin(input: CreatePgReplicationOriginInput!): CreatePgReplicationOriginPayload
  createPgRewrite(input: CreatePgRewriteInput!): CreatePgRewritePayload
  createPgSeclabel(input: CreatePgSeclabelInput!): CreatePgSeclabelPayload
  createPgShdepend(input: CreatePgShdependInput!): CreatePgShdependPayload
  createPgShdescription(input: CreatePgShdescriptionInput!): CreatePgShdescriptionPayload
  createPgShseclabel(input: CreatePgShseclabelInput!): CreatePgShseclabelPayload
  createPgStatDatabase(input: CreatePgStatDatabaseInput!): CreatePgStatDatabasePayload
  createPgStatDatabaseConflict(input: CreatePgStatDatabaseConflictInput!): CreatePgStatDatabaseConflictPayload
  createPgStatistic(input: CreatePgStatisticInput!): CreatePgStatisticPayload
  createPgTablespace(input: CreatePgTablespaceInput!): CreatePgTablespacePayload
  createPgTransform(input: CreatePgTransformInput!): CreatePgTransformPayload
  createPgTrigger(input: CreatePgTriggerInput!): CreatePgTriggerPayload
  createPgTsConfig(input: CreatePgTsConfigInput!): CreatePgTsConfigPayload
  createPgTsConfigMap(input: CreatePgTsConfigMapInput!): CreatePgTsConfigMapPayload
  createPgTsDict(input: CreatePgTsDictInput!): CreatePgTsDictPayload
  createPgTsParser(input: CreatePgTsParserInput!): CreatePgTsParserPayload
  createPgTsTemplate(input: CreatePgTsTemplateInput!): CreatePgTsTemplatePayload
  createPgType(input: CreatePgTypeInput!): CreatePgTypePayload
  createPgUserMapping(input: CreatePgUserMappingInput!): CreatePgUserMappingPayload
}

input NextvalInput {
  clientMutationId: String
  arg0: Float!
}

type NextvalPayload {
  clientMutationId: String
  integer: Int
  query: Query
}

# An object with a globally unique \`ID\`.
interface Node {
  # A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  __id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: Cursor

  # When paginating forwards, the cursor to continue.
  endCursor: Cursor
}

input PgAdvisoryUnlockAllInput {
  clientMutationId: String
}

type PgAdvisoryUnlockAllPayload {
  clientMutationId: String
  string: String
  query: Query
}

type PgAggregate {
  aggfnoid: Float!
  aggkind: String!
  aggnumdirectargs: Int!
  aggtransfn: Float!
  aggfinalfn: Float!
  aggmtransfn: Float!
  aggminvtransfn: Float!
  aggmfinalfn: Float!
  aggfinalextra: Boolean!
  aggmfinalextra: Boolean!
  aggsortop: Float!
  aggtranstype: Float!
  aggtransspace: Int!
  aggmtranstype: Float!
  aggmtransspace: Int!
  agginitval: String
  aggminitval: String
}

input PgAggregateInput {
  aggfnoid: Float!
  aggkind: String!
  aggnumdirectargs: Int!
  aggtransfn: Float!
  aggfinalfn: Float!
  aggmtransfn: Float!
  aggminvtransfn: Float!
  aggmfinalfn: Float!
  aggfinalextra: Boolean!
  aggmfinalextra: Boolean!
  aggsortop: Float!
  aggtranstype: Float!
  aggtransspace: Int!
  aggmtranstype: Float!
  aggmtransspace: Int!
  agginitval: String
  aggminitval: String
}

# A connection to a list of \`PgAggregate\` values.
type PgAggregatesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgAggregate\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgAggregate\` and cursor to aid in pagination.
  edges: [PgAggregatesEdge]

  # A list of \`PgAggregate\` objects.
  nodes: [PgAggregate!]
}

# A \`PgAggregate\` edge in the connection.
type PgAggregatesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgAggregate\` at the end of the edge.
  node: PgAggregate!
}

# Methods to use when ordering \`PgAggregate\`.
enum PgAggregatesOrderBy {
  NATURAL
  AGGFNOID_ASC
  AGGFNOID_DESC
  AGGKIND_ASC
  AGGKIND_DESC
  AGGNUMDIRECTARGS_ASC
  AGGNUMDIRECTARGS_DESC
  AGGTRANSFN_ASC
  AGGTRANSFN_DESC
  AGGFINALFN_ASC
  AGGFINALFN_DESC
  AGGMTRANSFN_ASC
  AGGMTRANSFN_DESC
  AGGMINVTRANSFN_ASC
  AGGMINVTRANSFN_DESC
  AGGMFINALFN_ASC
  AGGMFINALFN_DESC
  AGGFINALEXTRA_ASC
  AGGFINALEXTRA_DESC
  AGGMFINALEXTRA_ASC
  AGGMFINALEXTRA_DESC
  AGGSORTOP_ASC
  AGGSORTOP_DESC
  AGGTRANSTYPE_ASC
  AGGTRANSTYPE_DESC
  AGGTRANSSPACE_ASC
  AGGTRANSSPACE_DESC
  AGGMTRANSTYPE_ASC
  AGGMTRANSTYPE_DESC
  AGGMTRANSSPACE_ASC
  AGGMTRANSSPACE_DESC
  AGGINITVAL_ASC
  AGGINITVAL_DESC
  AGGMINITVAL_ASC
  AGGMINITVAL_DESC
}

type PgAm {
  amname: String!
  amstrategies: Int!
  amsupport: Int!
  amcanorder: Boolean!
  amcanorderbyop: Boolean!
  amcanbackward: Boolean!
  amcanunique: Boolean!
  amcanmulticol: Boolean!
  amoptionalkey: Boolean!
  amsearcharray: Boolean!
  amsearchnulls: Boolean!
  amstorage: Boolean!
  amclusterable: Boolean!
  ampredlocks: Boolean!
  amkeytype: Float!
  aminsert: Float!
  ambeginscan: Float!
  amgettuple: Float!
  amgetbitmap: Float!
  amrescan: Float!
  amendscan: Float!
  ammarkpos: Float!
  amrestrpos: Float!
  ambuild: Float!
  ambuildempty: Float!
  ambulkdelete: Float!
  amvacuumcleanup: Float!
  amcanreturn: Float!
  amcostestimate: Float!
  amoptions: Float!
}

input PgAmInput {
  amname: String!
  amstrategies: Int!
  amsupport: Int!
  amcanorder: Boolean!
  amcanorderbyop: Boolean!
  amcanbackward: Boolean!
  amcanunique: Boolean!
  amcanmulticol: Boolean!
  amoptionalkey: Boolean!
  amsearcharray: Boolean!
  amsearchnulls: Boolean!
  amstorage: Boolean!
  amclusterable: Boolean!
  ampredlocks: Boolean!
  amkeytype: Float!
  aminsert: Float!
  ambeginscan: Float!
  amgettuple: Float!
  amgetbitmap: Float!
  amrescan: Float!
  amendscan: Float!
  ammarkpos: Float!
  amrestrpos: Float!
  ambuild: Float!
  ambuildempty: Float!
  ambulkdelete: Float!
  amvacuumcleanup: Float!
  amcanreturn: Float!
  amcostestimate: Float!
  amoptions: Float!
}

type PgAmop {
  amopfamily: Float!
  amoplefttype: Float!
  amoprighttype: Float!
  amopstrategy: Int!
  amoppurpose: String!
  amopopr: Float!
  amopmethod: Float!
  amopsortfamily: Float!
}

input PgAmopInput {
  amopfamily: Float!
  amoplefttype: Float!
  amoprighttype: Float!
  amopstrategy: Int!
  amoppurpose: String!
  amopopr: Float!
  amopmethod: Float!
  amopsortfamily: Float!
}

# A connection to a list of \`PgAmop\` values.
type PgAmopsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgAmop\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgAmop\` and cursor to aid in pagination.
  edges: [PgAmopsEdge]

  # A list of \`PgAmop\` objects.
  nodes: [PgAmop!]
}

# A \`PgAmop\` edge in the connection.
type PgAmopsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgAmop\` at the end of the edge.
  node: PgAmop!
}

# Methods to use when ordering \`PgAmop\`.
enum PgAmopsOrderBy {
  NATURAL
  AMOPFAMILY_ASC
  AMOPFAMILY_DESC
  AMOPLEFTTYPE_ASC
  AMOPLEFTTYPE_DESC
  AMOPRIGHTTYPE_ASC
  AMOPRIGHTTYPE_DESC
  AMOPSTRATEGY_ASC
  AMOPSTRATEGY_DESC
  AMOPPURPOSE_ASC
  AMOPPURPOSE_DESC
  AMOPOPR_ASC
  AMOPOPR_DESC
  AMOPMETHOD_ASC
  AMOPMETHOD_DESC
  AMOPSORTFAMILY_ASC
  AMOPSORTFAMILY_DESC
}

type PgAmproc {
  amprocfamily: Float!
  amproclefttype: Float!
  amprocrighttype: Float!
  amprocnum: Int!
  amproc: Float!
}

input PgAmprocInput {
  amprocfamily: Float!
  amproclefttype: Float!
  amprocrighttype: Float!
  amprocnum: Int!
  amproc: Float!
}

# A connection to a list of \`PgAmproc\` values.
type PgAmprocsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgAmproc\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgAmproc\` and cursor to aid in pagination.
  edges: [PgAmprocsEdge]

  # A list of \`PgAmproc\` objects.
  nodes: [PgAmproc!]
}

# A \`PgAmproc\` edge in the connection.
type PgAmprocsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgAmproc\` at the end of the edge.
  node: PgAmproc!
}

# Methods to use when ordering \`PgAmproc\`.
enum PgAmprocsOrderBy {
  NATURAL
  AMPROCFAMILY_ASC
  AMPROCFAMILY_DESC
  AMPROCLEFTTYPE_ASC
  AMPROCLEFTTYPE_DESC
  AMPROCRIGHTTYPE_ASC
  AMPROCRIGHTTYPE_DESC
  AMPROCNUM_ASC
  AMPROCNUM_DESC
  AMPROC_ASC
  AMPROC_DESC
}

# A connection to a list of \`PgAm\` values.
type PgAmsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgAm\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgAm\` and cursor to aid in pagination.
  edges: [PgAmsEdge]

  # A list of \`PgAm\` objects.
  nodes: [PgAm!]
}

# A \`PgAm\` edge in the connection.
type PgAmsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgAm\` at the end of the edge.
  node: PgAm!
}

# Methods to use when ordering \`PgAm\`.
enum PgAmsOrderBy {
  NATURAL
  AMNAME_ASC
  AMNAME_DESC
  AMSTRATEGIES_ASC
  AMSTRATEGIES_DESC
  AMSUPPORT_ASC
  AMSUPPORT_DESC
  AMCANORDER_ASC
  AMCANORDER_DESC
  AMCANORDERBYOP_ASC
  AMCANORDERBYOP_DESC
  AMCANBACKWARD_ASC
  AMCANBACKWARD_DESC
  AMCANUNIQUE_ASC
  AMCANUNIQUE_DESC
  AMCANMULTICOL_ASC
  AMCANMULTICOL_DESC
  AMOPTIONALKEY_ASC
  AMOPTIONALKEY_DESC
  AMSEARCHARRAY_ASC
  AMSEARCHARRAY_DESC
  AMSEARCHNULLS_ASC
  AMSEARCHNULLS_DESC
  AMSTORAGE_ASC
  AMSTORAGE_DESC
  AMCLUSTERABLE_ASC
  AMCLUSTERABLE_DESC
  AMPREDLOCKS_ASC
  AMPREDLOCKS_DESC
  AMKEYTYPE_ASC
  AMKEYTYPE_DESC
  AMINSERT_ASC
  AMINSERT_DESC
  AMBEGINSCAN_ASC
  AMBEGINSCAN_DESC
  AMGETTUPLE_ASC
  AMGETTUPLE_DESC
  AMGETBITMAP_ASC
  AMGETBITMAP_DESC
  AMRESCAN_ASC
  AMRESCAN_DESC
  AMENDSCAN_ASC
  AMENDSCAN_DESC
  AMMARKPOS_ASC
  AMMARKPOS_DESC
  AMRESTRPOS_ASC
  AMRESTRPOS_DESC
  AMBUILD_ASC
  AMBUILD_DESC
  AMBUILDEMPTY_ASC
  AMBUILDEMPTY_DESC
  AMBULKDELETE_ASC
  AMBULKDELETE_DESC
  AMVACUUMCLEANUP_ASC
  AMVACUUMCLEANUP_DESC
  AMCANRETURN_ASC
  AMCANRETURN_DESC
  AMCOSTESTIMATE_ASC
  AMCOSTESTIMATE_DESC
  AMOPTIONS_ASC
  AMOPTIONS_DESC
}

type PgAttrdef {
  adrelid: Float!
  adnum: Int!
  adbin: String
  adsrc: String
}

input PgAttrdefInput {
  adrelid: Float!
  adnum: Int!
  adbin: String
  adsrc: String
}

# A connection to a list of \`PgAttrdef\` values.
type PgAttrdefsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgAttrdef\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgAttrdef\` and cursor to aid in pagination.
  edges: [PgAttrdefsEdge]

  # A list of \`PgAttrdef\` objects.
  nodes: [PgAttrdef!]
}

# A \`PgAttrdef\` edge in the connection.
type PgAttrdefsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgAttrdef\` at the end of the edge.
  node: PgAttrdef!
}

# Methods to use when ordering \`PgAttrdef\`.
enum PgAttrdefsOrderBy {
  NATURAL
  ADRELID_ASC
  ADRELID_DESC
  ADNUM_ASC
  ADNUM_DESC
  ADBIN_ASC
  ADBIN_DESC
  ADSRC_ASC
  ADSRC_DESC
}

type PgAttribute {
  attrelid: Float!
  attname: String!
  atttypid: Float!
  attstattarget: Int!
  attlen: Int!
  attnum: Int!
  attndims: Int!
  attcacheoff: Int!
  atttypmod: Int!
  attbyval: Boolean!
  attstorage: String!
  attalign: String!
  attnotnull: Boolean!
  atthasdef: Boolean!
  attisdropped: Boolean!
  attislocal: Boolean!
  attinhcount: Int!
  attcollation: Float!
  attacl: [String]
  attoptions: [String]
  attfdwoptions: [String]
}

input PgAttributeInput {
  attrelid: Float!
  attname: String!
  atttypid: Float!
  attstattarget: Int!
  attlen: Int!
  attnum: Int!
  attndims: Int!
  attcacheoff: Int!
  atttypmod: Int!
  attbyval: Boolean!
  attstorage: String!
  attalign: String!
  attnotnull: Boolean!
  atthasdef: Boolean!
  attisdropped: Boolean!
  attislocal: Boolean!
  attinhcount: Int!
  attcollation: Float!
  attacl: [String]
  attoptions: [String]
  attfdwoptions: [String]
}

# A connection to a list of \`PgAttribute\` values.
type PgAttributesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgAttribute\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgAttribute\` and cursor to aid in pagination.
  edges: [PgAttributesEdge]

  # A list of \`PgAttribute\` objects.
  nodes: [PgAttribute!]
}

# A \`PgAttribute\` edge in the connection.
type PgAttributesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgAttribute\` at the end of the edge.
  node: PgAttribute!
}

# Methods to use when ordering \`PgAttribute\`.
enum PgAttributesOrderBy {
  NATURAL
  ATTRELID_ASC
  ATTRELID_DESC
  ATTNAME_ASC
  ATTNAME_DESC
  ATTTYPID_ASC
  ATTTYPID_DESC
  ATTSTATTARGET_ASC
  ATTSTATTARGET_DESC
  ATTLEN_ASC
  ATTLEN_DESC
  ATTNUM_ASC
  ATTNUM_DESC
  ATTNDIMS_ASC
  ATTNDIMS_DESC
  ATTCACHEOFF_ASC
  ATTCACHEOFF_DESC
  ATTTYPMOD_ASC
  ATTTYPMOD_DESC
  ATTBYVAL_ASC
  ATTBYVAL_DESC
  ATTSTORAGE_ASC
  ATTSTORAGE_DESC
  ATTALIGN_ASC
  ATTALIGN_DESC
  ATTNOTNULL_ASC
  ATTNOTNULL_DESC
  ATTHASDEF_ASC
  ATTHASDEF_DESC
  ATTISDROPPED_ASC
  ATTISDROPPED_DESC
  ATTISLOCAL_ASC
  ATTISLOCAL_DESC
  ATTINHCOUNT_ASC
  ATTINHCOUNT_DESC
  ATTCOLLATION_ASC
  ATTCOLLATION_DESC
  ATTACL_ASC
  ATTACL_DESC
  ATTOPTIONS_ASC
  ATTOPTIONS_DESC
  ATTFDWOPTIONS_ASC
  ATTFDWOPTIONS_DESC
}

type PgAuthid {
  rolname: String!
  rolsuper: Boolean!
  rolinherit: Boolean!
  rolcreaterole: Boolean!
  rolcreatedb: Boolean!
  rolcanlogin: Boolean!
  rolreplication: Boolean!
  rolbypassrls: Boolean!
  rolconnlimit: Int!
  rolpassword: String
  rolvaliduntil: Datetime
}

input PgAuthidInput {
  rolname: String!
  rolsuper: Boolean!
  rolinherit: Boolean!
  rolcreaterole: Boolean!
  rolcreatedb: Boolean!
  rolcanlogin: Boolean!
  rolreplication: Boolean!
  rolbypassrls: Boolean!
  rolconnlimit: Int!
  rolpassword: String
  rolvaliduntil: Datetime
}

# A connection to a list of \`PgAuthid\` values.
type PgAuthidsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgAuthid\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgAuthid\` and cursor to aid in pagination.
  edges: [PgAuthidsEdge]

  # A list of \`PgAuthid\` objects.
  nodes: [PgAuthid!]
}

# A \`PgAuthid\` edge in the connection.
type PgAuthidsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgAuthid\` at the end of the edge.
  node: PgAuthid!
}

# Methods to use when ordering \`PgAuthid\`.
enum PgAuthidsOrderBy {
  NATURAL
  ROLNAME_ASC
  ROLNAME_DESC
  ROLSUPER_ASC
  ROLSUPER_DESC
  ROLINHERIT_ASC
  ROLINHERIT_DESC
  ROLCREATEROLE_ASC
  ROLCREATEROLE_DESC
  ROLCREATEDB_ASC
  ROLCREATEDB_DESC
  ROLCANLOGIN_ASC
  ROLCANLOGIN_DESC
  ROLREPLICATION_ASC
  ROLREPLICATION_DESC
  ROLBYPASSRLS_ASC
  ROLBYPASSRLS_DESC
  ROLCONNLIMIT_ASC
  ROLCONNLIMIT_DESC
  ROLPASSWORD_ASC
  ROLPASSWORD_DESC
  ROLVALIDUNTIL_ASC
  ROLVALIDUNTIL_DESC
}

type PgAuthMember {
  roleid: Float!
  member: Float!
  grantor: Float!
  adminOption: Boolean!
}

input PgAuthMemberInput {
  roleid: Float!
  member: Float!
  grantor: Float!
  adminOption: Boolean!
}

# A connection to a list of \`PgAuthMember\` values.
type PgAuthMembersConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgAuthMember\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgAuthMember\` and cursor to aid in pagination.
  edges: [PgAuthMembersEdge]

  # A list of \`PgAuthMember\` objects.
  nodes: [PgAuthMember!]
}

# A \`PgAuthMember\` edge in the connection.
type PgAuthMembersEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgAuthMember\` at the end of the edge.
  node: PgAuthMember!
}

# Methods to use when ordering \`PgAuthMember\`.
enum PgAuthMembersOrderBy {
  NATURAL
  ROLEID_ASC
  ROLEID_DESC
  MEMBER_ASC
  MEMBER_DESC
  GRANTOR_ASC
  GRANTOR_DESC
  ADMIN_OPTION_ASC
  ADMIN_OPTION_DESC
}

type PgAvailableExtension {
  name: String
  defaultVersion: String
  installedVersion: String
  comment: String
}

# A connection to a list of \`PgAvailableExtension\` values.
type PgAvailableExtensionsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgAvailableExtension\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgAvailableExtension\` and cursor to aid in pagination.
  edges: [PgAvailableExtensionsEdge]

  # A list of \`PgAvailableExtension\` objects.
  nodes: [PgAvailableExtension!]
}

# A \`PgAvailableExtension\` edge in the connection.
type PgAvailableExtensionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgAvailableExtension\` at the end of the edge.
  node: PgAvailableExtension!
}

# Methods to use when ordering \`PgAvailableExtension\`.
enum PgAvailableExtensionsOrderBy {
  NATURAL
  NAME_ASC
  NAME_DESC
  DEFAULT_VERSION_ASC
  DEFAULT_VERSION_DESC
  INSTALLED_VERSION_ASC
  INSTALLED_VERSION_DESC
  COMMENT_ASC
  COMMENT_DESC
}

type PgAvailableExtensionVersion {
  name: String
  version: String
  installed: Boolean
  superuser: Boolean
  relocatable: Boolean
  schema: String
  requires: [String]
  comment: String
}

# A connection to a list of \`PgAvailableExtensionVersion\` values.
type PgAvailableExtensionVersionsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgAvailableExtensionVersion\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgAvailableExtensionVersion\` and cursor to aid in pagination.
  edges: [PgAvailableExtensionVersionsEdge]

  # A list of \`PgAvailableExtensionVersion\` objects.
  nodes: [PgAvailableExtensionVersion!]
}

# A \`PgAvailableExtensionVersion\` edge in the connection.
type PgAvailableExtensionVersionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgAvailableExtensionVersion\` at the end of the edge.
  node: PgAvailableExtensionVersion!
}

# Methods to use when ordering \`PgAvailableExtensionVersion\`.
enum PgAvailableExtensionVersionsOrderBy {
  NATURAL
  NAME_ASC
  NAME_DESC
  VERSION_ASC
  VERSION_DESC
  INSTALLED_ASC
  INSTALLED_DESC
  SUPERUSER_ASC
  SUPERUSER_DESC
  RELOCATABLE_ASC
  RELOCATABLE_DESC
  SCHEMA_ASC
  SCHEMA_DESC
  REQUIRES_ASC
  REQUIRES_DESC
  COMMENT_ASC
  COMMENT_DESC
}

input PgCancelBackendInput {
  clientMutationId: String
  arg0: Int!
}

type PgCancelBackendPayload {
  clientMutationId: String
  boolean: Boolean
  query: Query
}

type PgCast {
  castsource: Float!
  casttarget: Float!
  castfunc: Float!
  castcontext: String!
  castmethod: String!
}

input PgCastInput {
  castsource: Float!
  casttarget: Float!
  castfunc: Float!
  castcontext: String!
  castmethod: String!
}

# A connection to a list of \`PgCast\` values.
type PgCastsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgCast\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgCast\` and cursor to aid in pagination.
  edges: [PgCastsEdge]

  # A list of \`PgCast\` objects.
  nodes: [PgCast!]
}

# A \`PgCast\` edge in the connection.
type PgCastsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgCast\` at the end of the edge.
  node: PgCast!
}

# Methods to use when ordering \`PgCast\`.
enum PgCastsOrderBy {
  NATURAL
  CASTSOURCE_ASC
  CASTSOURCE_DESC
  CASTTARGET_ASC
  CASTTARGET_DESC
  CASTFUNC_ASC
  CASTFUNC_DESC
  CASTCONTEXT_ASC
  CASTCONTEXT_DESC
  CASTMETHOD_ASC
  CASTMETHOD_DESC
}

type PgClass {
  relname: String!
  relnamespace: Float!
  reltype: Float!
  reloftype: Float!
  relowner: Float!
  relam: Float!
  relfilenode: Float!
  reltablespace: Float!
  relpages: Int!
  reltuples: Float!
  relallvisible: Int!
  reltoastrelid: Float!
  relhasindex: Boolean!
  relisshared: Boolean!
  relpersistence: String!
  relkind: String!
  relnatts: Int!
  relchecks: Int!
  relhasoids: Boolean!
  relhaspkey: Boolean!
  relhasrules: Boolean!
  relhastriggers: Boolean!
  relhassubclass: Boolean!
  relrowsecurity: Boolean!
  relforcerowsecurity: Boolean!
  relispopulated: Boolean!
  relreplident: String!
  relfrozenxid: String!
  relminmxid: String!
  relacl: [String]
  reloptions: [String]
}

# A connection to a list of \`PgClass\` values.
type PgClassesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgClass\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgClass\` and cursor to aid in pagination.
  edges: [PgClassesEdge]

  # A list of \`PgClass\` objects.
  nodes: [PgClass!]
}

# A \`PgClass\` edge in the connection.
type PgClassesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgClass\` at the end of the edge.
  node: PgClass!
}

# Methods to use when ordering \`PgClass\`.
enum PgClassesOrderBy {
  NATURAL
  RELNAME_ASC
  RELNAME_DESC
  RELNAMESPACE_ASC
  RELNAMESPACE_DESC
  RELTYPE_ASC
  RELTYPE_DESC
  RELOFTYPE_ASC
  RELOFTYPE_DESC
  RELOWNER_ASC
  RELOWNER_DESC
  RELAM_ASC
  RELAM_DESC
  RELFILENODE_ASC
  RELFILENODE_DESC
  RELTABLESPACE_ASC
  RELTABLESPACE_DESC
  RELPAGES_ASC
  RELPAGES_DESC
  RELTUPLES_ASC
  RELTUPLES_DESC
  RELALLVISIBLE_ASC
  RELALLVISIBLE_DESC
  RELTOASTRELID_ASC
  RELTOASTRELID_DESC
  RELHASINDEX_ASC
  RELHASINDEX_DESC
  RELISSHARED_ASC
  RELISSHARED_DESC
  RELPERSISTENCE_ASC
  RELPERSISTENCE_DESC
  RELKIND_ASC
  RELKIND_DESC
  RELNATTS_ASC
  RELNATTS_DESC
  RELCHECKS_ASC
  RELCHECKS_DESC
  RELHASOIDS_ASC
  RELHASOIDS_DESC
  RELHASPKEY_ASC
  RELHASPKEY_DESC
  RELHASRULES_ASC
  RELHASRULES_DESC
  RELHASTRIGGERS_ASC
  RELHASTRIGGERS_DESC
  RELHASSUBCLASS_ASC
  RELHASSUBCLASS_DESC
  RELROWSECURITY_ASC
  RELROWSECURITY_DESC
  RELFORCEROWSECURITY_ASC
  RELFORCEROWSECURITY_DESC
  RELISPOPULATED_ASC
  RELISPOPULATED_DESC
  RELREPLIDENT_ASC
  RELREPLIDENT_DESC
  RELFROZENXID_ASC
  RELFROZENXID_DESC
  RELMINMXID_ASC
  RELMINMXID_DESC
  RELACL_ASC
  RELACL_DESC
  RELOPTIONS_ASC
  RELOPTIONS_DESC
}

input PgClassInput {
  relname: String!
  relnamespace: Float!
  reltype: Float!
  reloftype: Float!
  relowner: Float!
  relam: Float!
  relfilenode: Float!
  reltablespace: Float!
  relpages: Int!
  reltuples: Float!
  relallvisible: Int!
  reltoastrelid: Float!
  relhasindex: Boolean!
  relisshared: Boolean!
  relpersistence: String!
  relkind: String!
  relnatts: Int!
  relchecks: Int!
  relhasoids: Boolean!
  relhaspkey: Boolean!
  relhasrules: Boolean!
  relhastriggers: Boolean!
  relhassubclass: Boolean!
  relrowsecurity: Boolean!
  relforcerowsecurity: Boolean!
  relispopulated: Boolean!
  relreplident: String!
  relfrozenxid: String!
  relminmxid: String!
  relacl: [String]
  reloptions: [String]
}

type PgCollation {
  collname: String!
  collnamespace: Float!
  collowner: Float!
  collencoding: Int!
  collcollate: String!
  collctype: String!
}

input PgCollationInput {
  collname: String!
  collnamespace: Float!
  collowner: Float!
  collencoding: Int!
  collcollate: String!
  collctype: String!
}

# A connection to a list of \`PgCollation\` values.
type PgCollationsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgCollation\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgCollation\` and cursor to aid in pagination.
  edges: [PgCollationsEdge]

  # A list of \`PgCollation\` objects.
  nodes: [PgCollation!]
}

# A \`PgCollation\` edge in the connection.
type PgCollationsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgCollation\` at the end of the edge.
  node: PgCollation!
}

# Methods to use when ordering \`PgCollation\`.
enum PgCollationsOrderBy {
  NATURAL
  COLLNAME_ASC
  COLLNAME_DESC
  COLLNAMESPACE_ASC
  COLLNAMESPACE_DESC
  COLLOWNER_ASC
  COLLOWNER_DESC
  COLLENCODING_ASC
  COLLENCODING_DESC
  COLLCOLLATE_ASC
  COLLCOLLATE_DESC
  COLLCTYPE_ASC
  COLLCTYPE_DESC
}

type PgConstraint {
  conname: String!
  connamespace: Float!
  contype: String!
  condeferrable: Boolean!
  condeferred: Boolean!
  convalidated: Boolean!
  conrelid: Float!
  contypid: Float!
  conindid: Float!
  confrelid: Float!
  confupdtype: String!
  confdeltype: String!
  confmatchtype: String!
  conislocal: Boolean!
  coninhcount: Int!
  connoinherit: Boolean!
  conkey: [Int]
  confkey: [Int]
  conpfeqop: [Float]
  conppeqop: [Float]
  conffeqop: [Float]
  conexclop: [Float]
  conbin: String
  consrc: String
}

input PgConstraintInput {
  conname: String!
  connamespace: Float!
  contype: String!
  condeferrable: Boolean!
  condeferred: Boolean!
  convalidated: Boolean!
  conrelid: Float!
  contypid: Float!
  conindid: Float!
  confrelid: Float!
  confupdtype: String!
  confdeltype: String!
  confmatchtype: String!
  conislocal: Boolean!
  coninhcount: Int!
  connoinherit: Boolean!
  conkey: [Int]
  confkey: [Int]
  conpfeqop: [Float]
  conppeqop: [Float]
  conffeqop: [Float]
  conexclop: [Float]
  conbin: String
  consrc: String
}

# A connection to a list of \`PgConstraint\` values.
type PgConstraintsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgConstraint\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgConstraint\` and cursor to aid in pagination.
  edges: [PgConstraintsEdge]

  # A list of \`PgConstraint\` objects.
  nodes: [PgConstraint!]
}

# A \`PgConstraint\` edge in the connection.
type PgConstraintsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgConstraint\` at the end of the edge.
  node: PgConstraint!
}

# Methods to use when ordering \`PgConstraint\`.
enum PgConstraintsOrderBy {
  NATURAL
  CONNAME_ASC
  CONNAME_DESC
  CONNAMESPACE_ASC
  CONNAMESPACE_DESC
  CONTYPE_ASC
  CONTYPE_DESC
  CONDEFERRABLE_ASC
  CONDEFERRABLE_DESC
  CONDEFERRED_ASC
  CONDEFERRED_DESC
  CONVALIDATED_ASC
  CONVALIDATED_DESC
  CONRELID_ASC
  CONRELID_DESC
  CONTYPID_ASC
  CONTYPID_DESC
  CONINDID_ASC
  CONINDID_DESC
  CONFRELID_ASC
  CONFRELID_DESC
  CONFUPDTYPE_ASC
  CONFUPDTYPE_DESC
  CONFDELTYPE_ASC
  CONFDELTYPE_DESC
  CONFMATCHTYPE_ASC
  CONFMATCHTYPE_DESC
  CONISLOCAL_ASC
  CONISLOCAL_DESC
  CONINHCOUNT_ASC
  CONINHCOUNT_DESC
  CONNOINHERIT_ASC
  CONNOINHERIT_DESC
  CONKEY_ASC
  CONKEY_DESC
  CONFKEY_ASC
  CONFKEY_DESC
  CONPFEQOP_ASC
  CONPFEQOP_DESC
  CONPPEQOP_ASC
  CONPPEQOP_DESC
  CONFFEQOP_ASC
  CONFFEQOP_DESC
  CONEXCLOP_ASC
  CONEXCLOP_DESC
  CONBIN_ASC
  CONBIN_DESC
  CONSRC_ASC
  CONSRC_DESC
}

type PgConversion {
  conname: String!
  connamespace: Float!
  conowner: Float!
  conforencoding: Int!
  contoencoding: Int!
  conproc: Float!
  condefault: Boolean!
}

input PgConversionInput {
  conname: String!
  connamespace: Float!
  conowner: Float!
  conforencoding: Int!
  contoencoding: Int!
  conproc: Float!
  condefault: Boolean!
}

# A connection to a list of \`PgConversion\` values.
type PgConversionsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgConversion\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgConversion\` and cursor to aid in pagination.
  edges: [PgConversionsEdge]

  # A list of \`PgConversion\` objects.
  nodes: [PgConversion!]
}

# A \`PgConversion\` edge in the connection.
type PgConversionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgConversion\` at the end of the edge.
  node: PgConversion!
}

# Methods to use when ordering \`PgConversion\`.
enum PgConversionsOrderBy {
  NATURAL
  CONNAME_ASC
  CONNAME_DESC
  CONNAMESPACE_ASC
  CONNAMESPACE_DESC
  CONOWNER_ASC
  CONOWNER_DESC
  CONFORENCODING_ASC
  CONFORENCODING_DESC
  CONTOENCODING_ASC
  CONTOENCODING_DESC
  CONPROC_ASC
  CONPROC_DESC
  CONDEFAULT_ASC
  CONDEFAULT_DESC
}

input PgCreateRestorePointInput {
  clientMutationId: String
  arg0: String!
}

type PgCreateRestorePointPayload {
  clientMutationId: String
  string: String
  query: Query
}

input PgCurrentXlogInsertLocationInput {
  clientMutationId: String
}

type PgCurrentXlogInsertLocationPayload {
  clientMutationId: String
  string: String
  query: Query
}

input PgCurrentXlogLocationInput {
  clientMutationId: String
}

type PgCurrentXlogLocationPayload {
  clientMutationId: String
  string: String
  query: Query
}

type PgCursor {
  name: String
  statement: String
  isHoldable: Boolean
  isBinary: Boolean
  isScrollable: Boolean
  creationTime: Datetime
}

# A connection to a list of \`PgCursor\` values.
type PgCursorsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgCursor\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgCursor\` and cursor to aid in pagination.
  edges: [PgCursorsEdge]

  # A list of \`PgCursor\` objects.
  nodes: [PgCursor!]
}

# A \`PgCursor\` edge in the connection.
type PgCursorsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgCursor\` at the end of the edge.
  node: PgCursor!
}

# Methods to use when ordering \`PgCursor\`.
enum PgCursorsOrderBy {
  NATURAL
  NAME_ASC
  NAME_DESC
  STATEMENT_ASC
  STATEMENT_DESC
  IS_HOLDABLE_ASC
  IS_HOLDABLE_DESC
  IS_BINARY_ASC
  IS_BINARY_DESC
  IS_SCROLLABLE_ASC
  IS_SCROLLABLE_DESC
  CREATION_TIME_ASC
  CREATION_TIME_DESC
}

type PgDatabase {
  datname: String!
  datdba: Float!
  encoding: Int!
  datcollate: String!
  datctype: String!
  datistemplate: Boolean!
  datallowconn: Boolean!
  datconnlimit: Int!
  datlastsysoid: Float!
  datfrozenxid: String!
  datminmxid: String!
  dattablespace: Float!
  datacl: [String]
}

input PgDatabaseInput {
  datname: String!
  datdba: Float!
  encoding: Int!
  datcollate: String!
  datctype: String!
  datistemplate: Boolean!
  datallowconn: Boolean!
  datconnlimit: Int!
  datlastsysoid: Float!
  datfrozenxid: String!
  datminmxid: String!
  dattablespace: Float!
  datacl: [String]
}

# A connection to a list of \`PgDatabase\` values.
type PgDatabasesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgDatabase\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgDatabase\` and cursor to aid in pagination.
  edges: [PgDatabasesEdge]

  # A list of \`PgDatabase\` objects.
  nodes: [PgDatabase!]
}

# A \`PgDatabase\` edge in the connection.
type PgDatabasesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgDatabase\` at the end of the edge.
  node: PgDatabase!
}

# Methods to use when ordering \`PgDatabase\`.
enum PgDatabasesOrderBy {
  NATURAL
  DATNAME_ASC
  DATNAME_DESC
  DATDBA_ASC
  DATDBA_DESC
  ENCODING_ASC
  ENCODING_DESC
  DATCOLLATE_ASC
  DATCOLLATE_DESC
  DATCTYPE_ASC
  DATCTYPE_DESC
  DATISTEMPLATE_ASC
  DATISTEMPLATE_DESC
  DATALLOWCONN_ASC
  DATALLOWCONN_DESC
  DATCONNLIMIT_ASC
  DATCONNLIMIT_DESC
  DATLASTSYSOID_ASC
  DATLASTSYSOID_DESC
  DATFROZENXID_ASC
  DATFROZENXID_DESC
  DATMINMXID_ASC
  DATMINMXID_DESC
  DATTABLESPACE_ASC
  DATTABLESPACE_DESC
  DATACL_ASC
  DATACL_DESC
}

type PgDbRoleSetting {
  setdatabase: Float!
  setrole: Float!
  setconfig: [String]
}

input PgDbRoleSettingInput {
  setdatabase: Float!
  setrole: Float!
  setconfig: [String]
}

# A connection to a list of \`PgDbRoleSetting\` values.
type PgDbRoleSettingsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgDbRoleSetting\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgDbRoleSetting\` and cursor to aid in pagination.
  edges: [PgDbRoleSettingsEdge]

  # A list of \`PgDbRoleSetting\` objects.
  nodes: [PgDbRoleSetting!]
}

# A \`PgDbRoleSetting\` edge in the connection.
type PgDbRoleSettingsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgDbRoleSetting\` at the end of the edge.
  node: PgDbRoleSetting!
}

# Methods to use when ordering \`PgDbRoleSetting\`.
enum PgDbRoleSettingsOrderBy {
  NATURAL
  SETDATABASE_ASC
  SETDATABASE_DESC
  SETROLE_ASC
  SETROLE_DESC
  SETCONFIG_ASC
  SETCONFIG_DESC
}

type PgDefaultAcl {
  defaclrole: Float!
  defaclnamespace: Float!
  defaclobjtype: String!
  defaclacl: [String]
}

input PgDefaultAclInput {
  defaclrole: Float!
  defaclnamespace: Float!
  defaclobjtype: String!
  defaclacl: [String]
}

# A connection to a list of \`PgDefaultAcl\` values.
type PgDefaultAclsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgDefaultAcl\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgDefaultAcl\` and cursor to aid in pagination.
  edges: [PgDefaultAclsEdge]

  # A list of \`PgDefaultAcl\` objects.
  nodes: [PgDefaultAcl!]
}

# A \`PgDefaultAcl\` edge in the connection.
type PgDefaultAclsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgDefaultAcl\` at the end of the edge.
  node: PgDefaultAcl!
}

# Methods to use when ordering \`PgDefaultAcl\`.
enum PgDefaultAclsOrderBy {
  NATURAL
  DEFACLROLE_ASC
  DEFACLROLE_DESC
  DEFACLNAMESPACE_ASC
  DEFACLNAMESPACE_DESC
  DEFACLOBJTYPE_ASC
  DEFACLOBJTYPE_DESC
  DEFACLACL_ASC
  DEFACLACL_DESC
}

type PgDepend {
  classid: Float!
  objid: Float!
  objsubid: Int!
  refclassid: Float!
  refobjid: Float!
  refobjsubid: Int!
  deptype: String!
}

input PgDependInput {
  classid: Float!
  objid: Float!
  objsubid: Int!
  refclassid: Float!
  refobjid: Float!
  refobjsubid: Int!
  deptype: String!
}

# A connection to a list of \`PgDepend\` values.
type PgDependsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgDepend\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgDepend\` and cursor to aid in pagination.
  edges: [PgDependsEdge]

  # A list of \`PgDepend\` objects.
  nodes: [PgDepend!]
}

# A \`PgDepend\` edge in the connection.
type PgDependsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgDepend\` at the end of the edge.
  node: PgDepend!
}

# Methods to use when ordering \`PgDepend\`.
enum PgDependsOrderBy {
  NATURAL
  CLASSID_ASC
  CLASSID_DESC
  OBJID_ASC
  OBJID_DESC
  OBJSUBID_ASC
  OBJSUBID_DESC
  REFCLASSID_ASC
  REFCLASSID_DESC
  REFOBJID_ASC
  REFOBJID_DESC
  REFOBJSUBID_ASC
  REFOBJSUBID_DESC
  DEPTYPE_ASC
  DEPTYPE_DESC
}

type PgDescription {
  objoid: Float!
  classoid: Float!
  objsubid: Int!
  description: String!
}

input PgDescriptionInput {
  objoid: Float!
  classoid: Float!
  objsubid: Int!
  description: String!
}

# A connection to a list of \`PgDescription\` values.
type PgDescriptionsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgDescription\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgDescription\` and cursor to aid in pagination.
  edges: [PgDescriptionsEdge]

  # A list of \`PgDescription\` objects.
  nodes: [PgDescription!]
}

# A \`PgDescription\` edge in the connection.
type PgDescriptionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgDescription\` at the end of the edge.
  node: PgDescription!
}

# Methods to use when ordering \`PgDescription\`.
enum PgDescriptionsOrderBy {
  NATURAL
  OBJOID_ASC
  OBJOID_DESC
  CLASSOID_ASC
  CLASSOID_DESC
  OBJSUBID_ASC
  OBJSUBID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
}

input PgDropReplicationSlotInput {
  clientMutationId: String
  arg0: String
}

type PgDropReplicationSlotPayload {
  clientMutationId: String
  string: String
  query: Query
}

type PgEnum {
  enumtypid: Float!
  enumsortorder: Float!
  enumlabel: String!
}

input PgEnumInput {
  enumtypid: Float!
  enumsortorder: Float!
  enumlabel: String!
}

# A connection to a list of \`PgEnum\` values.
type PgEnumsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgEnum\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgEnum\` and cursor to aid in pagination.
  edges: [PgEnumsEdge]

  # A list of \`PgEnum\` objects.
  nodes: [PgEnum!]
}

# A \`PgEnum\` edge in the connection.
type PgEnumsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgEnum\` at the end of the edge.
  node: PgEnum!
}

# Methods to use when ordering \`PgEnum\`.
enum PgEnumsOrderBy {
  NATURAL
  ENUMTYPID_ASC
  ENUMTYPID_DESC
  ENUMSORTORDER_ASC
  ENUMSORTORDER_DESC
  ENUMLABEL_ASC
  ENUMLABEL_DESC
}

type PgEventTrigger {
  evtname: String!
  evtevent: String!
  evtowner: Float!
  evtfoid: Float!
  evtenabled: String!
  evttags: [String]
}

input PgEventTriggerInput {
  evtname: String!
  evtevent: String!
  evtowner: Float!
  evtfoid: Float!
  evtenabled: String!
  evttags: [String]
}

# A connection to a list of \`PgEventTrigger\` values.
type PgEventTriggersConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgEventTrigger\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgEventTrigger\` and cursor to aid in pagination.
  edges: [PgEventTriggersEdge]

  # A list of \`PgEventTrigger\` objects.
  nodes: [PgEventTrigger!]
}

# A \`PgEventTrigger\` edge in the connection.
type PgEventTriggersEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgEventTrigger\` at the end of the edge.
  node: PgEventTrigger!
}

# Methods to use when ordering \`PgEventTrigger\`.
enum PgEventTriggersOrderBy {
  NATURAL
  EVTNAME_ASC
  EVTNAME_DESC
  EVTEVENT_ASC
  EVTEVENT_DESC
  EVTOWNER_ASC
  EVTOWNER_DESC
  EVTFOID_ASC
  EVTFOID_DESC
  EVTENABLED_ASC
  EVTENABLED_DESC
  EVTTAGS_ASC
  EVTTAGS_DESC
}

input PgExportSnapshotInput {
  clientMutationId: String
}

type PgExportSnapshotPayload {
  clientMutationId: String
  string: String
  query: Query
}

type PgExtension {
  extname: String!
  extowner: Float!
  extnamespace: Float!
  extrelocatable: Boolean!
  extversion: String!
  extconfig: [Float]
  extcondition: [String]
}

input PgExtensionConfigDumpInput {
  clientMutationId: String
  arg0: Float!
  arg1: String!
}

type PgExtensionConfigDumpPayload {
  clientMutationId: String
  string: String
  query: Query
}

input PgExtensionInput {
  extname: String!
  extowner: Float!
  extnamespace: Float!
  extrelocatable: Boolean!
  extversion: String!
  extconfig: [Float]
  extcondition: [String]
}

# A connection to a list of \`PgExtension\` values.
type PgExtensionsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgExtension\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgExtension\` and cursor to aid in pagination.
  edges: [PgExtensionsEdge]

  # A list of \`PgExtension\` objects.
  nodes: [PgExtension!]
}

# A \`PgExtension\` edge in the connection.
type PgExtensionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgExtension\` at the end of the edge.
  node: PgExtension!
}

# Methods to use when ordering \`PgExtension\`.
enum PgExtensionsOrderBy {
  NATURAL
  EXTNAME_ASC
  EXTNAME_DESC
  EXTOWNER_ASC
  EXTOWNER_DESC
  EXTNAMESPACE_ASC
  EXTNAMESPACE_DESC
  EXTRELOCATABLE_ASC
  EXTRELOCATABLE_DESC
  EXTVERSION_ASC
  EXTVERSION_DESC
  EXTCONFIG_ASC
  EXTCONFIG_DESC
  EXTCONDITION_ASC
  EXTCONDITION_DESC
}

type PgFileSetting {
  sourcefile: String
  sourceline: Int
  seqno: Int
  name: String
  setting: String
  applied: Boolean
  error: String
}

# A connection to a list of \`PgFileSetting\` values.
type PgFileSettingsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgFileSetting\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgFileSetting\` and cursor to aid in pagination.
  edges: [PgFileSettingsEdge]

  # A list of \`PgFileSetting\` objects.
  nodes: [PgFileSetting!]
}

# A \`PgFileSetting\` edge in the connection.
type PgFileSettingsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgFileSetting\` at the end of the edge.
  node: PgFileSetting!
}

# Methods to use when ordering \`PgFileSetting\`.
enum PgFileSettingsOrderBy {
  NATURAL
  SOURCEFILE_ASC
  SOURCEFILE_DESC
  SOURCELINE_ASC
  SOURCELINE_DESC
  SEQNO_ASC
  SEQNO_DESC
  NAME_ASC
  NAME_DESC
  SETTING_ASC
  SETTING_DESC
  APPLIED_ASC
  APPLIED_DESC
  ERROR_ASC
  ERROR_DESC
}

type PgForeignDataWrapper {
  fdwname: String!
  fdwowner: Float!
  fdwhandler: Float!
  fdwvalidator: Float!
  fdwacl: [String]
  fdwoptions: [String]
}

input PgForeignDataWrapperInput {
  fdwname: String!
  fdwowner: Float!
  fdwhandler: Float!
  fdwvalidator: Float!
  fdwacl: [String]
  fdwoptions: [String]
}

# A connection to a list of \`PgForeignDataWrapper\` values.
type PgForeignDataWrappersConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgForeignDataWrapper\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgForeignDataWrapper\` and cursor to aid in pagination.
  edges: [PgForeignDataWrappersEdge]

  # A list of \`PgForeignDataWrapper\` objects.
  nodes: [PgForeignDataWrapper!]
}

# A \`PgForeignDataWrapper\` edge in the connection.
type PgForeignDataWrappersEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgForeignDataWrapper\` at the end of the edge.
  node: PgForeignDataWrapper!
}

# Methods to use when ordering \`PgForeignDataWrapper\`.
enum PgForeignDataWrappersOrderBy {
  NATURAL
  FDWNAME_ASC
  FDWNAME_DESC
  FDWOWNER_ASC
  FDWOWNER_DESC
  FDWHANDLER_ASC
  FDWHANDLER_DESC
  FDWVALIDATOR_ASC
  FDWVALIDATOR_DESC
  FDWACL_ASC
  FDWACL_DESC
  FDWOPTIONS_ASC
  FDWOPTIONS_DESC
}

type PgForeignServer {
  srvname: String!
  srvowner: Float!
  srvfdw: Float!
  srvtype: String
  srvversion: String
  srvacl: [String]
  srvoptions: [String]
}

input PgForeignServerInput {
  srvname: String!
  srvowner: Float!
  srvfdw: Float!
  srvtype: String
  srvversion: String
  srvacl: [String]
  srvoptions: [String]
}

# A connection to a list of \`PgForeignServer\` values.
type PgForeignServersConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgForeignServer\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgForeignServer\` and cursor to aid in pagination.
  edges: [PgForeignServersEdge]

  # A list of \`PgForeignServer\` objects.
  nodes: [PgForeignServer!]
}

# A \`PgForeignServer\` edge in the connection.
type PgForeignServersEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgForeignServer\` at the end of the edge.
  node: PgForeignServer!
}

# Methods to use when ordering \`PgForeignServer\`.
enum PgForeignServersOrderBy {
  NATURAL
  SRVNAME_ASC
  SRVNAME_DESC
  SRVOWNER_ASC
  SRVOWNER_DESC
  SRVFDW_ASC
  SRVFDW_DESC
  SRVTYPE_ASC
  SRVTYPE_DESC
  SRVVERSION_ASC
  SRVVERSION_DESC
  SRVACL_ASC
  SRVACL_DESC
  SRVOPTIONS_ASC
  SRVOPTIONS_DESC
}

type PgForeignTable {
  ftrelid: Float!
  ftserver: Float!
  ftoptions: [String]
}

input PgForeignTableInput {
  ftrelid: Float!
  ftserver: Float!
  ftoptions: [String]
}

# A connection to a list of \`PgForeignTable\` values.
type PgForeignTablesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgForeignTable\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgForeignTable\` and cursor to aid in pagination.
  edges: [PgForeignTablesEdge]

  # A list of \`PgForeignTable\` objects.
  nodes: [PgForeignTable!]
}

# A \`PgForeignTable\` edge in the connection.
type PgForeignTablesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgForeignTable\` at the end of the edge.
  node: PgForeignTable!
}

# Methods to use when ordering \`PgForeignTable\`.
enum PgForeignTablesOrderBy {
  NATURAL
  FTRELID_ASC
  FTRELID_DESC
  FTSERVER_ASC
  FTSERVER_DESC
  FTOPTIONS_ASC
  FTOPTIONS_DESC
}

type PgGroup {
  groname: String
  grosysid: Float
  grolist: [Float]
}

input PgGroupInput {
  groname: String
  grosysid: Float
  grolist: [Float]
}

# A connection to a list of \`PgGroup\` values.
type PgGroupsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgGroup\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgGroup\` and cursor to aid in pagination.
  edges: [PgGroupsEdge]

  # A list of \`PgGroup\` objects.
  nodes: [PgGroup!]
}

# A \`PgGroup\` edge in the connection.
type PgGroupsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgGroup\` at the end of the edge.
  node: PgGroup!
}

# Methods to use when ordering \`PgGroup\`.
enum PgGroupsOrderBy {
  NATURAL
  GRONAME_ASC
  GRONAME_DESC
  GROSYSID_ASC
  GROSYSID_DESC
  GROLIST_ASC
  GROLIST_DESC
}

type PgIndex {
  indexrelid: Float!
  indrelid: Float!
  indnatts: Int!
  indisunique: Boolean!
  indisprimary: Boolean!
  indisexclusion: Boolean!
  indimmediate: Boolean!
  indisclustered: Boolean!
  indisvalid: Boolean!
  indcheckxmin: Boolean!
  indisready: Boolean!
  indislive: Boolean!
  indisreplident: Boolean!
  indkey: [Int]!
  indcollation: [Float]!
  indclass: [Float]!
  indoption: [Int]!
  indexprs: String
  indpred: String
}

type PgIndexes {
  schemaname: String
  tablename: String
  indexname: String
  tablespace: String
  indexdef: String
}

# A connection to a list of \`PgIndexes\` values.
type PgIndexesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgIndexes\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgIndexes\` and cursor to aid in pagination.
  edges: [PgIndexesEdge]

  # A list of \`PgIndexes\` objects.
  nodes: [PgIndexes!]
}

# A \`PgIndexes\` edge in the connection.
type PgIndexesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgIndexes\` at the end of the edge.
  node: PgIndexes!
}

# Methods to use when ordering \`PgIndexes\`.
enum PgIndexesOrderBy {
  NATURAL
  SCHEMANAME_ASC
  SCHEMANAME_DESC
  TABLENAME_ASC
  TABLENAME_DESC
  INDEXNAME_ASC
  INDEXNAME_DESC
  TABLESPACE_ASC
  TABLESPACE_DESC
  INDEXDEF_ASC
  INDEXDEF_DESC
}

input PgIndexesSizeInput {
  clientMutationId: String
  arg0: Float!
}

type PgIndexesSizePayload {
  clientMutationId: String
  integer: Int
  query: Query
}

input PgIndexInput {
  indexrelid: Float!
  indrelid: Float!
  indnatts: Int!
  indisunique: Boolean!
  indisprimary: Boolean!
  indisexclusion: Boolean!
  indimmediate: Boolean!
  indisclustered: Boolean!
  indisvalid: Boolean!
  indcheckxmin: Boolean!
  indisready: Boolean!
  indislive: Boolean!
  indisreplident: Boolean!
  indkey: [Int]!
  indcollation: [Float]!
  indclass: [Float]!
  indoption: [Int]!
  indexprs: String
  indpred: String
}

# A connection to a list of \`PgIndex\` values.
type PgIndicesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgIndex\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgIndex\` and cursor to aid in pagination.
  edges: [PgIndicesEdge]

  # A list of \`PgIndex\` objects.
  nodes: [PgIndex!]
}

# A \`PgIndex\` edge in the connection.
type PgIndicesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgIndex\` at the end of the edge.
  node: PgIndex!
}

# Methods to use when ordering \`PgIndex\`.
enum PgIndicesOrderBy {
  NATURAL
  INDEXRELID_ASC
  INDEXRELID_DESC
  INDRELID_ASC
  INDRELID_DESC
  INDNATTS_ASC
  INDNATTS_DESC
  INDISUNIQUE_ASC
  INDISUNIQUE_DESC
  INDISPRIMARY_ASC
  INDISPRIMARY_DESC
  INDISEXCLUSION_ASC
  INDISEXCLUSION_DESC
  INDIMMEDIATE_ASC
  INDIMMEDIATE_DESC
  INDISCLUSTERED_ASC
  INDISCLUSTERED_DESC
  INDISVALID_ASC
  INDISVALID_DESC
  INDCHECKXMIN_ASC
  INDCHECKXMIN_DESC
  INDISREADY_ASC
  INDISREADY_DESC
  INDISLIVE_ASC
  INDISLIVE_DESC
  INDISREPLIDENT_ASC
  INDISREPLIDENT_DESC
  INDKEY_ASC
  INDKEY_DESC
  INDCOLLATION_ASC
  INDCOLLATION_DESC
  INDCLASS_ASC
  INDCLASS_DESC
  INDOPTION_ASC
  INDOPTION_DESC
  INDEXPRS_ASC
  INDEXPRS_DESC
  INDPRED_ASC
  INDPRED_DESC
}

type PgInherit {
  inhrelid: Float!
  inhparent: Float!
  inhseqno: Int!
}

input PgInheritInput {
  inhrelid: Float!
  inhparent: Float!
  inhseqno: Int!
}

# A connection to a list of \`PgInherit\` values.
type PgInheritsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgInherit\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgInherit\` and cursor to aid in pagination.
  edges: [PgInheritsEdge]

  # A list of \`PgInherit\` objects.
  nodes: [PgInherit!]
}

# A \`PgInherit\` edge in the connection.
type PgInheritsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgInherit\` at the end of the edge.
  node: PgInherit!
}

# Methods to use when ordering \`PgInherit\`.
enum PgInheritsOrderBy {
  NATURAL
  INHRELID_ASC
  INHRELID_DESC
  INHPARENT_ASC
  INHPARENT_DESC
  INHSEQNO_ASC
  INHSEQNO_DESC
}

input PgIsInBackupInput {
  clientMutationId: String
}

type PgIsInBackupPayload {
  clientMutationId: String
  boolean: Boolean
  query: Query
}

input PgIsInRecoveryInput {
  clientMutationId: String
}

type PgIsInRecoveryPayload {
  clientMutationId: String
  boolean: Boolean
  query: Query
}

input PgIsXlogReplayPausedInput {
  clientMutationId: String
}

type PgIsXlogReplayPausedPayload {
  clientMutationId: String
  boolean: Boolean
  query: Query
}

type PgLanguage {
  lanname: String!
  lanowner: Float!
  lanispl: Boolean!
  lanpltrusted: Boolean!
  lanplcallfoid: Float!
  laninline: Float!
  lanvalidator: Float!
  lanacl: [String]
}

input PgLanguageInput {
  lanname: String!
  lanowner: Float!
  lanispl: Boolean!
  lanpltrusted: Boolean!
  lanplcallfoid: Float!
  laninline: Float!
  lanvalidator: Float!
  lanacl: [String]
}

# A connection to a list of \`PgLanguage\` values.
type PgLanguagesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgLanguage\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgLanguage\` and cursor to aid in pagination.
  edges: [PgLanguagesEdge]

  # A list of \`PgLanguage\` objects.
  nodes: [PgLanguage!]
}

# A \`PgLanguage\` edge in the connection.
type PgLanguagesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgLanguage\` at the end of the edge.
  node: PgLanguage!
}

# Methods to use when ordering \`PgLanguage\`.
enum PgLanguagesOrderBy {
  NATURAL
  LANNAME_ASC
  LANNAME_DESC
  LANOWNER_ASC
  LANOWNER_DESC
  LANISPL_ASC
  LANISPL_DESC
  LANPLTRUSTED_ASC
  LANPLTRUSTED_DESC
  LANPLCALLFOID_ASC
  LANPLCALLFOID_DESC
  LANINLINE_ASC
  LANINLINE_DESC
  LANVALIDATOR_ASC
  LANVALIDATOR_DESC
  LANACL_ASC
  LANACL_DESC
}

type PgLargeobject {
  loid: Float!
  pageno: Int!
  data: String!
}

input PgLargeobjectInput {
  loid: Float!
  pageno: Int!
  data: String!
}

# A connection to a list of \`PgLargeobjectMetadatum\` values.
type PgLargeobjectMetadataConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgLargeobjectMetadatum\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgLargeobjectMetadatum\` and cursor to aid in pagination.
  edges: [PgLargeobjectMetadataEdge]

  # A list of \`PgLargeobjectMetadatum\` objects.
  nodes: [PgLargeobjectMetadatum!]
}

# A \`PgLargeobjectMetadatum\` edge in the connection.
type PgLargeobjectMetadataEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgLargeobjectMetadatum\` at the end of the edge.
  node: PgLargeobjectMetadatum!
}

# Methods to use when ordering \`PgLargeobjectMetadatum\`.
enum PgLargeobjectMetadataOrderBy {
  NATURAL
  LOMOWNER_ASC
  LOMOWNER_DESC
  LOMACL_ASC
  LOMACL_DESC
}

type PgLargeobjectMetadatum {
  lomowner: Float!
  lomacl: [String]
}

input PgLargeobjectMetadatumInput {
  lomowner: Float!
  lomacl: [String]
}

# A connection to a list of \`PgLargeobject\` values.
type PgLargeobjectsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgLargeobject\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgLargeobject\` and cursor to aid in pagination.
  edges: [PgLargeobjectsEdge]

  # A list of \`PgLargeobject\` objects.
  nodes: [PgLargeobject!]
}

# A \`PgLargeobject\` edge in the connection.
type PgLargeobjectsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgLargeobject\` at the end of the edge.
  node: PgLargeobject!
}

# Methods to use when ordering \`PgLargeobject\`.
enum PgLargeobjectsOrderBy {
  NATURAL
  LOID_ASC
  LOID_DESC
  PAGENO_ASC
  PAGENO_DESC
  DATA_ASC
  DATA_DESC
}

input PgLastXactReplayTimestampInput {
  clientMutationId: String
}

type PgLastXactReplayTimestampPayload {
  clientMutationId: String
  datetime: Datetime
  query: Query
}

input PgLastXlogReceiveLocationInput {
  clientMutationId: String
}

type PgLastXlogReceiveLocationPayload {
  clientMutationId: String
  string: String
  query: Query
}

input PgLastXlogReplayLocationInput {
  clientMutationId: String
}

type PgLastXlogReplayLocationPayload {
  clientMutationId: String
  string: String
  query: Query
}

# A connection to a list of \`String\` values.
type PgListeningChannelsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`String\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`String\` and cursor to aid in pagination.
  edges: [PgListeningChannelsEdge]

  # A list of \`String\` objects.
  nodes: [String]
}

# A \`String\` edge in the connection.
type PgListeningChannelsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`String\` at the end of the edge.
  node: String
}

# Methods to use when ordering \`String\`.
enum PgListeningChannelsOrderBy {
  NATURAL
}

type PgLock {
  locktype: String
  database: Float
  relation: Float
  page: Int
  tuple: Int
  virtualxid: String
  transactionid: String
  classid: Float
  objid: Float
  objsubid: Int
  virtualtransaction: String
  pid: Int
  mode: String
  granted: Boolean
  fastpath: Boolean
}

# A connection to a list of \`PgLock\` values.
type PgLocksConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgLock\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgLock\` and cursor to aid in pagination.
  edges: [PgLocksEdge]

  # A list of \`PgLock\` objects.
  nodes: [PgLock!]
}

# A \`PgLock\` edge in the connection.
type PgLocksEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgLock\` at the end of the edge.
  node: PgLock!
}

# Methods to use when ordering \`PgLock\`.
enum PgLocksOrderBy {
  NATURAL
  LOCKTYPE_ASC
  LOCKTYPE_DESC
  DATABASE_ASC
  DATABASE_DESC
  RELATION_ASC
  RELATION_DESC
  PAGE_ASC
  PAGE_DESC
  TUPLE_ASC
  TUPLE_DESC
  VIRTUALXID_ASC
  VIRTUALXID_DESC
  TRANSACTIONID_ASC
  TRANSACTIONID_DESC
  CLASSID_ASC
  CLASSID_DESC
  OBJID_ASC
  OBJID_DESC
  OBJSUBID_ASC
  OBJSUBID_DESC
  VIRTUALTRANSACTION_ASC
  VIRTUALTRANSACTION_DESC
  PID_ASC
  PID_DESC
  MODE_ASC
  MODE_DESC
  GRANTED_ASC
  GRANTED_DESC
  FASTPATH_ASC
  FASTPATH_DESC
}

type PgMatview {
  schemaname: String
  matviewname: String
  matviewowner: String
  tablespace: String
  hasindexes: Boolean
  ispopulated: Boolean
  definition: String
}

# A connection to a list of \`PgMatview\` values.
type PgMatviewsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgMatview\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgMatview\` and cursor to aid in pagination.
  edges: [PgMatviewsEdge]

  # A list of \`PgMatview\` objects.
  nodes: [PgMatview!]
}

# A \`PgMatview\` edge in the connection.
type PgMatviewsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgMatview\` at the end of the edge.
  node: PgMatview!
}

# Methods to use when ordering \`PgMatview\`.
enum PgMatviewsOrderBy {
  NATURAL
  SCHEMANAME_ASC
  SCHEMANAME_DESC
  MATVIEWNAME_ASC
  MATVIEWNAME_DESC
  MATVIEWOWNER_ASC
  MATVIEWOWNER_DESC
  TABLESPACE_ASC
  TABLESPACE_DESC
  HASINDEXES_ASC
  HASINDEXES_DESC
  ISPOPULATED_ASC
  ISPOPULATED_DESC
  DEFINITION_ASC
  DEFINITION_DESC
}

type PgNamespace {
  nspname: String!
  nspowner: Float!
  nspacl: [String]
}

input PgNamespaceInput {
  nspname: String!
  nspowner: Float!
  nspacl: [String]
}

# A connection to a list of \`PgNamespace\` values.
type PgNamespacesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgNamespace\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgNamespace\` and cursor to aid in pagination.
  edges: [PgNamespacesEdge]

  # A list of \`PgNamespace\` objects.
  nodes: [PgNamespace!]
}

# A \`PgNamespace\` edge in the connection.
type PgNamespacesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgNamespace\` at the end of the edge.
  node: PgNamespace!
}

# Methods to use when ordering \`PgNamespace\`.
enum PgNamespacesOrderBy {
  NATURAL
  NSPNAME_ASC
  NSPNAME_DESC
  NSPOWNER_ASC
  NSPOWNER_DESC
  NSPACL_ASC
  NSPACL_DESC
}

input PgNotifyInput {
  clientMutationId: String
  arg0: String
  arg1: String
}

type PgNotifyPayload {
  clientMutationId: String
  string: String
  query: Query
}

type PgOpclass {
  opcmethod: Float!
  opcname: String!
  opcnamespace: Float!
  opcowner: Float!
  opcfamily: Float!
  opcintype: Float!
  opcdefault: Boolean!
  opckeytype: Float!
}

# A connection to a list of \`PgOpclass\` values.
type PgOpclassesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgOpclass\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgOpclass\` and cursor to aid in pagination.
  edges: [PgOpclassesEdge]

  # A list of \`PgOpclass\` objects.
  nodes: [PgOpclass!]
}

# A \`PgOpclass\` edge in the connection.
type PgOpclassesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgOpclass\` at the end of the edge.
  node: PgOpclass!
}

# Methods to use when ordering \`PgOpclass\`.
enum PgOpclassesOrderBy {
  NATURAL
  OPCMETHOD_ASC
  OPCMETHOD_DESC
  OPCNAME_ASC
  OPCNAME_DESC
  OPCNAMESPACE_ASC
  OPCNAMESPACE_DESC
  OPCOWNER_ASC
  OPCOWNER_DESC
  OPCFAMILY_ASC
  OPCFAMILY_DESC
  OPCINTYPE_ASC
  OPCINTYPE_DESC
  OPCDEFAULT_ASC
  OPCDEFAULT_DESC
  OPCKEYTYPE_ASC
  OPCKEYTYPE_DESC
}

input PgOpclassInput {
  opcmethod: Float!
  opcname: String!
  opcnamespace: Float!
  opcowner: Float!
  opcfamily: Float!
  opcintype: Float!
  opcdefault: Boolean!
  opckeytype: Float!
}

type PgOperator {
  oprname: String!
  oprnamespace: Float!
  oprowner: Float!
  oprkind: String!
  oprcanmerge: Boolean!
  oprcanhash: Boolean!
  oprleft: Float!
  oprright: Float!
  oprresult: Float!
  oprcom: Float!
  oprnegate: Float!
  oprcode: Float!
  oprrest: Float!
  oprjoin: Float!
}

input PgOperatorInput {
  oprname: String!
  oprnamespace: Float!
  oprowner: Float!
  oprkind: String!
  oprcanmerge: Boolean!
  oprcanhash: Boolean!
  oprleft: Float!
  oprright: Float!
  oprresult: Float!
  oprcom: Float!
  oprnegate: Float!
  oprcode: Float!
  oprrest: Float!
  oprjoin: Float!
}

# A connection to a list of \`PgOperator\` values.
type PgOperatorsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgOperator\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgOperator\` and cursor to aid in pagination.
  edges: [PgOperatorsEdge]

  # A list of \`PgOperator\` objects.
  nodes: [PgOperator!]
}

# A \`PgOperator\` edge in the connection.
type PgOperatorsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgOperator\` at the end of the edge.
  node: PgOperator!
}

# Methods to use when ordering \`PgOperator\`.
enum PgOperatorsOrderBy {
  NATURAL
  OPRNAME_ASC
  OPRNAME_DESC
  OPRNAMESPACE_ASC
  OPRNAMESPACE_DESC
  OPROWNER_ASC
  OPROWNER_DESC
  OPRKIND_ASC
  OPRKIND_DESC
  OPRCANMERGE_ASC
  OPRCANMERGE_DESC
  OPRCANHASH_ASC
  OPRCANHASH_DESC
  OPRLEFT_ASC
  OPRLEFT_DESC
  OPRRIGHT_ASC
  OPRRIGHT_DESC
  OPRRESULT_ASC
  OPRRESULT_DESC
  OPRCOM_ASC
  OPRCOM_DESC
  OPRNEGATE_ASC
  OPRNEGATE_DESC
  OPRCODE_ASC
  OPRCODE_DESC
  OPRREST_ASC
  OPRREST_DESC
  OPRJOIN_ASC
  OPRJOIN_DESC
}

# A connection to a list of \`PgOpfamily\` values.
type PgOpfamiliesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgOpfamily\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgOpfamily\` and cursor to aid in pagination.
  edges: [PgOpfamiliesEdge]

  # A list of \`PgOpfamily\` objects.
  nodes: [PgOpfamily!]
}

# A \`PgOpfamily\` edge in the connection.
type PgOpfamiliesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgOpfamily\` at the end of the edge.
  node: PgOpfamily!
}

# Methods to use when ordering \`PgOpfamily\`.
enum PgOpfamiliesOrderBy {
  NATURAL
  OPFMETHOD_ASC
  OPFMETHOD_DESC
  OPFNAME_ASC
  OPFNAME_DESC
  OPFNAMESPACE_ASC
  OPFNAMESPACE_DESC
  OPFOWNER_ASC
  OPFOWNER_DESC
}

type PgOpfamily {
  opfmethod: Float!
  opfname: String!
  opfnamespace: Float!
  opfowner: Float!
}

input PgOpfamilyInput {
  opfmethod: Float!
  opfname: String!
  opfnamespace: Float!
  opfowner: Float!
}

type PgPltemplate {
  tmplname: String!
  tmpltrusted: Boolean!
  tmpldbacreate: Boolean!
  tmplhandler: String!
  tmplinline: String
  tmplvalidator: String
  tmpllibrary: String!
  tmplacl: [String]
}

input PgPltemplateInput {
  tmplname: String!
  tmpltrusted: Boolean!
  tmpldbacreate: Boolean!
  tmplhandler: String!
  tmplinline: String
  tmplvalidator: String
  tmpllibrary: String!
  tmplacl: [String]
}

# A connection to a list of \`PgPltemplate\` values.
type PgPltemplatesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgPltemplate\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgPltemplate\` and cursor to aid in pagination.
  edges: [PgPltemplatesEdge]

  # A list of \`PgPltemplate\` objects.
  nodes: [PgPltemplate!]
}

# A \`PgPltemplate\` edge in the connection.
type PgPltemplatesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgPltemplate\` at the end of the edge.
  node: PgPltemplate!
}

# Methods to use when ordering \`PgPltemplate\`.
enum PgPltemplatesOrderBy {
  NATURAL
  TMPLNAME_ASC
  TMPLNAME_DESC
  TMPLTRUSTED_ASC
  TMPLTRUSTED_DESC
  TMPLDBACREATE_ASC
  TMPLDBACREATE_DESC
  TMPLHANDLER_ASC
  TMPLHANDLER_DESC
  TMPLINLINE_ASC
  TMPLINLINE_DESC
  TMPLVALIDATOR_ASC
  TMPLVALIDATOR_DESC
  TMPLLIBRARY_ASC
  TMPLLIBRARY_DESC
  TMPLACL_ASC
  TMPLACL_DESC
}

type PgPolicies {
  schemaname: String
  tablename: String
  policyname: String
  roles: [String]
  cmd: String
  qual: String
  withCheck: String
}

# A connection to a list of \`PgPolicies\` values.
type PgPoliciesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgPolicies\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgPolicies\` and cursor to aid in pagination.
  edges: [PgPoliciesEdge]

  # A list of \`PgPolicies\` objects.
  nodes: [PgPolicies!]
}

# A \`PgPolicies\` edge in the connection.
type PgPoliciesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgPolicies\` at the end of the edge.
  node: PgPolicies!
}

# Methods to use when ordering \`PgPolicies\`.
enum PgPoliciesOrderBy {
  NATURAL
  SCHEMANAME_ASC
  SCHEMANAME_DESC
  TABLENAME_ASC
  TABLENAME_DESC
  POLICYNAME_ASC
  POLICYNAME_DESC
  ROLES_ASC
  ROLES_DESC
  CMD_ASC
  CMD_DESC
  QUAL_ASC
  QUAL_DESC
  WITH_CHECK_ASC
  WITH_CHECK_DESC
}

type PgPolicy {
  polname: String!
  polrelid: Float!
  polcmd: String!
  polroles: [Float]
  polqual: String
  polwithcheck: String
}

# A connection to a list of \`PgPolicy\` values.
type PgPolicyConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgPolicy\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgPolicy\` and cursor to aid in pagination.
  edges: [PgPolicyEdge]

  # A list of \`PgPolicy\` objects.
  nodes: [PgPolicy!]
}

# A \`PgPolicy\` edge in the connection.
type PgPolicyEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgPolicy\` at the end of the edge.
  node: PgPolicy!
}

input PgPolicyInput {
  polname: String!
  polrelid: Float!
  polcmd: String!
  polroles: [Float]
  polqual: String
  polwithcheck: String
}

# Methods to use when ordering \`PgPolicy\`.
enum PgPolicyOrderBy {
  NATURAL
  POLNAME_ASC
  POLNAME_DESC
  POLRELID_ASC
  POLRELID_DESC
  POLCMD_ASC
  POLCMD_DESC
  POLROLES_ASC
  POLROLES_DESC
  POLQUAL_ASC
  POLQUAL_DESC
  POLWITHCHECK_ASC
  POLWITHCHECK_DESC
}

type PgPreparedStatement {
  name: String
  statement: String
  prepareTime: Datetime
  parameterTypes: [Float]
  fromSql: Boolean
}

# A connection to a list of \`PgPreparedStatement\` values.
type PgPreparedStatementsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgPreparedStatement\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgPreparedStatement\` and cursor to aid in pagination.
  edges: [PgPreparedStatementsEdge]

  # A list of \`PgPreparedStatement\` objects.
  nodes: [PgPreparedStatement!]
}

# A \`PgPreparedStatement\` edge in the connection.
type PgPreparedStatementsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgPreparedStatement\` at the end of the edge.
  node: PgPreparedStatement!
}

# Methods to use when ordering \`PgPreparedStatement\`.
enum PgPreparedStatementsOrderBy {
  NATURAL
  NAME_ASC
  NAME_DESC
  STATEMENT_ASC
  STATEMENT_DESC
  PREPARE_TIME_ASC
  PREPARE_TIME_DESC
  PARAMETER_TYPES_ASC
  PARAMETER_TYPES_DESC
  FROM_SQL_ASC
  FROM_SQL_DESC
}

type PgPreparedXact {
  transaction: String
  gid: String
  prepared: Datetime
  owner: String
  database: String
}

# A connection to a list of \`PgPreparedXact\` values.
type PgPreparedXactsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgPreparedXact\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgPreparedXact\` and cursor to aid in pagination.
  edges: [PgPreparedXactsEdge]

  # A list of \`PgPreparedXact\` objects.
  nodes: [PgPreparedXact!]
}

# A \`PgPreparedXact\` edge in the connection.
type PgPreparedXactsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgPreparedXact\` at the end of the edge.
  node: PgPreparedXact!
}

# Methods to use when ordering \`PgPreparedXact\`.
enum PgPreparedXactsOrderBy {
  NATURAL
  TRANSACTION_ASC
  TRANSACTION_DESC
  GID_ASC
  GID_DESC
  PREPARED_ASC
  PREPARED_DESC
  OWNER_ASC
  OWNER_DESC
  DATABASE_ASC
  DATABASE_DESC
}

type PgProc {
  proname: String!
  pronamespace: Float!
  proowner: Float!
  prolang: Float!
  procost: Float!
  prorows: Float!
  provariadic: Float!
  protransform: Float!
  proisagg: Boolean!
  proiswindow: Boolean!
  prosecdef: Boolean!
  proleakproof: Boolean!
  proisstrict: Boolean!
  proretset: Boolean!
  provolatile: String!
  pronargs: Int!
  pronargdefaults: Int!
  prorettype: Float!
  proargtypes: [Float]!
  proallargtypes: [Float]
  proargmodes: [String]
  proargnames: [String]
  proargdefaults: String
  protrftypes: [Float]
  prosrc: String!
  probin: String
  proconfig: [String]
  proacl: [String]
}

input PgProcInput {
  proname: String!
  pronamespace: Float!
  proowner: Float!
  prolang: Float!
  procost: Float!
  prorows: Float!
  provariadic: Float!
  protransform: Float!
  proisagg: Boolean!
  proiswindow: Boolean!
  prosecdef: Boolean!
  proleakproof: Boolean!
  proisstrict: Boolean!
  proretset: Boolean!
  provolatile: String!
  pronargs: Int!
  pronargdefaults: Int!
  prorettype: Float!
  proargtypes: [Float]!
  proallargtypes: [Float]
  proargmodes: [String]
  proargnames: [String]
  proargdefaults: String
  protrftypes: [Float]
  prosrc: String!
  probin: String
  proconfig: [String]
  proacl: [String]
}

# A connection to a list of \`PgProc\` values.
type PgProcsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgProc\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgProc\` and cursor to aid in pagination.
  edges: [PgProcsEdge]

  # A list of \`PgProc\` objects.
  nodes: [PgProc!]
}

# A \`PgProc\` edge in the connection.
type PgProcsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgProc\` at the end of the edge.
  node: PgProc!
}

# Methods to use when ordering \`PgProc\`.
enum PgProcsOrderBy {
  NATURAL
  PRONAME_ASC
  PRONAME_DESC
  PRONAMESPACE_ASC
  PRONAMESPACE_DESC
  PROOWNER_ASC
  PROOWNER_DESC
  PROLANG_ASC
  PROLANG_DESC
  PROCOST_ASC
  PROCOST_DESC
  PROROWS_ASC
  PROROWS_DESC
  PROVARIADIC_ASC
  PROVARIADIC_DESC
  PROTRANSFORM_ASC
  PROTRANSFORM_DESC
  PROISAGG_ASC
  PROISAGG_DESC
  PROISWINDOW_ASC
  PROISWINDOW_DESC
  PROSECDEF_ASC
  PROSECDEF_DESC
  PROLEAKPROOF_ASC
  PROLEAKPROOF_DESC
  PROISSTRICT_ASC
  PROISSTRICT_DESC
  PRORETSET_ASC
  PRORETSET_DESC
  PROVOLATILE_ASC
  PROVOLATILE_DESC
  PRONARGS_ASC
  PRONARGS_DESC
  PRONARGDEFAULTS_ASC
  PRONARGDEFAULTS_DESC
  PRORETTYPE_ASC
  PRORETTYPE_DESC
  PROARGTYPES_ASC
  PROARGTYPES_DESC
  PROALLARGTYPES_ASC
  PROALLARGTYPES_DESC
  PROARGMODES_ASC
  PROARGMODES_DESC
  PROARGNAMES_ASC
  PROARGNAMES_DESC
  PROARGDEFAULTS_ASC
  PROARGDEFAULTS_DESC
  PROTRFTYPES_ASC
  PROTRFTYPES_DESC
  PROSRC_ASC
  PROSRC_DESC
  PROBIN_ASC
  PROBIN_DESC
  PROCONFIG_ASC
  PROCONFIG_DESC
  PROACL_ASC
  PROACL_DESC
}

type PgRange {
  rngtypid: Float!
  rngsubtype: Float!
  rngcollation: Float!
  rngsubopc: Float!
  rngcanonical: Float!
  rngsubdiff: Float!
}

input PgRangeInput {
  rngtypid: Float!
  rngsubtype: Float!
  rngcollation: Float!
  rngsubopc: Float!
  rngcanonical: Float!
  rngsubdiff: Float!
}

# A connection to a list of \`PgRange\` values.
type PgRangesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgRange\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgRange\` and cursor to aid in pagination.
  edges: [PgRangesEdge]

  # A list of \`PgRange\` objects.
  nodes: [PgRange!]
}

# A \`PgRange\` edge in the connection.
type PgRangesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgRange\` at the end of the edge.
  node: PgRange!
}

# Methods to use when ordering \`PgRange\`.
enum PgRangesOrderBy {
  NATURAL
  RNGTYPID_ASC
  RNGTYPID_DESC
  RNGSUBTYPE_ASC
  RNGSUBTYPE_DESC
  RNGCOLLATION_ASC
  RNGCOLLATION_DESC
  RNGSUBOPC_ASC
  RNGSUBOPC_DESC
  RNGCANONICAL_ASC
  RNGCANONICAL_DESC
  RNGSUBDIFF_ASC
  RNGSUBDIFF_DESC
}

input PgReloadConfInput {
  clientMutationId: String
}

type PgReloadConfPayload {
  clientMutationId: String
  boolean: Boolean
  query: Query
}

type PgReplicationOrigin {
  roident: Float!
  roname: String!
}

input PgReplicationOriginAdvanceInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
}

type PgReplicationOriginAdvancePayload {
  clientMutationId: String
  string: String
  query: Query
}

input PgReplicationOriginCreateInput {
  clientMutationId: String
  arg0: String!
}

type PgReplicationOriginCreatePayload {
  clientMutationId: String
  float: Float
  query: Query
}

input PgReplicationOriginDropInput {
  clientMutationId: String
  arg0: String!
}

type PgReplicationOriginDropPayload {
  clientMutationId: String
  string: String
  query: Query
}

input PgReplicationOriginInput {
  roident: Float!
  roname: String!
}

input PgReplicationOriginProgressInput {
  clientMutationId: String
  arg0: String!
  arg1: Boolean!
}

type PgReplicationOriginProgressPayload {
  clientMutationId: String
  string: String
  query: Query
}

# A connection to a list of \`PgReplicationOrigin\` values.
type PgReplicationOriginsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgReplicationOrigin\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgReplicationOrigin\` and cursor to aid in pagination.
  edges: [PgReplicationOriginsEdge]

  # A list of \`PgReplicationOrigin\` objects.
  nodes: [PgReplicationOrigin!]
}

# A \`PgReplicationOrigin\` edge in the connection.
type PgReplicationOriginsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgReplicationOrigin\` at the end of the edge.
  node: PgReplicationOrigin!
}

input PgReplicationOriginSessionIsSetupInput {
  clientMutationId: String
}

type PgReplicationOriginSessionIsSetupPayload {
  clientMutationId: String
  boolean: Boolean
  query: Query
}

input PgReplicationOriginSessionProgressInput {
  clientMutationId: String
  arg0: Boolean!
}

type PgReplicationOriginSessionProgressPayload {
  clientMutationId: String
  string: String
  query: Query
}

input PgReplicationOriginSessionResetInput {
  clientMutationId: String
}

type PgReplicationOriginSessionResetPayload {
  clientMutationId: String
  string: String
  query: Query
}

input PgReplicationOriginSessionSetupInput {
  clientMutationId: String
  arg0: String!
}

type PgReplicationOriginSessionSetupPayload {
  clientMutationId: String
  string: String
  query: Query
}

# Methods to use when ordering \`PgReplicationOrigin\`.
enum PgReplicationOriginsOrderBy {
  NATURAL
  ROIDENT_ASC
  ROIDENT_DESC
  RONAME_ASC
  RONAME_DESC
}

type PgReplicationOriginStatus {
  localId: Float
  externalId: String
  remoteLsn: String
  localLsn: String
}

# A connection to a list of \`PgReplicationOriginStatus\` values.
type PgReplicationOriginStatusesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgReplicationOriginStatus\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgReplicationOriginStatus\` and cursor to aid in pagination.
  edges: [PgReplicationOriginStatusesEdge]

  # A list of \`PgReplicationOriginStatus\` objects.
  nodes: [PgReplicationOriginStatus!]
}

# A \`PgReplicationOriginStatus\` edge in the connection.
type PgReplicationOriginStatusesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgReplicationOriginStatus\` at the end of the edge.
  node: PgReplicationOriginStatus!
}

# Methods to use when ordering \`PgReplicationOriginStatus\`.
enum PgReplicationOriginStatusesOrderBy {
  NATURAL
  LOCAL_ID_ASC
  LOCAL_ID_DESC
  EXTERNAL_ID_ASC
  EXTERNAL_ID_DESC
  REMOTE_LSN_ASC
  REMOTE_LSN_DESC
  LOCAL_LSN_ASC
  LOCAL_LSN_DESC
}

input PgReplicationOriginXactResetInput {
  clientMutationId: String
  arg0: String!
  arg1: Datetime!
}

type PgReplicationOriginXactResetPayload {
  clientMutationId: String
  string: String
  query: Query
}

input PgReplicationOriginXactSetupInput {
  clientMutationId: String
  arg0: String!
  arg1: Datetime!
}

type PgReplicationOriginXactSetupPayload {
  clientMutationId: String
  string: String
  query: Query
}

type PgReplicationSlot {
  slotName: String
  plugin: String
  slotType: String
  datoid: Float
  database: String
  active: Boolean
  activePid: Int
  xmin: String
  catalogXmin: String
  restartLsn: String
}

# A connection to a list of \`PgReplicationSlot\` values.
type PgReplicationSlotsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgReplicationSlot\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgReplicationSlot\` and cursor to aid in pagination.
  edges: [PgReplicationSlotsEdge]

  # A list of \`PgReplicationSlot\` objects.
  nodes: [PgReplicationSlot!]
}

# A \`PgReplicationSlot\` edge in the connection.
type PgReplicationSlotsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgReplicationSlot\` at the end of the edge.
  node: PgReplicationSlot!
}

# Methods to use when ordering \`PgReplicationSlot\`.
enum PgReplicationSlotsOrderBy {
  NATURAL
  SLOT_NAME_ASC
  SLOT_NAME_DESC
  PLUGIN_ASC
  PLUGIN_DESC
  SLOT_TYPE_ASC
  SLOT_TYPE_DESC
  DATOID_ASC
  DATOID_DESC
  DATABASE_ASC
  DATABASE_DESC
  ACTIVE_ASC
  ACTIVE_DESC
  ACTIVE_PID_ASC
  ACTIVE_PID_DESC
  XMIN_ASC
  XMIN_DESC
  CATALOG_XMIN_ASC
  CATALOG_XMIN_DESC
  RESTART_LSN_ASC
  RESTART_LSN_DESC
}

type PgRewrite {
  rulename: String!
  evClass: Float!
  evType: String!
  evEnabled: String!
  isInstead: Boolean!
  evQual: String
  evAction: String
}

input PgRewriteInput {
  rulename: String!
  evClass: Float!
  evType: String!
  evEnabled: String!
  isInstead: Boolean!
  evQual: String
  evAction: String
}

# A connection to a list of \`PgRewrite\` values.
type PgRewritesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgRewrite\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgRewrite\` and cursor to aid in pagination.
  edges: [PgRewritesEdge]

  # A list of \`PgRewrite\` objects.
  nodes: [PgRewrite!]
}

# A \`PgRewrite\` edge in the connection.
type PgRewritesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgRewrite\` at the end of the edge.
  node: PgRewrite!
}

# Methods to use when ordering \`PgRewrite\`.
enum PgRewritesOrderBy {
  NATURAL
  RULENAME_ASC
  RULENAME_DESC
  EV_CLASS_ASC
  EV_CLASS_DESC
  EV_TYPE_ASC
  EV_TYPE_DESC
  EV_ENABLED_ASC
  EV_ENABLED_DESC
  IS_INSTEAD_ASC
  IS_INSTEAD_DESC
  EV_QUAL_ASC
  EV_QUAL_DESC
  EV_ACTION_ASC
  EV_ACTION_DESC
}

type PgRole {
  rolname: String
  rolsuper: Boolean
  rolinherit: Boolean
  rolcreaterole: Boolean
  rolcreatedb: Boolean
  rolcanlogin: Boolean
  rolreplication: Boolean
  rolconnlimit: Int
  rolpassword: String
  rolvaliduntil: Datetime
  rolbypassrls: Boolean
  rolconfig: [String]
  oid: Float
}

# A connection to a list of \`PgRole\` values.
type PgRolesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgRole\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgRole\` and cursor to aid in pagination.
  edges: [PgRolesEdge]

  # A list of \`PgRole\` objects.
  nodes: [PgRole!]
}

# A \`PgRole\` edge in the connection.
type PgRolesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgRole\` at the end of the edge.
  node: PgRole!
}

# Methods to use when ordering \`PgRole\`.
enum PgRolesOrderBy {
  NATURAL
  ROLNAME_ASC
  ROLNAME_DESC
  ROLSUPER_ASC
  ROLSUPER_DESC
  ROLINHERIT_ASC
  ROLINHERIT_DESC
  ROLCREATEROLE_ASC
  ROLCREATEROLE_DESC
  ROLCREATEDB_ASC
  ROLCREATEDB_DESC
  ROLCANLOGIN_ASC
  ROLCANLOGIN_DESC
  ROLREPLICATION_ASC
  ROLREPLICATION_DESC
  ROLCONNLIMIT_ASC
  ROLCONNLIMIT_DESC
  ROLPASSWORD_ASC
  ROLPASSWORD_DESC
  ROLVALIDUNTIL_ASC
  ROLVALIDUNTIL_DESC
  ROLBYPASSRLS_ASC
  ROLBYPASSRLS_DESC
  ROLCONFIG_ASC
  ROLCONFIG_DESC
  OID_ASC
  OID_DESC
}

input PgRotateLogfileInput {
  clientMutationId: String
}

type PgRotateLogfilePayload {
  clientMutationId: String
  boolean: Boolean
  query: Query
}

type PgRule {
  schemaname: String
  tablename: String
  rulename: String
  definition: String
}

# A connection to a list of \`PgRule\` values.
type PgRulesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgRule\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgRule\` and cursor to aid in pagination.
  edges: [PgRulesEdge]

  # A list of \`PgRule\` objects.
  nodes: [PgRule!]
}

# A \`PgRule\` edge in the connection.
type PgRulesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgRule\` at the end of the edge.
  node: PgRule!
}

# Methods to use when ordering \`PgRule\`.
enum PgRulesOrderBy {
  NATURAL
  SCHEMANAME_ASC
  SCHEMANAME_DESC
  TABLENAME_ASC
  TABLENAME_DESC
  RULENAME_ASC
  RULENAME_DESC
  DEFINITION_ASC
  DEFINITION_DESC
}

type PgSeclabel {
  objoid: Float!
  classoid: Float!
  objsubid: Int!
  provider: String!
  label: String!
}

# A connection to a list of \`PgSeclabel\` values.
type PgSeclabelConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgSeclabel\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgSeclabel\` and cursor to aid in pagination.
  edges: [PgSeclabelEdge]

  # A list of \`PgSeclabel\` objects.
  nodes: [PgSeclabel!]
}

# A \`PgSeclabel\` edge in the connection.
type PgSeclabelEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgSeclabel\` at the end of the edge.
  node: PgSeclabel!
}

input PgSeclabelInput {
  objoid: Float!
  classoid: Float!
  objsubid: Int!
  provider: String!
  label: String!
}

# Methods to use when ordering \`PgSeclabel\`.
enum PgSeclabelOrderBy {
  NATURAL
  OBJOID_ASC
  OBJOID_DESC
  CLASSOID_ASC
  CLASSOID_DESC
  OBJSUBID_ASC
  OBJSUBID_DESC
  PROVIDER_ASC
  PROVIDER_DESC
  LABEL_ASC
  LABEL_DESC
}

type PgSeclabels {
  objoid: Float
  classoid: Float
  objsubid: Int
  objtype: String
  objnamespace: Float
  objname: String
  provider: String
  label: String
}

# A connection to a list of \`PgSeclabels\` values.
type PgSeclabelsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgSeclabels\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgSeclabels\` and cursor to aid in pagination.
  edges: [PgSeclabelsEdge]

  # A list of \`PgSeclabels\` objects.
  nodes: [PgSeclabels!]
}

# A \`PgSeclabels\` edge in the connection.
type PgSeclabelsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgSeclabels\` at the end of the edge.
  node: PgSeclabels!
}

# Methods to use when ordering \`PgSeclabels\`.
enum PgSeclabelsOrderBy {
  NATURAL
  OBJOID_ASC
  OBJOID_DESC
  CLASSOID_ASC
  CLASSOID_DESC
  OBJSUBID_ASC
  OBJSUBID_DESC
  OBJTYPE_ASC
  OBJTYPE_DESC
  OBJNAMESPACE_ASC
  OBJNAMESPACE_DESC
  OBJNAME_ASC
  OBJNAME_DESC
  PROVIDER_ASC
  PROVIDER_DESC
  LABEL_ASC
  LABEL_DESC
}

type PgSetting {
  name: String
  setting: String
  unit: String
  category: String
  shortDesc: String
  extraDesc: String
  context: String
  vartype: String
  source: String
  minVal: String
  maxVal: String
  enumvals: [String]
  bootVal: String
  resetVal: String
  sourcefile: String
  sourceline: Int
  pendingRestart: Boolean
}

# A connection to a list of \`PgSetting\` values.
type PgSettingsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgSetting\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgSetting\` and cursor to aid in pagination.
  edges: [PgSettingsEdge]

  # A list of \`PgSetting\` objects.
  nodes: [PgSetting!]
}

# A \`PgSetting\` edge in the connection.
type PgSettingsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgSetting\` at the end of the edge.
  node: PgSetting!
}

# Methods to use when ordering \`PgSetting\`.
enum PgSettingsOrderBy {
  NATURAL
  NAME_ASC
  NAME_DESC
  SETTING_ASC
  SETTING_DESC
  UNIT_ASC
  UNIT_DESC
  CATEGORY_ASC
  CATEGORY_DESC
  SHORT_DESC_ASC
  SHORT_DESC_DESC
  EXTRA_DESC_ASC
  EXTRA_DESC_DESC
  CONTEXT_ASC
  CONTEXT_DESC
  VARTYPE_ASC
  VARTYPE_DESC
  SOURCE_ASC
  SOURCE_DESC
  MIN_VAL_ASC
  MIN_VAL_DESC
  MAX_VAL_ASC
  MAX_VAL_DESC
  ENUMVALS_ASC
  ENUMVALS_DESC
  BOOT_VAL_ASC
  BOOT_VAL_DESC
  RESET_VAL_ASC
  RESET_VAL_DESC
  SOURCEFILE_ASC
  SOURCEFILE_DESC
  SOURCELINE_ASC
  SOURCELINE_DESC
  PENDING_RESTART_ASC
  PENDING_RESTART_DESC
}

type PgShadow {
  usename: String
  usesysid: Float
  usecreatedb: Boolean
  usesuper: Boolean
  userepl: Boolean
  usebypassrls: Boolean
  passwd: String
  valuntil: String
  useconfig: [String]
}

# A connection to a list of \`PgShadow\` values.
type PgShadowsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgShadow\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgShadow\` and cursor to aid in pagination.
  edges: [PgShadowsEdge]

  # A list of \`PgShadow\` objects.
  nodes: [PgShadow!]
}

# A \`PgShadow\` edge in the connection.
type PgShadowsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgShadow\` at the end of the edge.
  node: PgShadow!
}

# Methods to use when ordering \`PgShadow\`.
enum PgShadowsOrderBy {
  NATURAL
  USENAME_ASC
  USENAME_DESC
  USESYSID_ASC
  USESYSID_DESC
  USECREATEDB_ASC
  USECREATEDB_DESC
  USESUPER_ASC
  USESUPER_DESC
  USEREPL_ASC
  USEREPL_DESC
  USEBYPASSRLS_ASC
  USEBYPASSRLS_DESC
  PASSWD_ASC
  PASSWD_DESC
  VALUNTIL_ASC
  VALUNTIL_DESC
  USECONFIG_ASC
  USECONFIG_DESC
}

type PgShdepend {
  dbid: Float!
  classid: Float!
  objid: Float!
  objsubid: Int!
  refclassid: Float!
  refobjid: Float!
  deptype: String!
}

input PgShdependInput {
  dbid: Float!
  classid: Float!
  objid: Float!
  objsubid: Int!
  refclassid: Float!
  refobjid: Float!
  deptype: String!
}

# A connection to a list of \`PgShdepend\` values.
type PgShdependsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgShdepend\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgShdepend\` and cursor to aid in pagination.
  edges: [PgShdependsEdge]

  # A list of \`PgShdepend\` objects.
  nodes: [PgShdepend!]
}

# A \`PgShdepend\` edge in the connection.
type PgShdependsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgShdepend\` at the end of the edge.
  node: PgShdepend!
}

# Methods to use when ordering \`PgShdepend\`.
enum PgShdependsOrderBy {
  NATURAL
  DBID_ASC
  DBID_DESC
  CLASSID_ASC
  CLASSID_DESC
  OBJID_ASC
  OBJID_DESC
  OBJSUBID_ASC
  OBJSUBID_DESC
  REFCLASSID_ASC
  REFCLASSID_DESC
  REFOBJID_ASC
  REFOBJID_DESC
  DEPTYPE_ASC
  DEPTYPE_DESC
}

type PgShdescription {
  objoid: Float!
  classoid: Float!
  description: String!
}

input PgShdescriptionInput {
  objoid: Float!
  classoid: Float!
  description: String!
}

# A connection to a list of \`PgShdescription\` values.
type PgShdescriptionsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgShdescription\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgShdescription\` and cursor to aid in pagination.
  edges: [PgShdescriptionsEdge]

  # A list of \`PgShdescription\` objects.
  nodes: [PgShdescription!]
}

# A \`PgShdescription\` edge in the connection.
type PgShdescriptionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgShdescription\` at the end of the edge.
  node: PgShdescription!
}

# Methods to use when ordering \`PgShdescription\`.
enum PgShdescriptionsOrderBy {
  NATURAL
  OBJOID_ASC
  OBJOID_DESC
  CLASSOID_ASC
  CLASSOID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
}

type PgShseclabel {
  objoid: Float!
  classoid: Float!
  provider: String!
  label: String!
}

input PgShseclabelInput {
  objoid: Float!
  classoid: Float!
  provider: String!
  label: String!
}

# A connection to a list of \`PgShseclabel\` values.
type PgShseclabelsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgShseclabel\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgShseclabel\` and cursor to aid in pagination.
  edges: [PgShseclabelsEdge]

  # A list of \`PgShseclabel\` objects.
  nodes: [PgShseclabel!]
}

# A \`PgShseclabel\` edge in the connection.
type PgShseclabelsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgShseclabel\` at the end of the edge.
  node: PgShseclabel!
}

# Methods to use when ordering \`PgShseclabel\`.
enum PgShseclabelsOrderBy {
  NATURAL
  OBJOID_ASC
  OBJOID_DESC
  CLASSOID_ASC
  CLASSOID_DESC
  PROVIDER_ASC
  PROVIDER_DESC
  LABEL_ASC
  LABEL_DESC
}

input PgSleepForInput {
  clientMutationId: String
  arg0: IntervalInput!
}

type PgSleepForPayload {
  clientMutationId: String
  string: String
  query: Query
}

input PgSleepInput {
  clientMutationId: String
  arg0: Float!
}

type PgSleepPayload {
  clientMutationId: String
  string: String
  query: Query
}

input PgSleepUntilInput {
  clientMutationId: String
  arg0: Datetime!
}

type PgSleepUntilPayload {
  clientMutationId: String
  string: String
  query: Query
}

input PgStartBackupInput {
  clientMutationId: String
  label: String!
  fast: Boolean!
}

type PgStartBackupPayload {
  clientMutationId: String
  string: String
  query: Query
}

type PgStat {
  schemaname: String
  tablename: String
  attname: String
  inherited: Boolean
  nullFrac: Float
  avgWidth: Int
  nDistinct: Float
  mostCommonVals: String
  mostCommonFreqs: [Float]
  histogramBounds: String
  correlation: Float
  mostCommonElems: String
  mostCommonElemFreqs: [Float]
  elemCountHistogram: [Float]
}

# A connection to a list of \`PgStatActivity\` values.
type PgStatActivitiesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatActivity\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatActivity\` and cursor to aid in pagination.
  edges: [PgStatActivitiesEdge]

  # A list of \`PgStatActivity\` objects.
  nodes: [PgStatActivity!]
}

# A \`PgStatActivity\` edge in the connection.
type PgStatActivitiesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatActivity\` at the end of the edge.
  node: PgStatActivity!
}

# Methods to use when ordering \`PgStatActivity\`.
enum PgStatActivitiesOrderBy {
  NATURAL
  DATID_ASC
  DATID_DESC
  DATNAME_ASC
  DATNAME_DESC
  PID_ASC
  PID_DESC
  USESYSID_ASC
  USESYSID_DESC
  USENAME_ASC
  USENAME_DESC
  APPLICATION_NAME_ASC
  APPLICATION_NAME_DESC
  CLIENT_ADDR_ASC
  CLIENT_ADDR_DESC
  CLIENT_HOSTNAME_ASC
  CLIENT_HOSTNAME_DESC
  CLIENT_PORT_ASC
  CLIENT_PORT_DESC
  BACKEND_START_ASC
  BACKEND_START_DESC
  XACT_START_ASC
  XACT_START_DESC
  QUERY_START_ASC
  QUERY_START_DESC
  STATE_CHANGE_ASC
  STATE_CHANGE_DESC
  WAITING_ASC
  WAITING_DESC
  STATE_ASC
  STATE_DESC
  BACKEND_XID_ASC
  BACKEND_XID_DESC
  BACKEND_XMIN_ASC
  BACKEND_XMIN_DESC
  QUERY_ASC
  QUERY_DESC
}

type PgStatActivity {
  datid: Float
  datname: String
  pid: Int
  usesysid: Float
  usename: String
  applicationName: String
  clientAddr: String
  clientHostname: String
  clientPort: Int
  backendStart: Datetime
  xactStart: Datetime
  queryStart: Datetime
  stateChange: Datetime
  waiting: Boolean
  state: String
  backendXid: String
  backendXmin: String
  query: String
}

type PgStatAllIndex {
  relid: Float
  indexrelid: Float
  schemaname: String
  relname: String
  indexrelname: String
  idxScan: Int
  idxTupRead: Int
  idxTupFetch: Int
}

# A connection to a list of \`PgStatAllIndex\` values.
type PgStatAllIndexesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatAllIndex\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatAllIndex\` and cursor to aid in pagination.
  edges: [PgStatAllIndexesEdge]

  # A list of \`PgStatAllIndex\` objects.
  nodes: [PgStatAllIndex!]
}

# A \`PgStatAllIndex\` edge in the connection.
type PgStatAllIndexesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatAllIndex\` at the end of the edge.
  node: PgStatAllIndex!
}

# Methods to use when ordering \`PgStatAllIndex\`.
enum PgStatAllIndexesOrderBy {
  NATURAL
  RELID_ASC
  RELID_DESC
  INDEXRELID_ASC
  INDEXRELID_DESC
  SCHEMANAME_ASC
  SCHEMANAME_DESC
  RELNAME_ASC
  RELNAME_DESC
  INDEXRELNAME_ASC
  INDEXRELNAME_DESC
  IDX_SCAN_ASC
  IDX_SCAN_DESC
  IDX_TUP_READ_ASC
  IDX_TUP_READ_DESC
  IDX_TUP_FETCH_ASC
  IDX_TUP_FETCH_DESC
}

type PgStatAllTable {
  relid: Float
  schemaname: String
  relname: String
  seqScan: Int
  seqTupRead: Int
  idxScan: Int
  idxTupFetch: Int
  nTupIns: Int
  nTupUpd: Int
  nTupDel: Int
  nTupHotUpd: Int
  nLiveTup: Int
  nDeadTup: Int
  nModSinceAnalyze: Int
  lastVacuum: Datetime
  lastAutovacuum: Datetime
  lastAnalyze: Datetime
  lastAutoanalyze: Datetime
  vacuumCount: Int
  autovacuumCount: Int
  analyzeCount: Int
  autoanalyzeCount: Int
}

# A connection to a list of \`PgStatAllTable\` values.
type PgStatAllTablesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatAllTable\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatAllTable\` and cursor to aid in pagination.
  edges: [PgStatAllTablesEdge]

  # A list of \`PgStatAllTable\` objects.
  nodes: [PgStatAllTable!]
}

# A \`PgStatAllTable\` edge in the connection.
type PgStatAllTablesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatAllTable\` at the end of the edge.
  node: PgStatAllTable!
}

# Methods to use when ordering \`PgStatAllTable\`.
enum PgStatAllTablesOrderBy {
  NATURAL
  RELID_ASC
  RELID_DESC
  SCHEMANAME_ASC
  SCHEMANAME_DESC
  RELNAME_ASC
  RELNAME_DESC
  SEQ_SCAN_ASC
  SEQ_SCAN_DESC
  SEQ_TUP_READ_ASC
  SEQ_TUP_READ_DESC
  IDX_SCAN_ASC
  IDX_SCAN_DESC
  IDX_TUP_FETCH_ASC
  IDX_TUP_FETCH_DESC
  N_TUP_INS_ASC
  N_TUP_INS_DESC
  N_TUP_UPD_ASC
  N_TUP_UPD_DESC
  N_TUP_DEL_ASC
  N_TUP_DEL_DESC
  N_TUP_HOT_UPD_ASC
  N_TUP_HOT_UPD_DESC
  N_LIVE_TUP_ASC
  N_LIVE_TUP_DESC
  N_DEAD_TUP_ASC
  N_DEAD_TUP_DESC
  N_MOD_SINCE_ANALYZE_ASC
  N_MOD_SINCE_ANALYZE_DESC
  LAST_VACUUM_ASC
  LAST_VACUUM_DESC
  LAST_AUTOVACUUM_ASC
  LAST_AUTOVACUUM_DESC
  LAST_ANALYZE_ASC
  LAST_ANALYZE_DESC
  LAST_AUTOANALYZE_ASC
  LAST_AUTOANALYZE_DESC
  VACUUM_COUNT_ASC
  VACUUM_COUNT_DESC
  AUTOVACUUM_COUNT_ASC
  AUTOVACUUM_COUNT_DESC
  ANALYZE_COUNT_ASC
  ANALYZE_COUNT_DESC
  AUTOANALYZE_COUNT_ASC
  AUTOANALYZE_COUNT_DESC
}

type PgStatArchiver {
  archivedCount: Int
  lastArchivedWal: String
  lastArchivedTime: Datetime
  failedCount: Int
  lastFailedWal: String
  lastFailedTime: Datetime
  statsReset: Datetime
}

# A connection to a list of \`PgStatArchiver\` values.
type PgStatArchiversConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatArchiver\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatArchiver\` and cursor to aid in pagination.
  edges: [PgStatArchiversEdge]

  # A list of \`PgStatArchiver\` objects.
  nodes: [PgStatArchiver!]
}

# A \`PgStatArchiver\` edge in the connection.
type PgStatArchiversEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatArchiver\` at the end of the edge.
  node: PgStatArchiver!
}

# Methods to use when ordering \`PgStatArchiver\`.
enum PgStatArchiversOrderBy {
  NATURAL
  ARCHIVED_COUNT_ASC
  ARCHIVED_COUNT_DESC
  LAST_ARCHIVED_WAL_ASC
  LAST_ARCHIVED_WAL_DESC
  LAST_ARCHIVED_TIME_ASC
  LAST_ARCHIVED_TIME_DESC
  FAILED_COUNT_ASC
  FAILED_COUNT_DESC
  LAST_FAILED_WAL_ASC
  LAST_FAILED_WAL_DESC
  LAST_FAILED_TIME_ASC
  LAST_FAILED_TIME_DESC
  STATS_RESET_ASC
  STATS_RESET_DESC
}

type PgStatBgwriter {
  checkpointsTimed: Int
  checkpointsReq: Int
  checkpointWriteTime: Float
  checkpointSyncTime: Float
  buffersCheckpoint: Int
  buffersClean: Int
  maxwrittenClean: Int
  buffersBackend: Int
  buffersBackendFsync: Int
  buffersAlloc: Int
  statsReset: Datetime
}

# A connection to a list of \`PgStatBgwriter\` values.
type PgStatBgwritersConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatBgwriter\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatBgwriter\` and cursor to aid in pagination.
  edges: [PgStatBgwritersEdge]

  # A list of \`PgStatBgwriter\` objects.
  nodes: [PgStatBgwriter!]
}

# A \`PgStatBgwriter\` edge in the connection.
type PgStatBgwritersEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatBgwriter\` at the end of the edge.
  node: PgStatBgwriter!
}

# Methods to use when ordering \`PgStatBgwriter\`.
enum PgStatBgwritersOrderBy {
  NATURAL
  CHECKPOINTS_TIMED_ASC
  CHECKPOINTS_TIMED_DESC
  CHECKPOINTS_REQ_ASC
  CHECKPOINTS_REQ_DESC
  CHECKPOINT_WRITE_TIME_ASC
  CHECKPOINT_WRITE_TIME_DESC
  CHECKPOINT_SYNC_TIME_ASC
  CHECKPOINT_SYNC_TIME_DESC
  BUFFERS_CHECKPOINT_ASC
  BUFFERS_CHECKPOINT_DESC
  BUFFERS_CLEAN_ASC
  BUFFERS_CLEAN_DESC
  MAXWRITTEN_CLEAN_ASC
  MAXWRITTEN_CLEAN_DESC
  BUFFERS_BACKEND_ASC
  BUFFERS_BACKEND_DESC
  BUFFERS_BACKEND_FSYNC_ASC
  BUFFERS_BACKEND_FSYNC_DESC
  BUFFERS_ALLOC_ASC
  BUFFERS_ALLOC_DESC
  STATS_RESET_ASC
  STATS_RESET_DESC
}

input PgStatClearSnapshotInput {
  clientMutationId: String
}

type PgStatClearSnapshotPayload {
  clientMutationId: String
  string: String
  query: Query
}

type PgStatDatabase {
  datid: Float
  datname: String
  numbackends: Int
  xactCommit: Int
  xactRollback: Int
  blksRead: Int
  blksHit: Int
  tupReturned: Int
  tupFetched: Int
  tupInserted: Int
  tupUpdated: Int
  tupDeleted: Int
  conflicts: Int
  tempFiles: Int
  tempBytes: Int
  deadlocks: Int
  blkReadTime: Float
  blkWriteTime: Float
  statsReset: Datetime
}

type PgStatDatabaseConflict {
  datid: Float
  datname: String
  conflTablespace: Int
  conflLock: Int
  conflSnapshot: Int
  conflBufferpin: Int
  conflDeadlock: Int
}

input PgStatDatabaseConflictInput {
  datid: Float
  datname: String
  conflTablespace: Int
  conflLock: Int
  conflSnapshot: Int
  conflBufferpin: Int
  conflDeadlock: Int
}

# A connection to a list of \`PgStatDatabaseConflict\` values.
type PgStatDatabaseConflictsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatDatabaseConflict\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatDatabaseConflict\` and cursor to aid in pagination.
  edges: [PgStatDatabaseConflictsEdge]

  # A list of \`PgStatDatabaseConflict\` objects.
  nodes: [PgStatDatabaseConflict!]
}

# A \`PgStatDatabaseConflict\` edge in the connection.
type PgStatDatabaseConflictsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatDatabaseConflict\` at the end of the edge.
  node: PgStatDatabaseConflict!
}

# Methods to use when ordering \`PgStatDatabaseConflict\`.
enum PgStatDatabaseConflictsOrderBy {
  NATURAL
  DATID_ASC
  DATID_DESC
  DATNAME_ASC
  DATNAME_DESC
  CONFL_TABLESPACE_ASC
  CONFL_TABLESPACE_DESC
  CONFL_LOCK_ASC
  CONFL_LOCK_DESC
  CONFL_SNAPSHOT_ASC
  CONFL_SNAPSHOT_DESC
  CONFL_BUFFERPIN_ASC
  CONFL_BUFFERPIN_DESC
  CONFL_DEADLOCK_ASC
  CONFL_DEADLOCK_DESC
}

input PgStatDatabaseInput {
  datid: Float
  datname: String
  numbackends: Int
  xactCommit: Int
  xactRollback: Int
  blksRead: Int
  blksHit: Int
  tupReturned: Int
  tupFetched: Int
  tupInserted: Int
  tupUpdated: Int
  tupDeleted: Int
  conflicts: Int
  tempFiles: Int
  tempBytes: Int
  deadlocks: Int
  blkReadTime: Float
  blkWriteTime: Float
  statsReset: Datetime
}

# A connection to a list of \`PgStatDatabase\` values.
type PgStatDatabasesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatDatabase\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatDatabase\` and cursor to aid in pagination.
  edges: [PgStatDatabasesEdge]

  # A list of \`PgStatDatabase\` objects.
  nodes: [PgStatDatabase!]
}

# A \`PgStatDatabase\` edge in the connection.
type PgStatDatabasesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatDatabase\` at the end of the edge.
  node: PgStatDatabase!
}

# Methods to use when ordering \`PgStatDatabase\`.
enum PgStatDatabasesOrderBy {
  NATURAL
  DATID_ASC
  DATID_DESC
  DATNAME_ASC
  DATNAME_DESC
  NUMBACKENDS_ASC
  NUMBACKENDS_DESC
  XACT_COMMIT_ASC
  XACT_COMMIT_DESC
  XACT_ROLLBACK_ASC
  XACT_ROLLBACK_DESC
  BLKS_READ_ASC
  BLKS_READ_DESC
  BLKS_HIT_ASC
  BLKS_HIT_DESC
  TUP_RETURNED_ASC
  TUP_RETURNED_DESC
  TUP_FETCHED_ASC
  TUP_FETCHED_DESC
  TUP_INSERTED_ASC
  TUP_INSERTED_DESC
  TUP_UPDATED_ASC
  TUP_UPDATED_DESC
  TUP_DELETED_ASC
  TUP_DELETED_DESC
  CONFLICTS_ASC
  CONFLICTS_DESC
  TEMP_FILES_ASC
  TEMP_FILES_DESC
  TEMP_BYTES_ASC
  TEMP_BYTES_DESC
  DEADLOCKS_ASC
  DEADLOCKS_DESC
  BLK_READ_TIME_ASC
  BLK_READ_TIME_DESC
  BLK_WRITE_TIME_ASC
  BLK_WRITE_TIME_DESC
  STATS_RESET_ASC
  STATS_RESET_DESC
}

# A connection to a list of \`Int\` values.
type PgStatGetBackendIdsetConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`Int\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`Int\` and cursor to aid in pagination.
  edges: [PgStatGetBackendIdsetEdge]

  # A list of \`Int\` objects.
  nodes: [Int]
}

# A \`Int\` edge in the connection.
type PgStatGetBackendIdsetEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`Int\` at the end of the edge.
  node: Int
}

# Methods to use when ordering \`Int\`.
enum PgStatGetBackendIdsetOrderBy {
  NATURAL
}

input PgStatGetXactBlocksFetchedInput {
  clientMutationId: String
  arg0: Float!
}

type PgStatGetXactBlocksFetchedPayload {
  clientMutationId: String
  integer: Int
  query: Query
}

input PgStatGetXactBlocksHitInput {
  clientMutationId: String
  arg0: Float!
}

type PgStatGetXactBlocksHitPayload {
  clientMutationId: String
  integer: Int
  query: Query
}

input PgStatGetXactFunctionCallsInput {
  clientMutationId: String
  arg0: Float!
}

type PgStatGetXactFunctionCallsPayload {
  clientMutationId: String
  integer: Int
  query: Query
}

input PgStatGetXactFunctionSelfTimeInput {
  clientMutationId: String
  arg0: Float!
}

type PgStatGetXactFunctionSelfTimePayload {
  clientMutationId: String
  float: Float
  query: Query
}

input PgStatGetXactFunctionTotalTimeInput {
  clientMutationId: String
  arg0: Float!
}

type PgStatGetXactFunctionTotalTimePayload {
  clientMutationId: String
  float: Float
  query: Query
}

input PgStatGetXactNumscansInput {
  clientMutationId: String
  arg0: Float!
}

type PgStatGetXactNumscansPayload {
  clientMutationId: String
  integer: Int
  query: Query
}

input PgStatGetXactTuplesDeletedInput {
  clientMutationId: String
  arg0: Float!
}

type PgStatGetXactTuplesDeletedPayload {
  clientMutationId: String
  integer: Int
  query: Query
}

input PgStatGetXactTuplesFetchedInput {
  clientMutationId: String
  arg0: Float!
}

type PgStatGetXactTuplesFetchedPayload {
  clientMutationId: String
  integer: Int
  query: Query
}

input PgStatGetXactTuplesHotUpdatedInput {
  clientMutationId: String
  arg0: Float!
}

type PgStatGetXactTuplesHotUpdatedPayload {
  clientMutationId: String
  integer: Int
  query: Query
}

input PgStatGetXactTuplesInsertedInput {
  clientMutationId: String
  arg0: Float!
}

type PgStatGetXactTuplesInsertedPayload {
  clientMutationId: String
  integer: Int
  query: Query
}

input PgStatGetXactTuplesReturnedInput {
  clientMutationId: String
  arg0: Float!
}

type PgStatGetXactTuplesReturnedPayload {
  clientMutationId: String
  integer: Int
  query: Query
}

input PgStatGetXactTuplesUpdatedInput {
  clientMutationId: String
  arg0: Float!
}

type PgStatGetXactTuplesUpdatedPayload {
  clientMutationId: String
  integer: Int
  query: Query
}

type PgStatioAllIndex {
  relid: Float
  indexrelid: Float
  schemaname: String
  relname: String
  indexrelname: String
  idxBlksRead: Int
  idxBlksHit: Int
}

# A connection to a list of \`PgStatioAllIndex\` values.
type PgStatioAllIndexesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatioAllIndex\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatioAllIndex\` and cursor to aid in pagination.
  edges: [PgStatioAllIndexesEdge]

  # A list of \`PgStatioAllIndex\` objects.
  nodes: [PgStatioAllIndex!]
}

# A \`PgStatioAllIndex\` edge in the connection.
type PgStatioAllIndexesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatioAllIndex\` at the end of the edge.
  node: PgStatioAllIndex!
}

# Methods to use when ordering \`PgStatioAllIndex\`.
enum PgStatioAllIndexesOrderBy {
  NATURAL
  RELID_ASC
  RELID_DESC
  INDEXRELID_ASC
  INDEXRELID_DESC
  SCHEMANAME_ASC
  SCHEMANAME_DESC
  RELNAME_ASC
  RELNAME_DESC
  INDEXRELNAME_ASC
  INDEXRELNAME_DESC
  IDX_BLKS_READ_ASC
  IDX_BLKS_READ_DESC
  IDX_BLKS_HIT_ASC
  IDX_BLKS_HIT_DESC
}

type PgStatioAllSequence {
  relid: Float
  schemaname: String
  relname: String
  blksRead: Int
  blksHit: Int
}

# A connection to a list of \`PgStatioAllSequence\` values.
type PgStatioAllSequencesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatioAllSequence\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatioAllSequence\` and cursor to aid in pagination.
  edges: [PgStatioAllSequencesEdge]

  # A list of \`PgStatioAllSequence\` objects.
  nodes: [PgStatioAllSequence!]
}

# A \`PgStatioAllSequence\` edge in the connection.
type PgStatioAllSequencesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatioAllSequence\` at the end of the edge.
  node: PgStatioAllSequence!
}

# Methods to use when ordering \`PgStatioAllSequence\`.
enum PgStatioAllSequencesOrderBy {
  NATURAL
  RELID_ASC
  RELID_DESC
  SCHEMANAME_ASC
  SCHEMANAME_DESC
  RELNAME_ASC
  RELNAME_DESC
  BLKS_READ_ASC
  BLKS_READ_DESC
  BLKS_HIT_ASC
  BLKS_HIT_DESC
}

type PgStatioAllTable {
  relid: Float
  schemaname: String
  relname: String
  heapBlksRead: Int
  heapBlksHit: Int
  idxBlksRead: Int
  idxBlksHit: Int
  toastBlksRead: Int
  toastBlksHit: Int
  tidxBlksRead: Int
  tidxBlksHit: Int
}

# A connection to a list of \`PgStatioAllTable\` values.
type PgStatioAllTablesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatioAllTable\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatioAllTable\` and cursor to aid in pagination.
  edges: [PgStatioAllTablesEdge]

  # A list of \`PgStatioAllTable\` objects.
  nodes: [PgStatioAllTable!]
}

# A \`PgStatioAllTable\` edge in the connection.
type PgStatioAllTablesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatioAllTable\` at the end of the edge.
  node: PgStatioAllTable!
}

# Methods to use when ordering \`PgStatioAllTable\`.
enum PgStatioAllTablesOrderBy {
  NATURAL
  RELID_ASC
  RELID_DESC
  SCHEMANAME_ASC
  SCHEMANAME_DESC
  RELNAME_ASC
  RELNAME_DESC
  HEAP_BLKS_READ_ASC
  HEAP_BLKS_READ_DESC
  HEAP_BLKS_HIT_ASC
  HEAP_BLKS_HIT_DESC
  IDX_BLKS_READ_ASC
  IDX_BLKS_READ_DESC
  IDX_BLKS_HIT_ASC
  IDX_BLKS_HIT_DESC
  TOAST_BLKS_READ_ASC
  TOAST_BLKS_READ_DESC
  TOAST_BLKS_HIT_ASC
  TOAST_BLKS_HIT_DESC
  TIDX_BLKS_READ_ASC
  TIDX_BLKS_READ_DESC
  TIDX_BLKS_HIT_ASC
  TIDX_BLKS_HIT_DESC
}

type PgStatioSysIndex {
  relid: Float
  indexrelid: Float
  schemaname: String
  relname: String
  indexrelname: String
  idxBlksRead: Int
  idxBlksHit: Int
}

# A connection to a list of \`PgStatioSysIndex\` values.
type PgStatioSysIndexesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatioSysIndex\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatioSysIndex\` and cursor to aid in pagination.
  edges: [PgStatioSysIndexesEdge]

  # A list of \`PgStatioSysIndex\` objects.
  nodes: [PgStatioSysIndex!]
}

# A \`PgStatioSysIndex\` edge in the connection.
type PgStatioSysIndexesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatioSysIndex\` at the end of the edge.
  node: PgStatioSysIndex!
}

# Methods to use when ordering \`PgStatioSysIndex\`.
enum PgStatioSysIndexesOrderBy {
  NATURAL
  RELID_ASC
  RELID_DESC
  INDEXRELID_ASC
  INDEXRELID_DESC
  SCHEMANAME_ASC
  SCHEMANAME_DESC
  RELNAME_ASC
  RELNAME_DESC
  INDEXRELNAME_ASC
  INDEXRELNAME_DESC
  IDX_BLKS_READ_ASC
  IDX_BLKS_READ_DESC
  IDX_BLKS_HIT_ASC
  IDX_BLKS_HIT_DESC
}

type PgStatioSysSequence {
  relid: Float
  schemaname: String
  relname: String
  blksRead: Int
  blksHit: Int
}

# A connection to a list of \`PgStatioSysSequence\` values.
type PgStatioSysSequencesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatioSysSequence\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatioSysSequence\` and cursor to aid in pagination.
  edges: [PgStatioSysSequencesEdge]

  # A list of \`PgStatioSysSequence\` objects.
  nodes: [PgStatioSysSequence!]
}

# A \`PgStatioSysSequence\` edge in the connection.
type PgStatioSysSequencesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatioSysSequence\` at the end of the edge.
  node: PgStatioSysSequence!
}

# Methods to use when ordering \`PgStatioSysSequence\`.
enum PgStatioSysSequencesOrderBy {
  NATURAL
  RELID_ASC
  RELID_DESC
  SCHEMANAME_ASC
  SCHEMANAME_DESC
  RELNAME_ASC
  RELNAME_DESC
  BLKS_READ_ASC
  BLKS_READ_DESC
  BLKS_HIT_ASC
  BLKS_HIT_DESC
}

type PgStatioSysTable {
  relid: Float
  schemaname: String
  relname: String
  heapBlksRead: Int
  heapBlksHit: Int
  idxBlksRead: Int
  idxBlksHit: Int
  toastBlksRead: Int
  toastBlksHit: Int
  tidxBlksRead: Int
  tidxBlksHit: Int
}

# A connection to a list of \`PgStatioSysTable\` values.
type PgStatioSysTablesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatioSysTable\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatioSysTable\` and cursor to aid in pagination.
  edges: [PgStatioSysTablesEdge]

  # A list of \`PgStatioSysTable\` objects.
  nodes: [PgStatioSysTable!]
}

# A \`PgStatioSysTable\` edge in the connection.
type PgStatioSysTablesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatioSysTable\` at the end of the edge.
  node: PgStatioSysTable!
}

# Methods to use when ordering \`PgStatioSysTable\`.
enum PgStatioSysTablesOrderBy {
  NATURAL
  RELID_ASC
  RELID_DESC
  SCHEMANAME_ASC
  SCHEMANAME_DESC
  RELNAME_ASC
  RELNAME_DESC
  HEAP_BLKS_READ_ASC
  HEAP_BLKS_READ_DESC
  HEAP_BLKS_HIT_ASC
  HEAP_BLKS_HIT_DESC
  IDX_BLKS_READ_ASC
  IDX_BLKS_READ_DESC
  IDX_BLKS_HIT_ASC
  IDX_BLKS_HIT_DESC
  TOAST_BLKS_READ_ASC
  TOAST_BLKS_READ_DESC
  TOAST_BLKS_HIT_ASC
  TOAST_BLKS_HIT_DESC
  TIDX_BLKS_READ_ASC
  TIDX_BLKS_READ_DESC
  TIDX_BLKS_HIT_ASC
  TIDX_BLKS_HIT_DESC
}

type PgStatioUserIndex {
  relid: Float
  indexrelid: Float
  schemaname: String
  relname: String
  indexrelname: String
  idxBlksRead: Int
  idxBlksHit: Int
}

# A connection to a list of \`PgStatioUserIndex\` values.
type PgStatioUserIndexesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatioUserIndex\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatioUserIndex\` and cursor to aid in pagination.
  edges: [PgStatioUserIndexesEdge]

  # A list of \`PgStatioUserIndex\` objects.
  nodes: [PgStatioUserIndex!]
}

# A \`PgStatioUserIndex\` edge in the connection.
type PgStatioUserIndexesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatioUserIndex\` at the end of the edge.
  node: PgStatioUserIndex!
}

# Methods to use when ordering \`PgStatioUserIndex\`.
enum PgStatioUserIndexesOrderBy {
  NATURAL
  RELID_ASC
  RELID_DESC
  INDEXRELID_ASC
  INDEXRELID_DESC
  SCHEMANAME_ASC
  SCHEMANAME_DESC
  RELNAME_ASC
  RELNAME_DESC
  INDEXRELNAME_ASC
  INDEXRELNAME_DESC
  IDX_BLKS_READ_ASC
  IDX_BLKS_READ_DESC
  IDX_BLKS_HIT_ASC
  IDX_BLKS_HIT_DESC
}

type PgStatioUserSequence {
  relid: Float
  schemaname: String
  relname: String
  blksRead: Int
  blksHit: Int
}

# A connection to a list of \`PgStatioUserSequence\` values.
type PgStatioUserSequencesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatioUserSequence\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatioUserSequence\` and cursor to aid in pagination.
  edges: [PgStatioUserSequencesEdge]

  # A list of \`PgStatioUserSequence\` objects.
  nodes: [PgStatioUserSequence!]
}

# A \`PgStatioUserSequence\` edge in the connection.
type PgStatioUserSequencesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatioUserSequence\` at the end of the edge.
  node: PgStatioUserSequence!
}

# Methods to use when ordering \`PgStatioUserSequence\`.
enum PgStatioUserSequencesOrderBy {
  NATURAL
  RELID_ASC
  RELID_DESC
  SCHEMANAME_ASC
  SCHEMANAME_DESC
  RELNAME_ASC
  RELNAME_DESC
  BLKS_READ_ASC
  BLKS_READ_DESC
  BLKS_HIT_ASC
  BLKS_HIT_DESC
}

type PgStatioUserTable {
  relid: Float
  schemaname: String
  relname: String
  heapBlksRead: Int
  heapBlksHit: Int
  idxBlksRead: Int
  idxBlksHit: Int
  toastBlksRead: Int
  toastBlksHit: Int
  tidxBlksRead: Int
  tidxBlksHit: Int
}

# A connection to a list of \`PgStatioUserTable\` values.
type PgStatioUserTablesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatioUserTable\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatioUserTable\` and cursor to aid in pagination.
  edges: [PgStatioUserTablesEdge]

  # A list of \`PgStatioUserTable\` objects.
  nodes: [PgStatioUserTable!]
}

# A \`PgStatioUserTable\` edge in the connection.
type PgStatioUserTablesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatioUserTable\` at the end of the edge.
  node: PgStatioUserTable!
}

# Methods to use when ordering \`PgStatioUserTable\`.
enum PgStatioUserTablesOrderBy {
  NATURAL
  RELID_ASC
  RELID_DESC
  SCHEMANAME_ASC
  SCHEMANAME_DESC
  RELNAME_ASC
  RELNAME_DESC
  HEAP_BLKS_READ_ASC
  HEAP_BLKS_READ_DESC
  HEAP_BLKS_HIT_ASC
  HEAP_BLKS_HIT_DESC
  IDX_BLKS_READ_ASC
  IDX_BLKS_READ_DESC
  IDX_BLKS_HIT_ASC
  IDX_BLKS_HIT_DESC
  TOAST_BLKS_READ_ASC
  TOAST_BLKS_READ_DESC
  TOAST_BLKS_HIT_ASC
  TOAST_BLKS_HIT_DESC
  TIDX_BLKS_READ_ASC
  TIDX_BLKS_READ_DESC
  TIDX_BLKS_HIT_ASC
  TIDX_BLKS_HIT_DESC
}

type PgStatistic {
  starelid: Float!
  staattnum: Int!
  stainherit: Boolean!
  stanullfrac: Float!
  stawidth: Int!
  stadistinct: Float!
  stakind1: Int!
  stakind2: Int!
  stakind3: Int!
  stakind4: Int!
  stakind5: Int!
  staop1: Float!
  staop2: Float!
  staop3: Float!
  staop4: Float!
  staop5: Float!
  stanumbers1: [Float]
  stanumbers2: [Float]
  stanumbers3: [Float]
  stanumbers4: [Float]
  stanumbers5: [Float]
  stavalues1: String
  stavalues2: String
  stavalues3: String
  stavalues4: String
  stavalues5: String
}

input PgStatisticInput {
  starelid: Float!
  staattnum: Int!
  stainherit: Boolean!
  stanullfrac: Float!
  stawidth: Int!
  stadistinct: Float!
  stakind1: Int!
  stakind2: Int!
  stakind3: Int!
  stakind4: Int!
  stakind5: Int!
  staop1: Float!
  staop2: Float!
  staop3: Float!
  staop4: Float!
  staop5: Float!
  stanumbers1: [Float]
  stanumbers2: [Float]
  stanumbers3: [Float]
  stanumbers4: [Float]
  stanumbers5: [Float]
  stavalues1: String
  stavalues2: String
  stavalues3: String
  stavalues4: String
  stavalues5: String
}

# A connection to a list of \`PgStatistic\` values.
type PgStatisticsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatistic\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatistic\` and cursor to aid in pagination.
  edges: [PgStatisticsEdge]

  # A list of \`PgStatistic\` objects.
  nodes: [PgStatistic!]
}

# A \`PgStatistic\` edge in the connection.
type PgStatisticsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatistic\` at the end of the edge.
  node: PgStatistic!
}

# Methods to use when ordering \`PgStatistic\`.
enum PgStatisticsOrderBy {
  NATURAL
  STARELID_ASC
  STARELID_DESC
  STAATTNUM_ASC
  STAATTNUM_DESC
  STAINHERIT_ASC
  STAINHERIT_DESC
  STANULLFRAC_ASC
  STANULLFRAC_DESC
  STAWIDTH_ASC
  STAWIDTH_DESC
  STADISTINCT_ASC
  STADISTINCT_DESC
  STAKIND1_ASC
  STAKIND1_DESC
  STAKIND2_ASC
  STAKIND2_DESC
  STAKIND3_ASC
  STAKIND3_DESC
  STAKIND4_ASC
  STAKIND4_DESC
  STAKIND5_ASC
  STAKIND5_DESC
  STAOP1_ASC
  STAOP1_DESC
  STAOP2_ASC
  STAOP2_DESC
  STAOP3_ASC
  STAOP3_DESC
  STAOP4_ASC
  STAOP4_DESC
  STAOP5_ASC
  STAOP5_DESC
  STANUMBERS1_ASC
  STANUMBERS1_DESC
  STANUMBERS2_ASC
  STANUMBERS2_DESC
  STANUMBERS3_ASC
  STANUMBERS3_DESC
  STANUMBERS4_ASC
  STANUMBERS4_DESC
  STANUMBERS5_ASC
  STANUMBERS5_DESC
  STAVALUES1_ASC
  STAVALUES1_DESC
  STAVALUES2_ASC
  STAVALUES2_DESC
  STAVALUES3_ASC
  STAVALUES3_DESC
  STAVALUES4_ASC
  STAVALUES4_DESC
  STAVALUES5_ASC
  STAVALUES5_DESC
}

type PgStatReplication {
  pid: Int
  usesysid: Float
  usename: String
  applicationName: String
  clientAddr: String
  clientHostname: String
  clientPort: Int
  backendStart: Datetime
  backendXmin: String
  state: String
  sentLocation: String
  writeLocation: String
  flushLocation: String
  replayLocation: String
  syncPriority: Int
  syncState: String
}

# A connection to a list of \`PgStatReplication\` values.
type PgStatReplicationsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatReplication\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatReplication\` and cursor to aid in pagination.
  edges: [PgStatReplicationsEdge]

  # A list of \`PgStatReplication\` objects.
  nodes: [PgStatReplication!]
}

# A \`PgStatReplication\` edge in the connection.
type PgStatReplicationsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatReplication\` at the end of the edge.
  node: PgStatReplication!
}

# Methods to use when ordering \`PgStatReplication\`.
enum PgStatReplicationsOrderBy {
  NATURAL
  PID_ASC
  PID_DESC
  USESYSID_ASC
  USESYSID_DESC
  USENAME_ASC
  USENAME_DESC
  APPLICATION_NAME_ASC
  APPLICATION_NAME_DESC
  CLIENT_ADDR_ASC
  CLIENT_ADDR_DESC
  CLIENT_HOSTNAME_ASC
  CLIENT_HOSTNAME_DESC
  CLIENT_PORT_ASC
  CLIENT_PORT_DESC
  BACKEND_START_ASC
  BACKEND_START_DESC
  BACKEND_XMIN_ASC
  BACKEND_XMIN_DESC
  STATE_ASC
  STATE_DESC
  SENT_LOCATION_ASC
  SENT_LOCATION_DESC
  WRITE_LOCATION_ASC
  WRITE_LOCATION_DESC
  FLUSH_LOCATION_ASC
  FLUSH_LOCATION_DESC
  REPLAY_LOCATION_ASC
  REPLAY_LOCATION_DESC
  SYNC_PRIORITY_ASC
  SYNC_PRIORITY_DESC
  SYNC_STATE_ASC
  SYNC_STATE_DESC
}

input PgStatResetInput {
  clientMutationId: String
}

type PgStatResetPayload {
  clientMutationId: String
  string: String
  query: Query
}

input PgStatResetSharedInput {
  clientMutationId: String
  arg0: String!
}

type PgStatResetSharedPayload {
  clientMutationId: String
  string: String
  query: Query
}

input PgStatResetSingleFunctionCountersInput {
  clientMutationId: String
  arg0: Float
}

type PgStatResetSingleFunctionCountersPayload {
  clientMutationId: String
  string: String
  query: Query
}

input PgStatResetSingleTableCountersInput {
  clientMutationId: String
  arg0: Float
}

type PgStatResetSingleTableCountersPayload {
  clientMutationId: String
  string: String
  query: Query
}

# A connection to a list of \`PgStat\` values.
type PgStatsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStat\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStat\` and cursor to aid in pagination.
  edges: [PgStatsEdge]

  # A list of \`PgStat\` objects.
  nodes: [PgStat!]
}

# A \`PgStat\` edge in the connection.
type PgStatsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStat\` at the end of the edge.
  node: PgStat!
}

# Methods to use when ordering \`PgStat\`.
enum PgStatsOrderBy {
  NATURAL
  SCHEMANAME_ASC
  SCHEMANAME_DESC
  TABLENAME_ASC
  TABLENAME_DESC
  ATTNAME_ASC
  ATTNAME_DESC
  INHERITED_ASC
  INHERITED_DESC
  NULL_FRAC_ASC
  NULL_FRAC_DESC
  AVG_WIDTH_ASC
  AVG_WIDTH_DESC
  N_DISTINCT_ASC
  N_DISTINCT_DESC
  MOST_COMMON_VALS_ASC
  MOST_COMMON_VALS_DESC
  MOST_COMMON_FREQS_ASC
  MOST_COMMON_FREQS_DESC
  HISTOGRAM_BOUNDS_ASC
  HISTOGRAM_BOUNDS_DESC
  CORRELATION_ASC
  CORRELATION_DESC
  MOST_COMMON_ELEMS_ASC
  MOST_COMMON_ELEMS_DESC
  MOST_COMMON_ELEM_FREQS_ASC
  MOST_COMMON_ELEM_FREQS_DESC
  ELEM_COUNT_HISTOGRAM_ASC
  ELEM_COUNT_HISTOGRAM_DESC
}

type PgStatSsl {
  pid: Int
  ssl: Boolean
  version: String
  cipher: String
  bits: Int
  compression: Boolean
  clientdn: String
}

# A connection to a list of \`PgStatSsl\` values.
type PgStatSslsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatSsl\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatSsl\` and cursor to aid in pagination.
  edges: [PgStatSslsEdge]

  # A list of \`PgStatSsl\` objects.
  nodes: [PgStatSsl!]
}

# A \`PgStatSsl\` edge in the connection.
type PgStatSslsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatSsl\` at the end of the edge.
  node: PgStatSsl!
}

# Methods to use when ordering \`PgStatSsl\`.
enum PgStatSslsOrderBy {
  NATURAL
  PID_ASC
  PID_DESC
  SSL_ASC
  SSL_DESC
  VERSION_ASC
  VERSION_DESC
  CIPHER_ASC
  CIPHER_DESC
  BITS_ASC
  BITS_DESC
  COMPRESSION_ASC
  COMPRESSION_DESC
  CLIENTDN_ASC
  CLIENTDN_DESC
}

type PgStatSysIndex {
  relid: Float
  indexrelid: Float
  schemaname: String
  relname: String
  indexrelname: String
  idxScan: Int
  idxTupRead: Int
  idxTupFetch: Int
}

# A connection to a list of \`PgStatSysIndex\` values.
type PgStatSysIndexesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatSysIndex\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatSysIndex\` and cursor to aid in pagination.
  edges: [PgStatSysIndexesEdge]

  # A list of \`PgStatSysIndex\` objects.
  nodes: [PgStatSysIndex!]
}

# A \`PgStatSysIndex\` edge in the connection.
type PgStatSysIndexesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatSysIndex\` at the end of the edge.
  node: PgStatSysIndex!
}

# Methods to use when ordering \`PgStatSysIndex\`.
enum PgStatSysIndexesOrderBy {
  NATURAL
  RELID_ASC
  RELID_DESC
  INDEXRELID_ASC
  INDEXRELID_DESC
  SCHEMANAME_ASC
  SCHEMANAME_DESC
  RELNAME_ASC
  RELNAME_DESC
  INDEXRELNAME_ASC
  INDEXRELNAME_DESC
  IDX_SCAN_ASC
  IDX_SCAN_DESC
  IDX_TUP_READ_ASC
  IDX_TUP_READ_DESC
  IDX_TUP_FETCH_ASC
  IDX_TUP_FETCH_DESC
}

type PgStatSysTable {
  relid: Float
  schemaname: String
  relname: String
  seqScan: Int
  seqTupRead: Int
  idxScan: Int
  idxTupFetch: Int
  nTupIns: Int
  nTupUpd: Int
  nTupDel: Int
  nTupHotUpd: Int
  nLiveTup: Int
  nDeadTup: Int
  nModSinceAnalyze: Int
  lastVacuum: Datetime
  lastAutovacuum: Datetime
  lastAnalyze: Datetime
  lastAutoanalyze: Datetime
  vacuumCount: Int
  autovacuumCount: Int
  analyzeCount: Int
  autoanalyzeCount: Int
}

# A connection to a list of \`PgStatSysTable\` values.
type PgStatSysTablesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatSysTable\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatSysTable\` and cursor to aid in pagination.
  edges: [PgStatSysTablesEdge]

  # A list of \`PgStatSysTable\` objects.
  nodes: [PgStatSysTable!]
}

# A \`PgStatSysTable\` edge in the connection.
type PgStatSysTablesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatSysTable\` at the end of the edge.
  node: PgStatSysTable!
}

# Methods to use when ordering \`PgStatSysTable\`.
enum PgStatSysTablesOrderBy {
  NATURAL
  RELID_ASC
  RELID_DESC
  SCHEMANAME_ASC
  SCHEMANAME_DESC
  RELNAME_ASC
  RELNAME_DESC
  SEQ_SCAN_ASC
  SEQ_SCAN_DESC
  SEQ_TUP_READ_ASC
  SEQ_TUP_READ_DESC
  IDX_SCAN_ASC
  IDX_SCAN_DESC
  IDX_TUP_FETCH_ASC
  IDX_TUP_FETCH_DESC
  N_TUP_INS_ASC
  N_TUP_INS_DESC
  N_TUP_UPD_ASC
  N_TUP_UPD_DESC
  N_TUP_DEL_ASC
  N_TUP_DEL_DESC
  N_TUP_HOT_UPD_ASC
  N_TUP_HOT_UPD_DESC
  N_LIVE_TUP_ASC
  N_LIVE_TUP_DESC
  N_DEAD_TUP_ASC
  N_DEAD_TUP_DESC
  N_MOD_SINCE_ANALYZE_ASC
  N_MOD_SINCE_ANALYZE_DESC
  LAST_VACUUM_ASC
  LAST_VACUUM_DESC
  LAST_AUTOVACUUM_ASC
  LAST_AUTOVACUUM_DESC
  LAST_ANALYZE_ASC
  LAST_ANALYZE_DESC
  LAST_AUTOANALYZE_ASC
  LAST_AUTOANALYZE_DESC
  VACUUM_COUNT_ASC
  VACUUM_COUNT_DESC
  AUTOVACUUM_COUNT_ASC
  AUTOVACUUM_COUNT_DESC
  ANALYZE_COUNT_ASC
  ANALYZE_COUNT_DESC
  AUTOANALYZE_COUNT_ASC
  AUTOANALYZE_COUNT_DESC
}

type PgStatUserFunction {
  funcid: Float
  schemaname: String
  funcname: String
  calls: Int
  totalTime: Float
  selfTime: Float
}

# A connection to a list of \`PgStatUserFunction\` values.
type PgStatUserFunctionsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatUserFunction\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatUserFunction\` and cursor to aid in pagination.
  edges: [PgStatUserFunctionsEdge]

  # A list of \`PgStatUserFunction\` objects.
  nodes: [PgStatUserFunction!]
}

# A \`PgStatUserFunction\` edge in the connection.
type PgStatUserFunctionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatUserFunction\` at the end of the edge.
  node: PgStatUserFunction!
}

# Methods to use when ordering \`PgStatUserFunction\`.
enum PgStatUserFunctionsOrderBy {
  NATURAL
  FUNCID_ASC
  FUNCID_DESC
  SCHEMANAME_ASC
  SCHEMANAME_DESC
  FUNCNAME_ASC
  FUNCNAME_DESC
  CALLS_ASC
  CALLS_DESC
  TOTAL_TIME_ASC
  TOTAL_TIME_DESC
  SELF_TIME_ASC
  SELF_TIME_DESC
}

type PgStatUserIndex {
  relid: Float
  indexrelid: Float
  schemaname: String
  relname: String
  indexrelname: String
  idxScan: Int
  idxTupRead: Int
  idxTupFetch: Int
}

# A connection to a list of \`PgStatUserIndex\` values.
type PgStatUserIndexesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatUserIndex\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatUserIndex\` and cursor to aid in pagination.
  edges: [PgStatUserIndexesEdge]

  # A list of \`PgStatUserIndex\` objects.
  nodes: [PgStatUserIndex!]
}

# A \`PgStatUserIndex\` edge in the connection.
type PgStatUserIndexesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatUserIndex\` at the end of the edge.
  node: PgStatUserIndex!
}

# Methods to use when ordering \`PgStatUserIndex\`.
enum PgStatUserIndexesOrderBy {
  NATURAL
  RELID_ASC
  RELID_DESC
  INDEXRELID_ASC
  INDEXRELID_DESC
  SCHEMANAME_ASC
  SCHEMANAME_DESC
  RELNAME_ASC
  RELNAME_DESC
  INDEXRELNAME_ASC
  INDEXRELNAME_DESC
  IDX_SCAN_ASC
  IDX_SCAN_DESC
  IDX_TUP_READ_ASC
  IDX_TUP_READ_DESC
  IDX_TUP_FETCH_ASC
  IDX_TUP_FETCH_DESC
}

type PgStatUserTable {
  relid: Float
  schemaname: String
  relname: String
  seqScan: Int
  seqTupRead: Int
  idxScan: Int
  idxTupFetch: Int
  nTupIns: Int
  nTupUpd: Int
  nTupDel: Int
  nTupHotUpd: Int
  nLiveTup: Int
  nDeadTup: Int
  nModSinceAnalyze: Int
  lastVacuum: Datetime
  lastAutovacuum: Datetime
  lastAnalyze: Datetime
  lastAutoanalyze: Datetime
  vacuumCount: Int
  autovacuumCount: Int
  analyzeCount: Int
  autoanalyzeCount: Int
}

# A connection to a list of \`PgStatUserTable\` values.
type PgStatUserTablesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatUserTable\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatUserTable\` and cursor to aid in pagination.
  edges: [PgStatUserTablesEdge]

  # A list of \`PgStatUserTable\` objects.
  nodes: [PgStatUserTable!]
}

# A \`PgStatUserTable\` edge in the connection.
type PgStatUserTablesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatUserTable\` at the end of the edge.
  node: PgStatUserTable!
}

# Methods to use when ordering \`PgStatUserTable\`.
enum PgStatUserTablesOrderBy {
  NATURAL
  RELID_ASC
  RELID_DESC
  SCHEMANAME_ASC
  SCHEMANAME_DESC
  RELNAME_ASC
  RELNAME_DESC
  SEQ_SCAN_ASC
  SEQ_SCAN_DESC
  SEQ_TUP_READ_ASC
  SEQ_TUP_READ_DESC
  IDX_SCAN_ASC
  IDX_SCAN_DESC
  IDX_TUP_FETCH_ASC
  IDX_TUP_FETCH_DESC
  N_TUP_INS_ASC
  N_TUP_INS_DESC
  N_TUP_UPD_ASC
  N_TUP_UPD_DESC
  N_TUP_DEL_ASC
  N_TUP_DEL_DESC
  N_TUP_HOT_UPD_ASC
  N_TUP_HOT_UPD_DESC
  N_LIVE_TUP_ASC
  N_LIVE_TUP_DESC
  N_DEAD_TUP_ASC
  N_DEAD_TUP_DESC
  N_MOD_SINCE_ANALYZE_ASC
  N_MOD_SINCE_ANALYZE_DESC
  LAST_VACUUM_ASC
  LAST_VACUUM_DESC
  LAST_AUTOVACUUM_ASC
  LAST_AUTOVACUUM_DESC
  LAST_ANALYZE_ASC
  LAST_ANALYZE_DESC
  LAST_AUTOANALYZE_ASC
  LAST_AUTOANALYZE_DESC
  VACUUM_COUNT_ASC
  VACUUM_COUNT_DESC
  AUTOVACUUM_COUNT_ASC
  AUTOVACUUM_COUNT_DESC
  ANALYZE_COUNT_ASC
  ANALYZE_COUNT_DESC
  AUTOANALYZE_COUNT_ASC
  AUTOANALYZE_COUNT_DESC
}

type PgStatXactAllTable {
  relid: Float
  schemaname: String
  relname: String
  seqScan: Int
  seqTupRead: Int
  idxScan: Int
  idxTupFetch: Int
  nTupIns: Int
  nTupUpd: Int
  nTupDel: Int
  nTupHotUpd: Int
}

# A connection to a list of \`PgStatXactAllTable\` values.
type PgStatXactAllTablesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatXactAllTable\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatXactAllTable\` and cursor to aid in pagination.
  edges: [PgStatXactAllTablesEdge]

  # A list of \`PgStatXactAllTable\` objects.
  nodes: [PgStatXactAllTable!]
}

# A \`PgStatXactAllTable\` edge in the connection.
type PgStatXactAllTablesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatXactAllTable\` at the end of the edge.
  node: PgStatXactAllTable!
}

# Methods to use when ordering \`PgStatXactAllTable\`.
enum PgStatXactAllTablesOrderBy {
  NATURAL
  RELID_ASC
  RELID_DESC
  SCHEMANAME_ASC
  SCHEMANAME_DESC
  RELNAME_ASC
  RELNAME_DESC
  SEQ_SCAN_ASC
  SEQ_SCAN_DESC
  SEQ_TUP_READ_ASC
  SEQ_TUP_READ_DESC
  IDX_SCAN_ASC
  IDX_SCAN_DESC
  IDX_TUP_FETCH_ASC
  IDX_TUP_FETCH_DESC
  N_TUP_INS_ASC
  N_TUP_INS_DESC
  N_TUP_UPD_ASC
  N_TUP_UPD_DESC
  N_TUP_DEL_ASC
  N_TUP_DEL_DESC
  N_TUP_HOT_UPD_ASC
  N_TUP_HOT_UPD_DESC
}

type PgStatXactSysTable {
  relid: Float
  schemaname: String
  relname: String
  seqScan: Int
  seqTupRead: Int
  idxScan: Int
  idxTupFetch: Int
  nTupIns: Int
  nTupUpd: Int
  nTupDel: Int
  nTupHotUpd: Int
}

# A connection to a list of \`PgStatXactSysTable\` values.
type PgStatXactSysTablesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatXactSysTable\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatXactSysTable\` and cursor to aid in pagination.
  edges: [PgStatXactSysTablesEdge]

  # A list of \`PgStatXactSysTable\` objects.
  nodes: [PgStatXactSysTable!]
}

# A \`PgStatXactSysTable\` edge in the connection.
type PgStatXactSysTablesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatXactSysTable\` at the end of the edge.
  node: PgStatXactSysTable!
}

# Methods to use when ordering \`PgStatXactSysTable\`.
enum PgStatXactSysTablesOrderBy {
  NATURAL
  RELID_ASC
  RELID_DESC
  SCHEMANAME_ASC
  SCHEMANAME_DESC
  RELNAME_ASC
  RELNAME_DESC
  SEQ_SCAN_ASC
  SEQ_SCAN_DESC
  SEQ_TUP_READ_ASC
  SEQ_TUP_READ_DESC
  IDX_SCAN_ASC
  IDX_SCAN_DESC
  IDX_TUP_FETCH_ASC
  IDX_TUP_FETCH_DESC
  N_TUP_INS_ASC
  N_TUP_INS_DESC
  N_TUP_UPD_ASC
  N_TUP_UPD_DESC
  N_TUP_DEL_ASC
  N_TUP_DEL_DESC
  N_TUP_HOT_UPD_ASC
  N_TUP_HOT_UPD_DESC
}

type PgStatXactUserFunction {
  funcid: Float
  schemaname: String
  funcname: String
  calls: Int
  totalTime: Float
  selfTime: Float
}

# A connection to a list of \`PgStatXactUserFunction\` values.
type PgStatXactUserFunctionsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatXactUserFunction\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatXactUserFunction\` and cursor to aid in pagination.
  edges: [PgStatXactUserFunctionsEdge]

  # A list of \`PgStatXactUserFunction\` objects.
  nodes: [PgStatXactUserFunction!]
}

# A \`PgStatXactUserFunction\` edge in the connection.
type PgStatXactUserFunctionsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatXactUserFunction\` at the end of the edge.
  node: PgStatXactUserFunction!
}

# Methods to use when ordering \`PgStatXactUserFunction\`.
enum PgStatXactUserFunctionsOrderBy {
  NATURAL
  FUNCID_ASC
  FUNCID_DESC
  SCHEMANAME_ASC
  SCHEMANAME_DESC
  FUNCNAME_ASC
  FUNCNAME_DESC
  CALLS_ASC
  CALLS_DESC
  TOTAL_TIME_ASC
  TOTAL_TIME_DESC
  SELF_TIME_ASC
  SELF_TIME_DESC
}

type PgStatXactUserTable {
  relid: Float
  schemaname: String
  relname: String
  seqScan: Int
  seqTupRead: Int
  idxScan: Int
  idxTupFetch: Int
  nTupIns: Int
  nTupUpd: Int
  nTupDel: Int
  nTupHotUpd: Int
}

# A connection to a list of \`PgStatXactUserTable\` values.
type PgStatXactUserTablesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgStatXactUserTable\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgStatXactUserTable\` and cursor to aid in pagination.
  edges: [PgStatXactUserTablesEdge]

  # A list of \`PgStatXactUserTable\` objects.
  nodes: [PgStatXactUserTable!]
}

# A \`PgStatXactUserTable\` edge in the connection.
type PgStatXactUserTablesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgStatXactUserTable\` at the end of the edge.
  node: PgStatXactUserTable!
}

# Methods to use when ordering \`PgStatXactUserTable\`.
enum PgStatXactUserTablesOrderBy {
  NATURAL
  RELID_ASC
  RELID_DESC
  SCHEMANAME_ASC
  SCHEMANAME_DESC
  RELNAME_ASC
  RELNAME_DESC
  SEQ_SCAN_ASC
  SEQ_SCAN_DESC
  SEQ_TUP_READ_ASC
  SEQ_TUP_READ_DESC
  IDX_SCAN_ASC
  IDX_SCAN_DESC
  IDX_TUP_FETCH_ASC
  IDX_TUP_FETCH_DESC
  N_TUP_INS_ASC
  N_TUP_INS_DESC
  N_TUP_UPD_ASC
  N_TUP_UPD_DESC
  N_TUP_DEL_ASC
  N_TUP_DEL_DESC
  N_TUP_HOT_UPD_ASC
  N_TUP_HOT_UPD_DESC
}

input PgStopBackupInput {
  clientMutationId: String
}

type PgStopBackupPayload {
  clientMutationId: String
  string: String
  query: Query
}

input PgSwitchXlogInput {
  clientMutationId: String
}

type PgSwitchXlogPayload {
  clientMutationId: String
  string: String
  query: Query
}

type PgTable {
  schemaname: String
  tablename: String
  tableowner: String
  tablespace: String
  hasindexes: Boolean
  hasrules: Boolean
  hastriggers: Boolean
  rowsecurity: Boolean
}

# A connection to a list of \`PgTable\` values.
type PgTablesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgTable\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgTable\` and cursor to aid in pagination.
  edges: [PgTablesEdge]

  # A list of \`PgTable\` objects.
  nodes: [PgTable!]
}

# A \`PgTable\` edge in the connection.
type PgTablesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgTable\` at the end of the edge.
  node: PgTable!
}

input PgTableSizeInput {
  clientMutationId: String
  arg0: Float!
}

type PgTableSizePayload {
  clientMutationId: String
  integer: Int
  query: Query
}

# Methods to use when ordering \`PgTable\`.
enum PgTablesOrderBy {
  NATURAL
  SCHEMANAME_ASC
  SCHEMANAME_DESC
  TABLENAME_ASC
  TABLENAME_DESC
  TABLEOWNER_ASC
  TABLEOWNER_DESC
  TABLESPACE_ASC
  TABLESPACE_DESC
  HASINDEXES_ASC
  HASINDEXES_DESC
  HASRULES_ASC
  HASRULES_DESC
  HASTRIGGERS_ASC
  HASTRIGGERS_DESC
  ROWSECURITY_ASC
  ROWSECURITY_DESC
}

type PgTablespace {
  spcname: String!
  spcowner: Float!
  spcacl: [String]
  spcoptions: [String]
}

# A connection to a list of \`Float\` values.
type PgTablespaceDatabasesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`Float\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`Float\` and cursor to aid in pagination.
  edges: [PgTablespaceDatabasesEdge]

  # A list of \`Float\` objects.
  nodes: [Float]
}

# A \`Float\` edge in the connection.
type PgTablespaceDatabasesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`Float\` at the end of the edge.
  node: Float
}

# Methods to use when ordering \`Float\`.
enum PgTablespaceDatabasesOrderBy {
  NATURAL
}

input PgTablespaceInput {
  spcname: String!
  spcowner: Float!
  spcacl: [String]
  spcoptions: [String]
}

# A connection to a list of \`PgTablespace\` values.
type PgTablespacesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgTablespace\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgTablespace\` and cursor to aid in pagination.
  edges: [PgTablespacesEdge]

  # A list of \`PgTablespace\` objects.
  nodes: [PgTablespace!]
}

# A \`PgTablespace\` edge in the connection.
type PgTablespacesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgTablespace\` at the end of the edge.
  node: PgTablespace!
}

# Methods to use when ordering \`PgTablespace\`.
enum PgTablespacesOrderBy {
  NATURAL
  SPCNAME_ASC
  SPCNAME_DESC
  SPCOWNER_ASC
  SPCOWNER_DESC
  SPCACL_ASC
  SPCACL_DESC
  SPCOPTIONS_ASC
  SPCOPTIONS_DESC
}

input PgTerminateBackendInput {
  clientMutationId: String
  arg0: Int!
}

type PgTerminateBackendPayload {
  clientMutationId: String
  boolean: Boolean
  query: Query
}

type PgTimezoneAbbrev {
  abbrev: String
  utcOffset: Interval
  isDst: Boolean
}

# A connection to a list of \`PgTimezoneAbbrev\` values.
type PgTimezoneAbbrevsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgTimezoneAbbrev\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgTimezoneAbbrev\` and cursor to aid in pagination.
  edges: [PgTimezoneAbbrevsEdge]

  # A list of \`PgTimezoneAbbrev\` objects.
  nodes: [PgTimezoneAbbrev!]
}

# A \`PgTimezoneAbbrev\` edge in the connection.
type PgTimezoneAbbrevsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgTimezoneAbbrev\` at the end of the edge.
  node: PgTimezoneAbbrev!
}

# Methods to use when ordering \`PgTimezoneAbbrev\`.
enum PgTimezoneAbbrevsOrderBy {
  NATURAL
  ABBREV_ASC
  ABBREV_DESC
  UTC_OFFSET_ASC
  UTC_OFFSET_DESC
  IS_DST_ASC
  IS_DST_DESC
}

type PgTimezoneName {
  name: String
  abbrev: String
  utcOffset: Interval
  isDst: Boolean
}

# A connection to a list of \`PgTimezoneName\` values.
type PgTimezoneNamesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgTimezoneName\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgTimezoneName\` and cursor to aid in pagination.
  edges: [PgTimezoneNamesEdge]

  # A list of \`PgTimezoneName\` objects.
  nodes: [PgTimezoneName!]
}

# A \`PgTimezoneName\` edge in the connection.
type PgTimezoneNamesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgTimezoneName\` at the end of the edge.
  node: PgTimezoneName!
}

# Methods to use when ordering \`PgTimezoneName\`.
enum PgTimezoneNamesOrderBy {
  NATURAL
  NAME_ASC
  NAME_DESC
  ABBREV_ASC
  ABBREV_DESC
  UTC_OFFSET_ASC
  UTC_OFFSET_DESC
  IS_DST_ASC
  IS_DST_DESC
}

input PgTotalRelationSizeInput {
  clientMutationId: String
  arg0: Float!
}

type PgTotalRelationSizePayload {
  clientMutationId: String
  integer: Int
  query: Query
}

type PgTransform {
  trftype: Float!
  trflang: Float!
  trffromsql: Float!
  trftosql: Float!
}

input PgTransformInput {
  trftype: Float!
  trflang: Float!
  trffromsql: Float!
  trftosql: Float!
}

# A connection to a list of \`PgTransform\` values.
type PgTransformsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgTransform\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgTransform\` and cursor to aid in pagination.
  edges: [PgTransformsEdge]

  # A list of \`PgTransform\` objects.
  nodes: [PgTransform!]
}

# A \`PgTransform\` edge in the connection.
type PgTransformsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgTransform\` at the end of the edge.
  node: PgTransform!
}

# Methods to use when ordering \`PgTransform\`.
enum PgTransformsOrderBy {
  NATURAL
  TRFTYPE_ASC
  TRFTYPE_DESC
  TRFLANG_ASC
  TRFLANG_DESC
  TRFFROMSQL_ASC
  TRFFROMSQL_DESC
  TRFTOSQL_ASC
  TRFTOSQL_DESC
}

type PgTrigger {
  tgrelid: Float!
  tgname: String!
  tgfoid: Float!
  tgtype: Int!
  tgenabled: String!
  tgisinternal: Boolean!
  tgconstrrelid: Float!
  tgconstrindid: Float!
  tgconstraint: Float!
  tgdeferrable: Boolean!
  tginitdeferred: Boolean!
  tgnargs: Int!
  tgattr: [Int]!
  tgargs: String!
  tgqual: String
}

input PgTriggerInput {
  tgrelid: Float!
  tgname: String!
  tgfoid: Float!
  tgtype: Int!
  tgenabled: String!
  tgisinternal: Boolean!
  tgconstrrelid: Float!
  tgconstrindid: Float!
  tgconstraint: Float!
  tgdeferrable: Boolean!
  tginitdeferred: Boolean!
  tgnargs: Int!
  tgattr: [Int]!
  tgargs: String!
  tgqual: String
}

# A connection to a list of \`PgTrigger\` values.
type PgTriggersConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgTrigger\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgTrigger\` and cursor to aid in pagination.
  edges: [PgTriggersEdge]

  # A list of \`PgTrigger\` objects.
  nodes: [PgTrigger!]
}

# A \`PgTrigger\` edge in the connection.
type PgTriggersEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgTrigger\` at the end of the edge.
  node: PgTrigger!
}

# Methods to use when ordering \`PgTrigger\`.
enum PgTriggersOrderBy {
  NATURAL
  TGRELID_ASC
  TGRELID_DESC
  TGNAME_ASC
  TGNAME_DESC
  TGFOID_ASC
  TGFOID_DESC
  TGTYPE_ASC
  TGTYPE_DESC
  TGENABLED_ASC
  TGENABLED_DESC
  TGISINTERNAL_ASC
  TGISINTERNAL_DESC
  TGCONSTRRELID_ASC
  TGCONSTRRELID_DESC
  TGCONSTRINDID_ASC
  TGCONSTRINDID_DESC
  TGCONSTRAINT_ASC
  TGCONSTRAINT_DESC
  TGDEFERRABLE_ASC
  TGDEFERRABLE_DESC
  TGINITDEFERRED_ASC
  TGINITDEFERRED_DESC
  TGNARGS_ASC
  TGNARGS_DESC
  TGATTR_ASC
  TGATTR_DESC
  TGARGS_ASC
  TGARGS_DESC
  TGQUAL_ASC
  TGQUAL_DESC
}

type PgTsConfig {
  cfgname: String!
  cfgnamespace: Float!
  cfgowner: Float!
  cfgparser: Float!
}

input PgTsConfigInput {
  cfgname: String!
  cfgnamespace: Float!
  cfgowner: Float!
  cfgparser: Float!
}

type PgTsConfigMap {
  mapcfg: Float!
  maptokentype: Int!
  mapseqno: Int!
  mapdict: Float!
}

input PgTsConfigMapInput {
  mapcfg: Float!
  maptokentype: Int!
  mapseqno: Int!
  mapdict: Float!
}

# A connection to a list of \`PgTsConfigMap\` values.
type PgTsConfigMapsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgTsConfigMap\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgTsConfigMap\` and cursor to aid in pagination.
  edges: [PgTsConfigMapsEdge]

  # A list of \`PgTsConfigMap\` objects.
  nodes: [PgTsConfigMap!]
}

# A \`PgTsConfigMap\` edge in the connection.
type PgTsConfigMapsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgTsConfigMap\` at the end of the edge.
  node: PgTsConfigMap!
}

# Methods to use when ordering \`PgTsConfigMap\`.
enum PgTsConfigMapsOrderBy {
  NATURAL
  MAPCFG_ASC
  MAPCFG_DESC
  MAPTOKENTYPE_ASC
  MAPTOKENTYPE_DESC
  MAPSEQNO_ASC
  MAPSEQNO_DESC
  MAPDICT_ASC
  MAPDICT_DESC
}

# A connection to a list of \`PgTsConfig\` values.
type PgTsConfigsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgTsConfig\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgTsConfig\` and cursor to aid in pagination.
  edges: [PgTsConfigsEdge]

  # A list of \`PgTsConfig\` objects.
  nodes: [PgTsConfig!]
}

# A \`PgTsConfig\` edge in the connection.
type PgTsConfigsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgTsConfig\` at the end of the edge.
  node: PgTsConfig!
}

# Methods to use when ordering \`PgTsConfig\`.
enum PgTsConfigsOrderBy {
  NATURAL
  CFGNAME_ASC
  CFGNAME_DESC
  CFGNAMESPACE_ASC
  CFGNAMESPACE_DESC
  CFGOWNER_ASC
  CFGOWNER_DESC
  CFGPARSER_ASC
  CFGPARSER_DESC
}

type PgTsDict {
  dictname: String!
  dictnamespace: Float!
  dictowner: Float!
  dicttemplate: Float!
  dictinitoption: String
}

input PgTsDictInput {
  dictname: String!
  dictnamespace: Float!
  dictowner: Float!
  dicttemplate: Float!
  dictinitoption: String
}

# A connection to a list of \`PgTsDict\` values.
type PgTsDictsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgTsDict\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgTsDict\` and cursor to aid in pagination.
  edges: [PgTsDictsEdge]

  # A list of \`PgTsDict\` objects.
  nodes: [PgTsDict!]
}

# A \`PgTsDict\` edge in the connection.
type PgTsDictsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgTsDict\` at the end of the edge.
  node: PgTsDict!
}

# Methods to use when ordering \`PgTsDict\`.
enum PgTsDictsOrderBy {
  NATURAL
  DICTNAME_ASC
  DICTNAME_DESC
  DICTNAMESPACE_ASC
  DICTNAMESPACE_DESC
  DICTOWNER_ASC
  DICTOWNER_DESC
  DICTTEMPLATE_ASC
  DICTTEMPLATE_DESC
  DICTINITOPTION_ASC
  DICTINITOPTION_DESC
}

type PgTsParser {
  prsname: String!
  prsnamespace: Float!
  prsstart: Float!
  prstoken: Float!
  prsend: Float!
  prsheadline: Float!
  prslextype: Float!
}

input PgTsParserInput {
  prsname: String!
  prsnamespace: Float!
  prsstart: Float!
  prstoken: Float!
  prsend: Float!
  prsheadline: Float!
  prslextype: Float!
}

# A connection to a list of \`PgTsParser\` values.
type PgTsParsersConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgTsParser\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgTsParser\` and cursor to aid in pagination.
  edges: [PgTsParsersEdge]

  # A list of \`PgTsParser\` objects.
  nodes: [PgTsParser!]
}

# A \`PgTsParser\` edge in the connection.
type PgTsParsersEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgTsParser\` at the end of the edge.
  node: PgTsParser!
}

# Methods to use when ordering \`PgTsParser\`.
enum PgTsParsersOrderBy {
  NATURAL
  PRSNAME_ASC
  PRSNAME_DESC
  PRSNAMESPACE_ASC
  PRSNAMESPACE_DESC
  PRSSTART_ASC
  PRSSTART_DESC
  PRSTOKEN_ASC
  PRSTOKEN_DESC
  PRSEND_ASC
  PRSEND_DESC
  PRSHEADLINE_ASC
  PRSHEADLINE_DESC
  PRSLEXTYPE_ASC
  PRSLEXTYPE_DESC
}

type PgTsTemplate {
  tmplname: String!
  tmplnamespace: Float!
  tmplinit: Float!
  tmpllexize: Float!
}

input PgTsTemplateInput {
  tmplname: String!
  tmplnamespace: Float!
  tmplinit: Float!
  tmpllexize: Float!
}

# A connection to a list of \`PgTsTemplate\` values.
type PgTsTemplatesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgTsTemplate\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgTsTemplate\` and cursor to aid in pagination.
  edges: [PgTsTemplatesEdge]

  # A list of \`PgTsTemplate\` objects.
  nodes: [PgTsTemplate!]
}

# A \`PgTsTemplate\` edge in the connection.
type PgTsTemplatesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgTsTemplate\` at the end of the edge.
  node: PgTsTemplate!
}

# Methods to use when ordering \`PgTsTemplate\`.
enum PgTsTemplatesOrderBy {
  NATURAL
  TMPLNAME_ASC
  TMPLNAME_DESC
  TMPLNAMESPACE_ASC
  TMPLNAMESPACE_DESC
  TMPLINIT_ASC
  TMPLINIT_DESC
  TMPLLEXIZE_ASC
  TMPLLEXIZE_DESC
}

type PgType {
  typname: String!
  typnamespace: Float!
  typowner: Float!
  typlen: Int!
  typbyval: Boolean!
  typtype: String!
  typcategory: String!
  typispreferred: Boolean!
  typisdefined: Boolean!
  typdelim: String!
  typrelid: Float!
  typelem: Float!
  typarray: Float!
  typinput: Float!
  typoutput: Float!
  typreceive: Float!
  typsend: Float!
  typmodin: Float!
  typmodout: Float!
  typanalyze: Float!
  typalign: String!
  typstorage: String!
  typnotnull: Boolean!
  typbasetype: Float!
  typtypmod: Int!
  typndims: Int!
  typcollation: Float!
  typdefaultbin: String
  typdefault: String
  typacl: [String]
}

input PgTypeInput {
  typname: String!
  typnamespace: Float!
  typowner: Float!
  typlen: Int!
  typbyval: Boolean!
  typtype: String!
  typcategory: String!
  typispreferred: Boolean!
  typisdefined: Boolean!
  typdelim: String!
  typrelid: Float!
  typelem: Float!
  typarray: Float!
  typinput: Float!
  typoutput: Float!
  typreceive: Float!
  typsend: Float!
  typmodin: Float!
  typmodout: Float!
  typanalyze: Float!
  typalign: String!
  typstorage: String!
  typnotnull: Boolean!
  typbasetype: Float!
  typtypmod: Int!
  typndims: Int!
  typcollation: Float!
  typdefaultbin: String
  typdefault: String
  typacl: [String]
}

# A connection to a list of \`PgType\` values.
type PgTypesConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgType\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgType\` and cursor to aid in pagination.
  edges: [PgTypesEdge]

  # A list of \`PgType\` objects.
  nodes: [PgType!]
}

# A \`PgType\` edge in the connection.
type PgTypesEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgType\` at the end of the edge.
  node: PgType!
}

# Methods to use when ordering \`PgType\`.
enum PgTypesOrderBy {
  NATURAL
  TYPNAME_ASC
  TYPNAME_DESC
  TYPNAMESPACE_ASC
  TYPNAMESPACE_DESC
  TYPOWNER_ASC
  TYPOWNER_DESC
  TYPLEN_ASC
  TYPLEN_DESC
  TYPBYVAL_ASC
  TYPBYVAL_DESC
  TYPTYPE_ASC
  TYPTYPE_DESC
  TYPCATEGORY_ASC
  TYPCATEGORY_DESC
  TYPISPREFERRED_ASC
  TYPISPREFERRED_DESC
  TYPISDEFINED_ASC
  TYPISDEFINED_DESC
  TYPDELIM_ASC
  TYPDELIM_DESC
  TYPRELID_ASC
  TYPRELID_DESC
  TYPELEM_ASC
  TYPELEM_DESC
  TYPARRAY_ASC
  TYPARRAY_DESC
  TYPINPUT_ASC
  TYPINPUT_DESC
  TYPOUTPUT_ASC
  TYPOUTPUT_DESC
  TYPRECEIVE_ASC
  TYPRECEIVE_DESC
  TYPSEND_ASC
  TYPSEND_DESC
  TYPMODIN_ASC
  TYPMODIN_DESC
  TYPMODOUT_ASC
  TYPMODOUT_DESC
  TYPANALYZE_ASC
  TYPANALYZE_DESC
  TYPALIGN_ASC
  TYPALIGN_DESC
  TYPSTORAGE_ASC
  TYPSTORAGE_DESC
  TYPNOTNULL_ASC
  TYPNOTNULL_DESC
  TYPBASETYPE_ASC
  TYPBASETYPE_DESC
  TYPTYPMOD_ASC
  TYPTYPMOD_DESC
  TYPNDIMS_ASC
  TYPNDIMS_DESC
  TYPCOLLATION_ASC
  TYPCOLLATION_DESC
  TYPDEFAULTBIN_ASC
  TYPDEFAULTBIN_DESC
  TYPDEFAULT_ASC
  TYPDEFAULT_DESC
  TYPACL_ASC
  TYPACL_DESC
}

type PgUser {
  usename: String
  usesysid: Float
  usecreatedb: Boolean
  usesuper: Boolean
  userepl: Boolean
  usebypassrls: Boolean
  passwd: String
  valuntil: String
  useconfig: [String]
}

type PgUserMapping {
  umuser: Float!
  umserver: Float!
  umoptions: [String]
}

# A connection to a list of \`PgUserMapping\` values.
type PgUserMappingConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgUserMapping\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgUserMapping\` and cursor to aid in pagination.
  edges: [PgUserMappingEdge]

  # A list of \`PgUserMapping\` objects.
  nodes: [PgUserMapping!]
}

# A \`PgUserMapping\` edge in the connection.
type PgUserMappingEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgUserMapping\` at the end of the edge.
  node: PgUserMapping!
}

input PgUserMappingInput {
  umuser: Float!
  umserver: Float!
  umoptions: [String]
}

# Methods to use when ordering \`PgUserMapping\`.
enum PgUserMappingOrderBy {
  NATURAL
  UMUSER_ASC
  UMUSER_DESC
  UMSERVER_ASC
  UMSERVER_DESC
  UMOPTIONS_ASC
  UMOPTIONS_DESC
}

type PgUserMappings {
  umid: Float
  srvid: Float
  srvname: String
  umuser: Float
  usename: String
  umoptions: [String]
}

# A connection to a list of \`PgUserMappings\` values.
type PgUserMappingsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgUserMappings\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgUserMappings\` and cursor to aid in pagination.
  edges: [PgUserMappingsEdge]

  # A list of \`PgUserMappings\` objects.
  nodes: [PgUserMappings!]
}

# A \`PgUserMappings\` edge in the connection.
type PgUserMappingsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgUserMappings\` at the end of the edge.
  node: PgUserMappings!
}

# Methods to use when ordering \`PgUserMappings\`.
enum PgUserMappingsOrderBy {
  NATURAL
  UMID_ASC
  UMID_DESC
  SRVID_ASC
  SRVID_DESC
  SRVNAME_ASC
  SRVNAME_DESC
  UMUSER_ASC
  UMUSER_DESC
  USENAME_ASC
  USENAME_DESC
  UMOPTIONS_ASC
  UMOPTIONS_DESC
}

# A connection to a list of \`PgUser\` values.
type PgUsersConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgUser\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgUser\` and cursor to aid in pagination.
  edges: [PgUsersEdge]

  # A list of \`PgUser\` objects.
  nodes: [PgUser!]
}

# A \`PgUser\` edge in the connection.
type PgUsersEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgUser\` at the end of the edge.
  node: PgUser!
}

# Methods to use when ordering \`PgUser\`.
enum PgUsersOrderBy {
  NATURAL
  USENAME_ASC
  USENAME_DESC
  USESYSID_ASC
  USESYSID_DESC
  USECREATEDB_ASC
  USECREATEDB_DESC
  USESUPER_ASC
  USESUPER_DESC
  USEREPL_ASC
  USEREPL_DESC
  USEBYPASSRLS_ASC
  USEBYPASSRLS_DESC
  PASSWD_ASC
  PASSWD_DESC
  VALUNTIL_ASC
  VALUNTIL_DESC
  USECONFIG_ASC
  USECONFIG_DESC
}

type PgView {
  schemaname: String
  viewname: String
  viewowner: String
  definition: String
}

# A connection to a list of \`PgView\` values.
type PgViewsConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`PgView\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`PgView\` and cursor to aid in pagination.
  edges: [PgViewsEdge]

  # A list of \`PgView\` objects.
  nodes: [PgView!]
}

# A \`PgView\` edge in the connection.
type PgViewsEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`PgView\` at the end of the edge.
  node: PgView!
}

# Methods to use when ordering \`PgView\`.
enum PgViewsOrderBy {
  NATURAL
  SCHEMANAME_ASC
  SCHEMANAME_DESC
  VIEWNAME_ASC
  VIEWNAME_DESC
  VIEWOWNER_ASC
  VIEWOWNER_DESC
  DEFINITION_ASC
  DEFINITION_DESC
}

input PgXactCommitTimestampInput {
  clientMutationId: String
  arg0: String!
}

type PgXactCommitTimestampPayload {
  clientMutationId: String
  datetime: Datetime
  query: Query
}

input PgXlogReplayPauseInput {
  clientMutationId: String
}

type PgXlogReplayPausePayload {
  clientMutationId: String
  string: String
  query: Query
}

input PgXlogReplayResumeInput {
  clientMutationId: String
}

type PgXlogReplayResumePayload {
  clientMutationId: String
  string: String
  query: Query
}

input PlpgsqlCallHandlerInput {
  clientMutationId: String
}

type PlpgsqlCallHandlerPayload {
  clientMutationId: String
  string: String
  query: Query
}

input PlpgsqlInlineHandlerInput {
  clientMutationId: String
  arg0: String!
}

type PlpgsqlInlineHandlerPayload {
  clientMutationId: String
  string: String
  query: Query
}

input PlpgsqlValidatorInput {
  clientMutationId: String
  arg0: Float!
}

type PlpgsqlValidatorPayload {
  clientMutationId: String
  string: String
  query: Query
}

# The root query type which gives access points into the data universe.
type Query {
  # Fetches an object given its globally unique \`ID\`.
  node(
    # The globally unique \`ID\`.
    __id: ID!
  ): Node

  # implementation of = operator
  abstimeeq(arg0: String!, arg1: String!): Boolean

  # implementation of >= operator
  abstimege(arg0: String!, arg1: String!): Boolean

  # implementation of > operator
  abstimegt(arg0: String!, arg1: String!): Boolean

  # I/O
  abstimein(arg0: String!): String

  # implementation of <= operator
  abstimele(arg0: String!, arg1: String!): Boolean

  # implementation of < operator
  abstimelt(arg0: String!, arg1: String!): Boolean

  # implementation of <> operator
  abstimene(arg0: String!, arg1: String!): Boolean

  # I/O
  abstimeout(arg0: String!): String

  # I/O
  abstimerecv(arg0: String!): String

  # I/O
  abstimesend(arg0: String!): String

  # contains
  aclcontains(arg0: [String]!, arg1: String!): Boolean

  # TODO
  acldefault(arg0: String!, arg1: Float!): [String]

  # add/update ACL item
  aclinsert(arg0: [String]!, arg1: String!): [String]

  # implementation of = operator
  aclitemeq(arg0: String!, arg1: String!): Boolean

  # I/O
  aclitemin(arg0: String!): String

  # I/O
  aclitemout(arg0: String!): String

  # remove ACL item
  aclremove(arg0: [String]!, arg1: String!): [String]

  # arccosine
  acos(arg0: Float!): Float

  # I/O
  anyIn(arg0: String!): String

  # I/O
  anyOut(arg0: String!): String

  # I/O
  anyarrayIn(arg0: String!): String

  # I/O
  anyarrayOut(arg0: String!): String

  # I/O
  anyarrayRecv(arg0: String!): String

  # I/O
  anyarraySend(arg0: String!): String

  # I/O
  anyelementIn(arg0: String!): String

  # I/O
  anyelementOut(arg0: String!): String

  # I/O
  anyenumIn(arg0: String!): String

  # I/O
  anyenumOut(arg0: String!): String

  # I/O
  anynonarrayIn(arg0: String!): String

  # I/O
  anynonarrayOut(arg0: String!): String

  # I/O
  anyrangeIn(arg0: String!, arg1: Float!, arg2: Int!): String

  # I/O
  anyrangeOut(arg0: String!): String

  # implementation of || operator
  anytextcat(arg0: String!, arg1: String!): String

  # join selectivity for area-comparison operators
  areajoinsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!, arg4: String!): Float

  # restriction selectivity for area-comparison operators
  areasel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!): Float

  # aggregate final function
  arrayAggArrayFinalfn(arg0: String, arg1: String): String

  # aggregate transition function
  arrayAggArrayTransfn(arg0: String, arg1: String): String

  # aggregate final function
  arrayAggFinalfn(arg0: String, arg1: String): String

  # aggregate transition function
  arrayAggTransfn(arg0: String, arg1: String): String

  # append element onto end of array
  arrayAppend(arg0: String, arg1: String): String

  # implementation of || operator
  arrayCat(arg0: String, arg1: String): String

  # array dimensions
  arrayDims(arg0: String!): String

  # implementation of = operator
  arrayEq(arg0: String!, arg1: String!): Boolean

  # implementation of >= operator
  arrayGe(arg0: String!, arg1: String!): Boolean

  # implementation of > operator
  arrayGt(arg0: String!, arg1: String!): Boolean

  # I/O
  arrayIn(arg0: String!, arg1: Float!, arg2: Int!): String

  # larger of two
  arrayLarger(arg0: String!, arg1: String!): String

  # implementation of <= operator
  arrayLe(arg0: String!, arg1: String!): Boolean

  # array length
  arrayLength(arg0: String!, arg1: Int!): Int

  # array lower dimension
  arrayLower(arg0: String!, arg1: Int!): Int

  # implementation of < operator
  arrayLt(arg0: String!, arg1: String!): Boolean

  # number of array dimensions
  arrayNdims(arg0: String!): Int

  # implementation of <> operator
  arrayNe(arg0: String!, arg1: String!): Boolean

  # I/O
  arrayOut(arg0: String!): String

  # returns an array of offsets of some value in array
  arrayPositions(arg0: String, arg1: String): [Int]

  # prepend element onto front of array
  arrayPrepend(arg0: String, arg1: String): String

  # I/O
  arrayRecv(arg0: String!, arg1: Float!, arg2: Int!): String

  # remove any occurrences of an element from an array
  arrayRemove(arg0: String, arg1: String): String

  # replace any occurrences of an element in an array
  arrayReplace(arg0: String, arg1: String, arg2: String): String

  # I/O
  arraySend(arg0: String!): String

  # smaller of two
  arraySmaller(arg0: String!, arg1: String!): String

  # array typanalyze
  arrayTypanalyze(arg0: String!): Boolean

  # array upper dimension
  arrayUpper(arg0: String!, arg1: Int!): Int

  # implementation of <@ operator
  arraycontained(arg0: String!, arg1: String!): Boolean

  # implementation of @> operator
  arraycontains(arg0: String!, arg1: String!): Boolean

  # join selectivity for array-containment operators
  arraycontjoinsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!, arg4: String!): Float

  # restriction selectivity for array-containment operators
  arraycontsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!): Float

  # implementation of && operator
  arrayoverlap(arg0: String!, arg1: String!): Boolean

  # convert first char to int4
  ascii(arg0: String!): Int

  # arcsine
  asin(arg0: Float!): Float

  # arctangent
  atan(arg0: Float!): Float

  # arctangent, two arguments
  atan2(arg0: Float!, arg1: Float!): Float

  # I/O
  bitIn(arg0: String!, arg1: Float!, arg2: Int!): String

  # I/O
  bitOut(arg0: String!): String

  # I/O
  bitRecv(arg0: String!, arg1: Float!, arg2: Int!): String

  # I/O
  bitSend(arg0: String!): String

  # implementation of & operator
  bitand(arg0: String!, arg1: String!): String

  # implementation of || operator
  bitcat(arg0: String!, arg1: String!): String

  # less-equal-greater
  bitcmp(arg0: String!, arg1: String!): Int

  # implementation of = operator
  biteq(arg0: String!, arg1: String!): Boolean

  # implementation of >= operator
  bitge(arg0: String!, arg1: String!): Boolean

  # implementation of > operator
  bitgt(arg0: String!, arg1: String!): Boolean

  # implementation of <= operator
  bitle(arg0: String!, arg1: String!): Boolean

  # implementation of < operator
  bitlt(arg0: String!, arg1: String!): Boolean

  # implementation of <> operator
  bitne(arg0: String!, arg1: String!): Boolean

  # implementation of ~ operator
  bitnot(arg0: String!): String

  # implementation of | operator
  bitor(arg0: String!, arg1: String!): String

  # implementation of << operator
  bitshiftleft(arg0: String!, arg1: Int!): String

  # implementation of >> operator
  bitshiftright(arg0: String!, arg1: Int!): String

  # I/O typmod
  bittypmodin(arg0: [String]!): Int

  # I/O typmod
  bittypmodout(arg0: Int!): String

  # implementation of # operator
  bitxor(arg0: String!, arg1: String!): String

  # convert int4 to boolean
  bool(arg0: Int!): Boolean

  # aggregate transition function
  boolAccum(arg0: String, arg1: Boolean): String

  # aggregate transition function
  boolAccumInv(arg0: String, arg1: Boolean): String

  # aggregate final function
  boolAlltrue(arg0: String!): Boolean

  # aggregate final function
  boolAnytrue(arg0: String!): Boolean

  # aggregate transition function
  boolandStatefunc(arg0: Boolean!, arg1: Boolean!): Boolean

  # implementation of = operator
  booleq(arg0: Boolean!, arg1: Boolean!): Boolean

  # implementation of >= operator
  boolge(arg0: Boolean!, arg1: Boolean!): Boolean

  # implementation of > operator
  boolgt(arg0: Boolean!, arg1: Boolean!): Boolean

  # I/O
  boolin(arg0: String!): Boolean

  # implementation of <= operator
  boolle(arg0: Boolean!, arg1: Boolean!): Boolean

  # implementation of < operator
  boollt(arg0: Boolean!, arg1: Boolean!): Boolean

  # implementation of <> operator
  boolne(arg0: Boolean!, arg1: Boolean!): Boolean

  # aggregate transition function
  boolorStatefunc(arg0: Boolean!, arg1: Boolean!): Boolean

  # I/O
  boolout(arg0: Boolean!): String

  # I/O
  boolrecv(arg0: String!): Boolean

  # I/O
  boolsend(arg0: Boolean!): String

  # bounding box of two boxes
  boundBox(arg0: String!, arg1: String!): String

  # implementation of |>> operator
  boxAbove(arg0: String!, arg1: String!): Boolean

  # implementation of >^ operator
  boxAboveEq(arg0: String!, arg1: String!): Boolean

  # implementation of + operator
  boxAdd(arg0: String!, arg1: String!): String

  # implementation of <<| operator
  boxBelow(arg0: String!, arg1: String!): Boolean

  # implementation of <^ operator
  boxBelowEq(arg0: String!, arg1: String!): Boolean

  # implementation of @@ operator
  boxCenter(arg0: String!): String

  # implementation of @> operator
  boxContain(arg0: String!, arg1: String!): Boolean

  # implementation of @> operator
  boxContainPt(arg0: String!, arg1: String!): Boolean

  # implementation of <@ operator
  boxContained(arg0: String!, arg1: String!): Boolean

  # implementation of <-> operator
  boxDistance(arg0: String!, arg1: String!): Float

  # implementation of / operator
  boxDiv(arg0: String!, arg1: String!): String

  # implementation of = operator
  boxEq(arg0: String!, arg1: String!): Boolean

  # implementation of >= operator
  boxGe(arg0: String!, arg1: String!): Boolean

  # implementation of > operator
  boxGt(arg0: String!, arg1: String!): Boolean

  # I/O
  boxIn(arg0: String!): String

  # implementation of # operator
  boxIntersect(arg0: String!, arg1: String!): String

  # implementation of <= operator
  boxLe(arg0: String!, arg1: String!): Boolean

  # implementation of << operator
  boxLeft(arg0: String!, arg1: String!): Boolean

  # implementation of < operator
  boxLt(arg0: String!, arg1: String!): Boolean

  # implementation of * operator
  boxMul(arg0: String!, arg1: String!): String

  # I/O
  boxOut(arg0: String!): String

  # implementation of |&> operator
  boxOverabove(arg0: String!, arg1: String!): Boolean

  # implementation of &<| operator
  boxOverbelow(arg0: String!, arg1: String!): Boolean

  # implementation of && operator
  boxOverlap(arg0: String!, arg1: String!): Boolean

  # implementation of &< operator
  boxOverleft(arg0: String!, arg1: String!): Boolean

  # implementation of &> operator
  boxOverright(arg0: String!, arg1: String!): Boolean

  # I/O
  boxRecv(arg0: String!): String

  # implementation of >> operator
  boxRight(arg0: String!, arg1: String!): Boolean

  # implementation of ~= operator
  boxSame(arg0: String!, arg1: String!): Boolean

  # I/O
  boxSend(arg0: String!): String

  # implementation of - operator
  boxSub(arg0: String!, arg1: String!): String

  # larger of two
  bpcharLarger(arg0: String!, arg1: String!): String

  # implementation of ~>=~ operator
  bpcharPatternGe(arg0: String!, arg1: String!): Boolean

  # implementation of ~>~ operator
  bpcharPatternGt(arg0: String!, arg1: String!): Boolean

  # implementation of ~<=~ operator
  bpcharPatternLe(arg0: String!, arg1: String!): Boolean

  # implementation of ~<~ operator
  bpcharPatternLt(arg0: String!, arg1: String!): Boolean

  # smaller of two
  bpcharSmaller(arg0: String!, arg1: String!): String

  # less-equal-greater
  bpcharcmp(arg0: String!, arg1: String!): Int

  # implementation of = operator
  bpchareq(arg0: String!, arg1: String!): Boolean

  # implementation of >= operator
  bpcharge(arg0: String!, arg1: String!): Boolean

  # implementation of > operator
  bpchargt(arg0: String!, arg1: String!): Boolean

  # implementation of ~~* operator
  bpchariclike(arg0: String!, arg1: String!): Boolean

  # implementation of !~~* operator
  bpcharicnlike(arg0: String!, arg1: String!): Boolean

  # implementation of ~* operator
  bpcharicregexeq(arg0: String!, arg1: String!): Boolean

  # implementation of !~* operator
  bpcharicregexne(arg0: String!, arg1: String!): Boolean

  # I/O
  bpcharin(arg0: String!, arg1: Float!, arg2: Int!): String

  # implementation of <= operator
  bpcharle(arg0: String!, arg1: String!): Boolean

  # implementation of ~~ operator
  bpcharlike(arg0: String!, arg1: String!): Boolean

  # implementation of < operator
  bpcharlt(arg0: String!, arg1: String!): Boolean

  # implementation of <> operator
  bpcharne(arg0: String!, arg1: String!): Boolean

  # implementation of !~~ operator
  bpcharnlike(arg0: String!, arg1: String!): Boolean

  # I/O
  bpcharout(arg0: String!): String

  # I/O
  bpcharrecv(arg0: String!, arg1: Float!, arg2: Int!): String

  # implementation of ~ operator
  bpcharregexeq(arg0: String!, arg1: String!): Boolean

  # implementation of !~ operator
  bpcharregexne(arg0: String!, arg1: String!): Boolean

  # I/O
  bpcharsend(arg0: String!): String

  # I/O typmod
  bpchartypmodin(arg0: [String]!): Int

  # I/O typmod
  bpchartypmodout(arg0: Int!): String

  # BRIN inclusion support
  brinInclusionAddValue(arg0: String!, arg1: String!, arg2: String!, arg3: String!): Boolean

  # BRIN inclusion support
  brinInclusionConsistent(arg0: String!, arg1: String!, arg2: String!): Boolean

  # BRIN inclusion support
  brinInclusionOpcinfo(arg0: String!): String

  # BRIN inclusion support
  brinInclusionUnion(arg0: String!, arg1: String!, arg2: String!): Boolean

  # BRIN minmax support
  brinMinmaxAddValue(arg0: String!, arg1: String!, arg2: String!, arg3: String!): Boolean

  # BRIN minmax support
  brinMinmaxConsistent(arg0: String!, arg1: String!, arg2: String!): Boolean

  # BRIN minmax support
  brinMinmaxOpcinfo(arg0: String!): String

  # BRIN minmax support
  brinMinmaxUnion(arg0: String!, arg1: String!, arg2: String!): Boolean

  # brin(internal)
  brinoptions(arg0: [String]!, arg1: Boolean!): String

  # broadcast address of network
  broadcast(arg0: String!): String

  # less-equal-greater
  btabstimecmp(arg0: String!, arg1: String!): Int

  # less-equal-greater
  btarraycmp(arg0: String!, arg1: String!): Int

  # less-equal-greater
  btboolcmp(arg0: Boolean!, arg1: Boolean!): Int

  # less-equal-greater
  btbpcharPatternCmp(arg0: String!, arg1: String!): Int

  # btree(internal)
  btcanreturn(arg0: String!, arg1: Int!): Boolean

  # less-equal-greater
  btcharcmp(arg0: String!, arg1: String!): Int

  # less-equal-greater
  btfloat48cmp(arg0: Float!, arg1: Float!): Int

  # less-equal-greater
  btfloat4cmp(arg0: Float!, arg1: Float!): Int

  # sort support
  btfloat4sortsupport(arg0: String!): String

  # less-equal-greater
  btfloat84cmp(arg0: Float!, arg1: Float!): Int

  # less-equal-greater
  btfloat8cmp(arg0: Float!, arg1: Float!): Int

  # sort support
  btfloat8sortsupport(arg0: String!): String

  # less-equal-greater
  btint24cmp(arg0: Int!, arg1: Int!): Int

  # less-equal-greater
  btint28cmp(arg0: Int!, arg1: Int!): Int

  # less-equal-greater
  btint2cmp(arg0: Int!, arg1: Int!): Int

  # sort support
  btint2sortsupport(arg0: String!): String

  # less-equal-greater
  btint42cmp(arg0: Int!, arg1: Int!): Int

  # less-equal-greater
  btint48cmp(arg0: Int!, arg1: Int!): Int

  # less-equal-greater
  btint4cmp(arg0: Int!, arg1: Int!): Int

  # sort support
  btint4sortsupport(arg0: String!): String

  # less-equal-greater
  btint82cmp(arg0: Int!, arg1: Int!): Int

  # less-equal-greater
  btint84cmp(arg0: Int!, arg1: Int!): Int

  # less-equal-greater
  btint8cmp(arg0: Int!, arg1: Int!): Int

  # sort support
  btint8sortsupport(arg0: String!): String

  # less-equal-greater
  btnamecmp(arg0: String!, arg1: String!): Int

  # sort support
  btnamesortsupport(arg0: String!): String

  # less-equal-greater
  btoidcmp(arg0: Float!, arg1: Float!): Int

  # sort support
  btoidsortsupport(arg0: String!): String

  # less-equal-greater
  btoidvectorcmp(arg0: [Float]!, arg1: [Float]!): Int

  # btree(internal)
  btoptions(arg0: [String]!, arg1: Boolean!): String

  # less-equal-greater
  btrecordcmp(arg0: String!, arg1: String!): Int

  # less-equal-greater based on byte images
  btrecordimagecmp(arg0: String!, arg1: String!): Int

  # less-equal-greater
  btreltimecmp(arg0: String!, arg1: String!): Int

  # less-equal-greater
  bttextPatternCmp(arg0: String!, arg1: String!): Int

  # less-equal-greater
  bttextcmp(arg0: String!, arg1: String!): Int

  # sort support
  bttextsortsupport(arg0: String!): String

  # less-equal-greater
  bttidcmp(arg0: String!, arg1: String!): Int

  # less-equal-greater
  bttintervalcmp(arg0: String!, arg1: String!): Int

  # aggregate final function
  byteaStringAggFinalfn(arg0: String): String

  # aggregate transition function
  byteaStringAggTransfn(arg0: String, arg1: String, arg2: String): String

  # implementation of || operator
  byteacat(arg0: String!, arg1: String!): String

  # less-equal-greater
  byteacmp(arg0: String!, arg1: String!): Int

  # implementation of = operator
  byteaeq(arg0: String!, arg1: String!): Boolean

  # implementation of >= operator
  byteage(arg0: String!, arg1: String!): Boolean

  # implementation of > operator
  byteagt(arg0: String!, arg1: String!): Boolean

  # I/O
  byteain(arg0: String!): String

  # implementation of <= operator
  byteale(arg0: String!, arg1: String!): Boolean

  # implementation of ~~ operator
  bytealike(arg0: String!, arg1: String!): Boolean

  # implementation of < operator
  bytealt(arg0: String!, arg1: String!): Boolean

  # implementation of <> operator
  byteane(arg0: String!, arg1: String!): Boolean

  # implementation of !~~ operator
  byteanlike(arg0: String!, arg1: String!): Boolean

  # I/O
  byteaout(arg0: String!): String

  # I/O
  bytearecv(arg0: String!): String

  # I/O
  byteasend(arg0: String!): String

  # array cardinality
  cardinality(arg0: String!): Int

  # less-equal-greater
  cashCmp(arg0: Float!, arg1: Float!): Int

  # implementation of / operator
  cashDivCash(arg0: Float!, arg1: Float!): Float

  # implementation of / operator
  cashDivFlt4(arg0: Float!, arg1: Float!): Float

  # implementation of / operator
  cashDivFlt8(arg0: Float!, arg1: Float!): Float

  # implementation of / operator
  cashDivInt2(arg0: Float!, arg1: Int!): Float

  # implementation of / operator
  cashDivInt4(arg0: Float!, arg1: Int!): Float

  # implementation of = operator
  cashEq(arg0: Float!, arg1: Float!): Boolean

  # implementation of >= operator
  cashGe(arg0: Float!, arg1: Float!): Boolean

  # implementation of > operator
  cashGt(arg0: Float!, arg1: Float!): Boolean

  # I/O
  cashIn(arg0: String!): Float

  # implementation of <= operator
  cashLe(arg0: Float!, arg1: Float!): Boolean

  # implementation of < operator
  cashLt(arg0: Float!, arg1: Float!): Boolean

  # implementation of - operator
  cashMi(arg0: Float!, arg1: Float!): Float

  # implementation of * operator
  cashMulFlt4(arg0: Float!, arg1: Float!): Float

  # implementation of * operator
  cashMulFlt8(arg0: Float!, arg1: Float!): Float

  # implementation of * operator
  cashMulInt2(arg0: Float!, arg1: Int!): Float

  # implementation of * operator
  cashMulInt4(arg0: Float!, arg1: Int!): Float

  # implementation of <> operator
  cashNe(arg0: Float!, arg1: Float!): Boolean

  # I/O
  cashOut(arg0: Float!): String

  # implementation of + operator
  cashPl(arg0: Float!, arg1: Float!): Float

  # I/O
  cashRecv(arg0: String!): Float

  # I/O
  cashSend(arg0: Float!): String

  # output money amount as words
  cashWords(arg0: Float!): String

  # larger of two
  cashlarger(arg0: Float!, arg1: Float!): Float

  # smaller of two
  cashsmaller(arg0: Float!, arg1: Float!): Float

  # cube root
  cbrt(arg0: Float!): Float

  # implementation of = operator
  chareq(arg0: String!, arg1: String!): Boolean

  # implementation of >= operator
  charge(arg0: String!, arg1: String!): Boolean

  # implementation of > operator
  chargt(arg0: String!, arg1: String!): Boolean

  # I/O
  charin(arg0: String!): String

  # implementation of <= operator
  charle(arg0: String!, arg1: String!): Boolean

  # implementation of < operator
  charlt(arg0: String!, arg1: String!): Boolean

  # implementation of <> operator
  charne(arg0: String!, arg1: String!): Boolean

  # I/O
  charout(arg0: String!): String

  # I/O
  charrecv(arg0: String!): String

  # I/O
  charsend(arg0: String!): String

  # convert int4 to char
  chr(arg0: Int!): String

  # implementation of = operator
  cideq(arg0: String!, arg1: String!): Boolean

  # I/O
  cidin(arg0: String!): String

  # I/O
  cidout(arg0: String!): String

  # convert inet to cidr
  cidr(arg0: String!): String

  # I/O
  cidrIn(arg0: String!): String

  # I/O
  cidrOut(arg0: String!): String

  # I/O
  cidrRecv(arg0: String!): String

  # I/O
  cidrSend(arg0: String!): String

  # I/O
  cidrecv(arg0: String!): String

  # I/O
  cidsend(arg0: String!): String

  # implementation of |>> operator
  circleAbove(arg0: String!, arg1: String!): Boolean

  # implementation of + operator
  circleAddPt(arg0: String!, arg1: String!): String

  # implementation of <<| operator
  circleBelow(arg0: String!, arg1: String!): Boolean

  # implementation of @@ operator
  circleCenter(arg0: String!): String

  # implementation of @> operator
  circleContain(arg0: String!, arg1: String!): Boolean

  # implementation of @> operator
  circleContainPt(arg0: String!, arg1: String!): Boolean

  # implementation of <@ operator
  circleContained(arg0: String!, arg1: String!): Boolean

  # implementation of <-> operator
  circleDistance(arg0: String!, arg1: String!): Float

  # implementation of / operator
  circleDivPt(arg0: String!, arg1: String!): String

  # implementation of = operator
  circleEq(arg0: String!, arg1: String!): Boolean

  # implementation of >= operator
  circleGe(arg0: String!, arg1: String!): Boolean

  # implementation of > operator
  circleGt(arg0: String!, arg1: String!): Boolean

  # I/O
  circleIn(arg0: String!): String

  # implementation of <= operator
  circleLe(arg0: String!, arg1: String!): Boolean

  # implementation of << operator
  circleLeft(arg0: String!, arg1: String!): Boolean

  # implementation of < operator
  circleLt(arg0: String!, arg1: String!): Boolean

  # implementation of * operator
  circleMulPt(arg0: String!, arg1: String!): String

  # implementation of <> operator
  circleNe(arg0: String!, arg1: String!): Boolean

  # I/O
  circleOut(arg0: String!): String

  # implementation of |&> operator
  circleOverabove(arg0: String!, arg1: String!): Boolean

  # implementation of &<| operator
  circleOverbelow(arg0: String!, arg1: String!): Boolean

  # implementation of && operator
  circleOverlap(arg0: String!, arg1: String!): Boolean

  # implementation of &< operator
  circleOverleft(arg0: String!, arg1: String!): Boolean

  # implementation of &> operator
  circleOverright(arg0: String!, arg1: String!): Boolean

  # I/O
  circleRecv(arg0: String!): String

  # implementation of >> operator
  circleRight(arg0: String!, arg1: String!): Boolean

  # implementation of ~= operator
  circleSame(arg0: String!, arg1: String!): Boolean

  # I/O
  circleSend(arg0: String!): String

  # implementation of - operator
  circleSubPt(arg0: String!, arg1: String!): String

  # implementation of ## operator
  closeLb(arg0: String!, arg1: String!): String

  # implementation of ## operator
  closeLs(arg0: String!, arg1: String!): String

  # implementation of ## operator
  closeLseg(arg0: String!, arg1: String!): String

  # implementation of ## operator
  closePb(arg0: String!, arg1: String!): String

  # implementation of ## operator
  closePl(arg0: String!, arg1: String!): String

  # implementation of ## operator
  closePs(arg0: String!, arg1: String!): String

  # implementation of ## operator
  closeSb(arg0: String!, arg1: String!): String

  # implementation of ## operator
  closeSl(arg0: String!, arg1: String!): String

  # get description for table column
  colDescription(arg0: Float!, arg1: Int!): String

  # join selectivity for containment comparison operators
  contjoinsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!, arg4: String!): Float

  # restriction selectivity for containment comparison operators
  contsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!): Float

  # convert string with specified encoding names
  convert(arg0: String!, arg1: String!, arg2: String!): String

  # convert string with specified source encoding name
  convertFrom(arg0: String!, arg1: String!): String

  # convert string with specified destination encoding name
  convertTo(arg0: String!, arg1: String!): String

  # cosine
  cos(arg0: Float!): Float

  # cotangent
  cot(arg0: Float!): Float

  # I/O
  cstringIn(arg0: String!): String

  # I/O
  cstringOut(arg0: String!): String

  # I/O
  cstringRecv(arg0: String!): String

  # I/O
  cstringSend(arg0: String!): String

  # name of the current database
  currentDatabase: String

  # current schema name
  currentSchema: String

  # current schema search list
  currentSchemas(arg0: Boolean!): [String]

  # SHOW X as a function
  currentSetting(arg0: String!): String

  # current user name
  currentUser: String

  # map rows from cursor to XML
  cursorToXml(cursor: String!, count: Int!, nulls: Boolean!, tableforest: Boolean!, targetns: String!): String

  # map cursor structure to XML Schema
  cursorToXmlschema(cursor: String!, nulls: Boolean!, tableforest: Boolean!, targetns: String!): String

  # map database contents to XML
  databaseToXml(nulls: Boolean!, tableforest: Boolean!, targetns: String!): String

  # map database contents and structure to XML and XML Schema
  databaseToXmlAndXmlschema(nulls: Boolean!, tableforest: Boolean!, targetns: String!): String

  # map database structure to XML Schema
  databaseToXmlschema(nulls: Boolean!, tableforest: Boolean!, targetns: String!): String

  # less-equal-greater
  dateCmp(arg0: Date!, arg1: Date!): Int

  # less-equal-greater
  dateCmpTimestamp(arg0: Date!, arg1: Datetime!): Int

  # less-equal-greater
  dateCmpTimestamptz(arg0: Date!, arg1: Datetime!): Int

  # implementation of = operator
  dateEq(arg0: Date!, arg1: Date!): Boolean

  # implementation of = operator
  dateEqTimestamp(arg0: Date!, arg1: Datetime!): Boolean

  # implementation of = operator
  dateEqTimestamptz(arg0: Date!, arg1: Datetime!): Boolean

  # implementation of >= operator
  dateGe(arg0: Date!, arg1: Date!): Boolean

  # implementation of >= operator
  dateGeTimestamp(arg0: Date!, arg1: Datetime!): Boolean

  # implementation of >= operator
  dateGeTimestamptz(arg0: Date!, arg1: Datetime!): Boolean

  # implementation of > operator
  dateGt(arg0: Date!, arg1: Date!): Boolean

  # implementation of > operator
  dateGtTimestamp(arg0: Date!, arg1: Datetime!): Boolean

  # implementation of > operator
  dateGtTimestamptz(arg0: Date!, arg1: Datetime!): Boolean

  # I/O
  dateIn(arg0: String!): Date

  # larger of two
  dateLarger(arg0: Date!, arg1: Date!): Date

  # implementation of <= operator
  dateLe(arg0: Date!, arg1: Date!): Boolean

  # implementation of <= operator
  dateLeTimestamp(arg0: Date!, arg1: Datetime!): Boolean

  # implementation of <= operator
  dateLeTimestamptz(arg0: Date!, arg1: Datetime!): Boolean

  # implementation of < operator
  dateLt(arg0: Date!, arg1: Date!): Boolean

  # implementation of < operator
  dateLtTimestamp(arg0: Date!, arg1: Datetime!): Boolean

  # implementation of < operator
  dateLtTimestamptz(arg0: Date!, arg1: Datetime!): Boolean

  # implementation of - operator
  dateMi(arg0: Date!, arg1: Date!): Int

  # implementation of - operator
  dateMiInterval(arg0: Date!, arg1: IntervalInput!): Datetime

  # implementation of - operator
  dateMii(arg0: Date!, arg1: Int!): Date

  # implementation of <> operator
  dateNe(arg0: Date!, arg1: Date!): Boolean

  # implementation of <> operator
  dateNeTimestamp(arg0: Date!, arg1: Datetime!): Boolean

  # implementation of <> operator
  dateNeTimestamptz(arg0: Date!, arg1: Datetime!): Boolean

  # I/O
  dateOut(arg0: Date!): String

  # implementation of + operator
  datePlInterval(arg0: Date!, arg1: IntervalInput!): Datetime

  # implementation of + operator
  datePli(arg0: Date!, arg1: Int!): Date

  # I/O
  dateRecv(arg0: String!): Date

  # I/O
  dateSend(arg0: Date!): String

  # smaller of two
  dateSmaller(arg0: Date!, arg1: Date!): Date

  # sort support
  dateSortsupport(arg0: String!): String

  # convert a date range to canonical form
  daterangeCanonical(arg0: DateRangeInput!): DateRange!

  # float8 difference of two date values
  daterangeSubdiff(arg0: Date!, arg1: Date!): Float

  # implementation of + operator
  datetimePl(arg0: Date!, arg1: Time!): Datetime

  # implementation of + operator
  datetimetzPl(arg0: Date!, arg1: Time!): Datetime

  # implementation of ||/ operator
  dcbrt(arg0: Float!): Float

  # convert ascii-encoded text string into bytea value
  decode(arg0: String!, arg1: String!): String

  # radians to degrees
  degrees(arg0: Float!): Float

  # natural exponential (e^x)
  dexp(arg0: Float!): Float

  # box diagonal
  diagonal(arg0: String!): String

  # diameter of circle
  diameter(arg0: String!): Float

  # (internal)
  dispellInit(arg0: String!): String

  # (internal)
  dispellLexize(arg0: String!, arg1: String!, arg2: String!, arg3: String!): String

  # implementation of <-> operator
  distCpoint(arg0: String!, arg1: String!): Float

  # implementation of <-> operator
  distCpoly(arg0: String!, arg1: String!): Float

  # implementation of <-> operator
  distLb(arg0: String!, arg1: String!): Float

  # implementation of <-> operator
  distPb(arg0: String!, arg1: String!): Float

  # implementation of <-> operator
  distPc(arg0: String!, arg1: String!): Float

  # implementation of <-> operator
  distPl(arg0: String!, arg1: String!): Float

  # implementation of <-> operator
  distPolyp(arg0: String!, arg1: String!): Float

  # implementation of <-> operator
  distPpath(arg0: String!, arg1: String!): Float

  # implementation of <-> operator
  distPpoly(arg0: String!, arg1: String!): Float

  # implementation of <-> operator
  distPs(arg0: String!, arg1: String!): Float

  # implementation of <-> operator
  distSb(arg0: String!, arg1: String!): Float

  # implementation of <-> operator
  distSl(arg0: String!, arg1: String!): Float

  # trunc(x/y)
  div(arg0: Float!, arg1: Float!): Float

  # natural logarithm
  dlog1(arg0: Float!): Float

  # base 10 logarithm
  dlog10(arg0: Float!): Float

  # I/O
  domainIn(arg0: String, arg1: Float, arg2: Int): String

  # I/O
  domainRecv(arg0: String, arg1: Float, arg2: Int): String

  # implementation of ^ operator
  dpow(arg0: Float!, arg1: Float!): Float

  # round to nearest integer
  dround(arg0: Float!): Float

  # (internal)
  dsimpleInit(arg0: String!): String

  # (internal)
  dsimpleLexize(arg0: String!, arg1: String!, arg2: String!, arg3: String!): String

  # implementation of |/ operator
  dsqrt(arg0: Float!): Float

  # (internal)
  dsynonymInit(arg0: String!): String

  # (internal)
  dsynonymLexize(arg0: String!, arg1: String!, arg2: String!, arg3: String!): String

  # truncate to integer
  dtrunc(arg0: Float!): Float

  # implementation of <@ operator
  elemContainedByRange(arg0: String!, arg1: String!): Boolean

  # convert bytea value into some ascii-only text string
  encode(arg0: String!, arg1: String!): String

  # less-equal-greater
  enumCmp(arg0: String!, arg1: String!): Int

  # implementation of = operator
  enumEq(arg0: String!, arg1: String!): Boolean

  # first value of the input enum type
  enumFirst(arg0: String): String

  # implementation of >= operator
  enumGe(arg0: String!, arg1: String!): Boolean

  # implementation of > operator
  enumGt(arg0: String!, arg1: String!): Boolean

  # I/O
  enumIn(arg0: String!, arg1: Float!): String

  # larger of two
  enumLarger(arg0: String!, arg1: String!): String

  # last value of the input enum type
  enumLast(arg0: String): String

  # implementation of <= operator
  enumLe(arg0: String!, arg1: String!): Boolean

  # implementation of < operator
  enumLt(arg0: String!, arg1: String!): Boolean

  # implementation of <> operator
  enumNe(arg0: String!, arg1: String!): Boolean

  # I/O
  enumOut(arg0: String!): String

  # I/O
  enumRecv(arg0: String!, arg1: Float!): String

  # I/O
  enumSend(arg0: String!): String

  # smaller of two
  enumSmaller(arg0: String!, arg1: String!): String

  # join selectivity of = and related operators
  eqjoinsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!, arg4: String!): Float

  # restriction selectivity of = and related operators
  eqsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!): Float

  # I/O
  eventTriggerIn(arg0: String): String

  # I/O
  eventTriggerOut(arg0: String!): String

  # factorial
  factorial(arg0: Int!): Float

  # address family (4 for IPv4, 6 for IPv6)
  family(arg0: String!): Int

  # I/O
  fdwHandlerIn(arg0: String): String

  # I/O
  fdwHandlerOut(arg0: String!): String

  # implementation of / operator
  float48div(arg0: Float!, arg1: Float!): Float

  # implementation of = operator
  float48eq(arg0: Float!, arg1: Float!): Boolean

  # implementation of >= operator
  float48ge(arg0: Float!, arg1: Float!): Boolean

  # implementation of > operator
  float48gt(arg0: Float!, arg1: Float!): Boolean

  # implementation of <= operator
  float48le(arg0: Float!, arg1: Float!): Boolean

  # implementation of < operator
  float48lt(arg0: Float!, arg1: Float!): Boolean

  # implementation of - operator
  float48mi(arg0: Float!, arg1: Float!): Float

  # implementation of * operator
  float48mul(arg0: Float!, arg1: Float!): Float

  # implementation of <> operator
  float48ne(arg0: Float!, arg1: Float!): Boolean

  # implementation of + operator
  float48pl(arg0: Float!, arg1: Float!): Float

  # aggregate transition function
  float4Accum(arg0: [Float]!, arg1: Float!): [Float]

  # implementation of @ operator
  float4abs(arg0: Float!): Float

  # implementation of / operator
  float4div(arg0: Float!, arg1: Float!): Float

  # implementation of = operator
  float4eq(arg0: Float!, arg1: Float!): Boolean

  # implementation of >= operator
  float4ge(arg0: Float!, arg1: Float!): Boolean

  # implementation of > operator
  float4gt(arg0: Float!, arg1: Float!): Boolean

  # I/O
  float4in(arg0: String!): Float

  # larger of two
  float4larger(arg0: Float!, arg1: Float!): Float

  # implementation of <= operator
  float4le(arg0: Float!, arg1: Float!): Boolean

  # implementation of < operator
  float4lt(arg0: Float!, arg1: Float!): Boolean

  # implementation of - operator
  float4mi(arg0: Float!, arg1: Float!): Float

  # implementation of * operator
  float4mul(arg0: Float!, arg1: Float!): Float

  # implementation of <> operator
  float4ne(arg0: Float!, arg1: Float!): Boolean

  # I/O
  float4out(arg0: Float!): String

  # implementation of + operator
  float4pl(arg0: Float!, arg1: Float!): Float

  # I/O
  float4recv(arg0: String!): Float

  # I/O
  float4send(arg0: Float!): String

  # smaller of two
  float4smaller(arg0: Float!, arg1: Float!): Float

  # implementation of - operator
  float4um(arg0: Float!): Float

  # implementation of + operator
  float4up(arg0: Float!): Float

  # implementation of / operator
  float84div(arg0: Float!, arg1: Float!): Float

  # implementation of = operator
  float84eq(arg0: Float!, arg1: Float!): Boolean

  # implementation of >= operator
  float84ge(arg0: Float!, arg1: Float!): Boolean

  # implementation of > operator
  float84gt(arg0: Float!, arg1: Float!): Boolean

  # implementation of <= operator
  float84le(arg0: Float!, arg1: Float!): Boolean

  # implementation of < operator
  float84lt(arg0: Float!, arg1: Float!): Boolean

  # implementation of - operator
  float84mi(arg0: Float!, arg1: Float!): Float

  # implementation of * operator
  float84mul(arg0: Float!, arg1: Float!): Float

  # implementation of <> operator
  float84ne(arg0: Float!, arg1: Float!): Boolean

  # implementation of + operator
  float84pl(arg0: Float!, arg1: Float!): Float

  # aggregate transition function
  float8Accum(arg0: [Float]!, arg1: Float!): [Float]

  # aggregate final function
  float8Avg(arg0: [Float]!): Float

  # aggregate final function
  float8Corr(arg0: [Float]!): Float

  # aggregate final function
  float8CovarPop(arg0: [Float]!): Float

  # aggregate final function
  float8CovarSamp(arg0: [Float]!): Float

  # aggregate transition function
  float8RegrAccum(arg0: [Float]!, arg1: Float!, arg2: Float!): [Float]

  # aggregate final function
  float8RegrAvgx(arg0: [Float]!): Float

  # aggregate final function
  float8RegrAvgy(arg0: [Float]!): Float

  # aggregate final function
  float8RegrIntercept(arg0: [Float]!): Float

  # aggregate final function
  float8RegrR2(arg0: [Float]!): Float

  # aggregate final function
  float8RegrSlope(arg0: [Float]!): Float

  # aggregate final function
  float8RegrSxx(arg0: [Float]!): Float

  # aggregate final function
  float8RegrSxy(arg0: [Float]!): Float

  # aggregate final function
  float8RegrSyy(arg0: [Float]!): Float

  # aggregate final function
  float8StddevPop(arg0: [Float]!): Float

  # aggregate final function
  float8StddevSamp(arg0: [Float]!): Float

  # aggregate final function
  float8VarPop(arg0: [Float]!): Float

  # aggregate final function
  float8VarSamp(arg0: [Float]!): Float

  # implementation of @ operator
  float8abs(arg0: Float!): Float

  # implementation of / operator
  float8div(arg0: Float!, arg1: Float!): Float

  # implementation of = operator
  float8eq(arg0: Float!, arg1: Float!): Boolean

  # implementation of >= operator
  float8ge(arg0: Float!, arg1: Float!): Boolean

  # implementation of > operator
  float8gt(arg0: Float!, arg1: Float!): Boolean

  # I/O
  float8in(arg0: String!): Float

  # larger of two
  float8larger(arg0: Float!, arg1: Float!): Float

  # implementation of <= operator
  float8le(arg0: Float!, arg1: Float!): Boolean

  # implementation of < operator
  float8lt(arg0: Float!, arg1: Float!): Boolean

  # implementation of - operator
  float8mi(arg0: Float!, arg1: Float!): Float

  # implementation of * operator
  float8mul(arg0: Float!, arg1: Float!): Float

  # implementation of <> operator
  float8ne(arg0: Float!, arg1: Float!): Boolean

  # I/O
  float8out(arg0: Float!): String

  # implementation of + operator
  float8pl(arg0: Float!, arg1: Float!): Float

  # I/O
  float8recv(arg0: String!): Float

  # I/O
  float8send(arg0: Float!): String

  # smaller of two
  float8smaller(arg0: Float!, arg1: Float!): Float

  # implementation of - operator
  float8um(arg0: Float!): Float

  # implementation of + operator
  float8up(arg0: Float!): Float

  # implementation of * operator
  flt4MulCash(arg0: Float!, arg1: Float!): Float

  # implementation of * operator
  flt8MulCash(arg0: Float!, arg1: Float!): Float

  # (internal)
  fmgrCValidator(arg0: Float!): String

  # (internal)
  fmgrInternalValidator(arg0: Float!): String

  # (internal)
  fmgrSqlValidator(arg0: Float!): String

  # format a type oid and atttypmod to canonical SQL
  formatType(arg0: Float, arg1: Int): String

  # get byte
  getByte(arg0: String!, arg1: Int!): Int

  # get current tsearch configuration
  getCurrentTsConfig: Float

  # encoding name of current database
  getdatabaseencoding: String

  # deprecated, use current_user instead
  getpgusername: String

  # GIN tsvector support
  ginCmpPrefix(arg0: String!, arg1: String!, arg2: Int!, arg3: String!): Int

  # GIN tsvector support
  ginCmpTslexeme(arg0: String!, arg1: String!): Int

  # GIN support
  ginCompareJsonb(arg0: String!, arg1: String!): Int

  # GIN support
  ginConsistentJsonb(arg0: String!, arg1: Int!, arg2: String!, arg3: Int!, arg4: String!, arg5: String!, arg6: String!, arg7: String!): Boolean

  # GIN support
  ginConsistentJsonbPath(arg0: String!, arg1: Int!, arg2: String!, arg3: Int!, arg4: String!, arg5: String!, arg6: String!, arg7: String!): Boolean

  # GIN support
  ginExtractJsonb(arg0: String!, arg1: String!, arg2: String!): String

  # GIN support
  ginExtractJsonbPath(arg0: String!, arg1: String!, arg2: String!): String

  # GIN support
  ginExtractJsonbQuery(arg0: String!, arg1: String!, arg2: Int!, arg3: String!, arg4: String!, arg5: String!, arg6: String!): String

  # GIN support
  ginExtractJsonbQueryPath(arg0: String!, arg1: String!, arg2: Int!, arg3: String!, arg4: String!, arg5: String!, arg6: String!): String

  # GIN support
  ginTriconsistentJsonb(arg0: String!, arg1: Int!, arg2: String!, arg3: Int!, arg4: String!, arg5: String!, arg6: String!): String

  # GIN support
  ginTriconsistentJsonbPath(arg0: String!, arg1: Int!, arg2: String!, arg3: Int!, arg4: String!, arg5: String!, arg6: String!): String

  # GIN tsvector support
  ginTsqueryTriconsistent(arg0: String!, arg1: Int!, arg2: String!, arg3: Int!, arg4: String!, arg5: String!, arg6: String!): String

  # GIN array support
  ginarrayconsistent(arg0: String!, arg1: Int!, arg2: String!, arg3: Int!, arg4: String!, arg5: String!, arg6: String!, arg7: String!): Boolean

  # GIN array support
  ginarraytriconsistent(arg0: String!, arg1: Int!, arg2: String!, arg3: Int!, arg4: String!, arg5: String!, arg6: String!): String

  # gin(internal)
  ginoptions(arg0: [String]!, arg1: Boolean!): String

  # GIN array support
  ginqueryarrayextract(arg0: String!, arg1: String!, arg2: Int!, arg3: String!, arg4: String!, arg5: String!, arg6: String!): String

  # GiST support
  gistBboxDistance(arg0: String!, arg1: String!, arg2: Int!, arg3: Float!): Float

  # GiST support
  gistBoxCompress(arg0: String!): String

  # GiST support
  gistBoxConsistent(arg0: String!, arg1: String!, arg2: Int!, arg3: Float!, arg4: String!): Boolean

  # GiST support
  gistBoxDecompress(arg0: String!): String

  # GiST support
  gistBoxFetch(arg0: String!): String

  # GiST support
  gistBoxPenalty(arg0: String!, arg1: String!, arg2: String!): String

  # GiST support
  gistBoxPicksplit(arg0: String!, arg1: String!): String

  # GiST support
  gistBoxSame(arg0: String!, arg1: String!, arg2: String!): String

  # GiST support
  gistBoxUnion(arg0: String!, arg1: String!): String

  # GiST support
  gistCircleCompress(arg0: String!): String

  # GiST support
  gistCircleConsistent(arg0: String!, arg1: String!, arg2: Int!, arg3: Float!, arg4: String!): Boolean

  # GiST support
  gistPointCompress(arg0: String!): String

  # GiST support
  gistPointConsistent(arg0: String!, arg1: String!, arg2: Int!, arg3: Float!, arg4: String!): Boolean

  # GiST support
  gistPointDistance(arg0: String!, arg1: String!, arg2: Int!, arg3: Float!): Float

  # GiST support
  gistPointFetch(arg0: String!): String

  # GiST support
  gistPolyCompress(arg0: String!): String

  # GiST support
  gistPolyConsistent(arg0: String!, arg1: String!, arg2: Int!, arg3: Float!, arg4: String!): Boolean

  # gist(internal)
  gistcanreturn(arg0: String!, arg1: Int!): Boolean

  # gist(internal)
  gistoptions(arg0: [String]!, arg1: Boolean!): String

  # GiST tsquery support
  gtsqueryCompress(arg0: String!): String

  # GiST tsquery support
  gtsqueryConsistent(arg0: String!, arg1: String!, arg2: Int!, arg3: Float!, arg4: String!): Boolean

  # GiST tsquery support
  gtsqueryDecompress(arg0: String!): String

  # GiST tsquery support
  gtsqueryPenalty(arg0: String!, arg1: String!, arg2: String!): String

  # GiST tsquery support
  gtsqueryPicksplit(arg0: String!, arg1: String!): String

  # GiST tsquery support
  gtsquerySame(arg0: Int!, arg1: Int!, arg2: String!): String

  # GiST tsquery support
  gtsqueryUnion(arg0: String!, arg1: String!): String

  # GiST tsvector support
  gtsvectorCompress(arg0: String!): String

  # GiST tsvector support
  gtsvectorConsistent(arg0: String!, arg1: String!, arg2: Int!, arg3: Float!, arg4: String!): Boolean

  # GiST tsvector support
  gtsvectorDecompress(arg0: String!): String

  # GiST tsvector support
  gtsvectorPenalty(arg0: String!, arg1: String!, arg2: String!): String

  # GiST tsvector support
  gtsvectorPicksplit(arg0: String!, arg1: String!): String

  # GiST tsvector support
  gtsvectorSame(arg0: String!, arg1: String!, arg2: String!): String

  # GiST tsvector support
  gtsvectorUnion(arg0: String!, arg1: String!): String

  # I/O
  gtsvectorin(arg0: String!): String

  # I/O
  gtsvectorout(arg0: String!): String

  # hash
  hashAclitem(arg0: String!): Int

  # hash
  hashArray(arg0: String!): Int

  # hash
  hashNumeric(arg0: Float!): Int

  # hash a range
  hashRange(arg0: String!): Int

  # hash
  hashbpchar(arg0: String!): Int

  # hash
  hashchar(arg0: String!): Int

  # hash
  hashenum(arg0: String!): Int

  # hash
  hashfloat4(arg0: Float!): Int

  # hash
  hashfloat8(arg0: Float!): Int

  # hash
  hashinet(arg0: String!): Int

  # hash
  hashint2(arg0: Int!): Int

  # hash
  hashint2vector(arg0: [Int]!): Int

  # hash
  hashint4(arg0: Int!): Int

  # hash
  hashint8(arg0: Int!): Int

  # hash
  hashmacaddr(arg0: String!): Int

  # hash
  hashname(arg0: String!): Int

  # hash
  hashoid(arg0: Float!): Int

  # hash
  hashoidvector(arg0: [Float]!): Int

  # hash(internal)
  hashoptions(arg0: [String]!, arg1: Boolean!): String

  # hash
  hashtext(arg0: String!): Int

  # hash
  hashvarlena(arg0: String!): Int

  # box height
  height(arg0: String!): Float

  # show address octets only
  host(arg0: String!): String

  # hostmask of address
  hostmask(arg0: String!): String

  # join selectivity of ILIKE
  iclikejoinsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!, arg4: String!): Float

  # restriction selectivity of ILIKE
  iclikesel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!): Float

  # join selectivity of NOT ILIKE
  icnlikejoinsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!, arg4: String!): Float

  # restriction selectivity of NOT ILIKE
  icnlikesel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!): Float

  # join selectivity of case-insensitive regex match
  icregexeqjoinsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!, arg4: String!): Float

  # restriction selectivity of case-insensitive regex match
  icregexeqsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!): Float

  # join selectivity of case-insensitive regex non-match
  icregexnejoinsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!, arg4: String!): Float

  # restriction selectivity of case-insensitive regex non-match
  icregexnesel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!): Float

  # inet address of the client
  inetClientAddr: String

  # client\'s port number for this connection
  inetClientPort: Int

  # GiST support
  inetGistCompress(arg0: String!): String

  # GiST support
  inetGistConsistent(arg0: String!, arg1: String!, arg2: Int!, arg3: Float!, arg4: String!): Boolean

  # GiST support
  inetGistDecompress(arg0: String!): String

  # GiST support
  inetGistFetch(arg0: String!): String

  # GiST support
  inetGistPenalty(arg0: String!, arg1: String!, arg2: String!): String

  # GiST support
  inetGistPicksplit(arg0: String!, arg1: String!): String

  # GiST support
  inetGistSame(arg0: String!, arg1: String!, arg2: String!): String

  # GiST support
  inetGistUnion(arg0: String!, arg1: String!): String

  # I/O
  inetIn(arg0: String!): String

  # the smallest network which includes both of the given networks
  inetMerge(arg0: String!, arg1: String!): String

  # I/O
  inetOut(arg0: String!): String

  # I/O
  inetRecv(arg0: String!): String

  # are the addresses from the same family?
  inetSameFamily(arg0: String!, arg1: String!): Boolean

  # I/O
  inetSend(arg0: String!): String

  # inet address of the server
  inetServerAddr: String

  # server\'s port number for this connection
  inetServerPort: Int

  # implementation of & operator
  inetand(arg0: String!, arg1: String!): String

  # implementation of - operator
  inetmi(arg0: String!, arg1: String!): Int

  # implementation of - operator
  inetmiInt8(arg0: String!, arg1: Int!): String

  # implementation of ~ operator
  inetnot(arg0: String!): String

  # implementation of | operator
  inetor(arg0: String!, arg1: String!): String

  # implementation of + operator
  inetpl(arg0: String!, arg1: Int!): String

  # capitalize each word
  initcap(arg0: String!): String

  # implementation of / operator
  int24div(arg0: Int!, arg1: Int!): Int

  # implementation of = operator
  int24eq(arg0: Int!, arg1: Int!): Boolean

  # implementation of >= operator
  int24ge(arg0: Int!, arg1: Int!): Boolean

  # implementation of > operator
  int24gt(arg0: Int!, arg1: Int!): Boolean

  # implementation of <= operator
  int24le(arg0: Int!, arg1: Int!): Boolean

  # implementation of < operator
  int24lt(arg0: Int!, arg1: Int!): Boolean

  # implementation of - operator
  int24mi(arg0: Int!, arg1: Int!): Int

  # implementation of * operator
  int24mul(arg0: Int!, arg1: Int!): Int

  # implementation of <> operator
  int24ne(arg0: Int!, arg1: Int!): Boolean

  # implementation of + operator
  int24pl(arg0: Int!, arg1: Int!): Int

  # implementation of / operator
  int28div(arg0: Int!, arg1: Int!): Int

  # implementation of = operator
  int28eq(arg0: Int!, arg1: Int!): Boolean

  # implementation of >= operator
  int28ge(arg0: Int!, arg1: Int!): Boolean

  # implementation of > operator
  int28gt(arg0: Int!, arg1: Int!): Boolean

  # implementation of <= operator
  int28le(arg0: Int!, arg1: Int!): Boolean

  # implementation of < operator
  int28lt(arg0: Int!, arg1: Int!): Boolean

  # implementation of - operator
  int28mi(arg0: Int!, arg1: Int!): Int

  # implementation of * operator
  int28mul(arg0: Int!, arg1: Int!): Int

  # implementation of <> operator
  int28ne(arg0: Int!, arg1: Int!): Boolean

  # implementation of + operator
  int28pl(arg0: Int!, arg1: Int!): Int

  # aggregate transition function
  int2Accum(arg0: String, arg1: Int): String

  # aggregate transition function
  int2AccumInv(arg0: String, arg1: Int): String

  # aggregate transition function
  int2AvgAccum(arg0: [Int]!, arg1: Int!): [Int]

  # aggregate transition function
  int2AvgAccumInv(arg0: [Int]!, arg1: Int!): [Int]

  # implementation of * operator
  int2MulCash(arg0: Int!, arg1: Float!): Float

  # aggregate transition function
  int2Sum(arg0: Int, arg1: Int): Int

  # implementation of @ operator
  int2abs(arg0: Int!): Int

  # implementation of & operator
  int2and(arg0: Int!, arg1: Int!): Int

  # implementation of / operator
  int2div(arg0: Int!, arg1: Int!): Int

  # implementation of = operator
  int2eq(arg0: Int!, arg1: Int!): Boolean

  # implementation of >= operator
  int2ge(arg0: Int!, arg1: Int!): Boolean

  # implementation of > operator
  int2gt(arg0: Int!, arg1: Int!): Boolean

  # I/O
  int2in(arg0: String!): Int

  # aggregate final function
  int2int4Sum(arg0: [Int]!): Int

  # larger of two
  int2larger(arg0: Int!, arg1: Int!): Int

  # implementation of <= operator
  int2le(arg0: Int!, arg1: Int!): Boolean

  # implementation of < operator
  int2lt(arg0: Int!, arg1: Int!): Boolean

  # implementation of - operator
  int2mi(arg0: Int!, arg1: Int!): Int

  # implementation of % operator
  int2mod(arg0: Int!, arg1: Int!): Int

  # implementation of * operator
  int2mul(arg0: Int!, arg1: Int!): Int

  # implementation of <> operator
  int2ne(arg0: Int!, arg1: Int!): Boolean

  # implementation of ~ operator
  int2not(arg0: Int!): Int

  # implementation of | operator
  int2or(arg0: Int!, arg1: Int!): Int

  # I/O
  int2out(arg0: Int!): String

  # implementation of + operator
  int2pl(arg0: Int!, arg1: Int!): Int

  # I/O
  int2recv(arg0: String!): Int

  # I/O
  int2send(arg0: Int!): String

  # implementation of << operator
  int2shl(arg0: Int!, arg1: Int!): Int

  # implementation of >> operator
  int2shr(arg0: Int!, arg1: Int!): Int

  # smaller of two
  int2smaller(arg0: Int!, arg1: Int!): Int

  # implementation of - operator
  int2um(arg0: Int!): Int

  # implementation of + operator
  int2up(arg0: Int!): Int

  # implementation of = operator
  int2vectoreq(arg0: [Int]!, arg1: [Int]!): Boolean

  # I/O
  int2vectorin(arg0: String!): [Int]

  # I/O
  int2vectorout(arg0: [Int]!): String

  # I/O
  int2vectorrecv(arg0: String!): [Int]

  # I/O
  int2vectorsend(arg0: [Int]!): String

  # implementation of # operator
  int2xor(arg0: Int!, arg1: Int!): Int

  # implementation of / operator
  int42div(arg0: Int!, arg1: Int!): Int

  # implementation of = operator
  int42eq(arg0: Int!, arg1: Int!): Boolean

  # implementation of >= operator
  int42ge(arg0: Int!, arg1: Int!): Boolean

  # implementation of > operator
  int42gt(arg0: Int!, arg1: Int!): Boolean

  # implementation of <= operator
  int42le(arg0: Int!, arg1: Int!): Boolean

  # implementation of < operator
  int42lt(arg0: Int!, arg1: Int!): Boolean

  # implementation of - operator
  int42mi(arg0: Int!, arg1: Int!): Int

  # implementation of * operator
  int42mul(arg0: Int!, arg1: Int!): Int

  # implementation of <> operator
  int42ne(arg0: Int!, arg1: Int!): Boolean

  # implementation of + operator
  int42pl(arg0: Int!, arg1: Int!): Int

  # implementation of / operator
  int48div(arg0: Int!, arg1: Int!): Int

  # implementation of = operator
  int48eq(arg0: Int!, arg1: Int!): Boolean

  # implementation of >= operator
  int48ge(arg0: Int!, arg1: Int!): Boolean

  # implementation of > operator
  int48gt(arg0: Int!, arg1: Int!): Boolean

  # implementation of <= operator
  int48le(arg0: Int!, arg1: Int!): Boolean

  # implementation of < operator
  int48lt(arg0: Int!, arg1: Int!): Boolean

  # implementation of - operator
  int48mi(arg0: Int!, arg1: Int!): Int

  # implementation of * operator
  int48mul(arg0: Int!, arg1: Int!): Int

  # implementation of <> operator
  int48ne(arg0: Int!, arg1: Int!): Boolean

  # implementation of + operator
  int48pl(arg0: Int!, arg1: Int!): Int

  # aggregate transition function
  int4Accum(arg0: String, arg1: Int): String

  # aggregate transition function
  int4AccumInv(arg0: String, arg1: Int): String

  # aggregate transition function
  int4AvgAccum(arg0: [Int]!, arg1: Int!): [Int]

  # aggregate transition function
  int4AvgAccumInv(arg0: [Int]!, arg1: Int!): [Int]

  # implementation of * operator
  int4MulCash(arg0: Int!, arg1: Float!): Float

  # aggregate transition function
  int4Sum(arg0: Int, arg1: Int): Int

  # implementation of @ operator
  int4abs(arg0: Int!): Int

  # implementation of & operator
  int4and(arg0: Int!, arg1: Int!): Int

  # implementation of / operator
  int4div(arg0: Int!, arg1: Int!): Int

  # implementation of = operator
  int4eq(arg0: Int!, arg1: Int!): Boolean

  # implementation of >= operator
  int4ge(arg0: Int!, arg1: Int!): Boolean

  # implementation of > operator
  int4gt(arg0: Int!, arg1: Int!): Boolean

  # I/O
  int4in(arg0: String!): Int

  # increment
  int4inc(arg0: Int!): Int

  # larger of two
  int4larger(arg0: Int!, arg1: Int!): Int

  # implementation of <= operator
  int4le(arg0: Int!, arg1: Int!): Boolean

  # implementation of < operator
  int4lt(arg0: Int!, arg1: Int!): Boolean

  # implementation of - operator
  int4mi(arg0: Int!, arg1: Int!): Int

  # implementation of % operator
  int4mod(arg0: Int!, arg1: Int!): Int

  # implementation of * operator
  int4mul(arg0: Int!, arg1: Int!): Int

  # implementation of <> operator
  int4ne(arg0: Int!, arg1: Int!): Boolean

  # implementation of ~ operator
  int4not(arg0: Int!): Int

  # implementation of | operator
  int4or(arg0: Int!, arg1: Int!): Int

  # I/O
  int4out(arg0: Int!): String

  # implementation of + operator
  int4pl(arg0: Int!, arg1: Int!): Int

  # convert an int4 range to canonical form
  int4rangeCanonical(arg0: IntegerRangeInput!): IntegerRange!

  # float8 difference of two int4 values
  int4rangeSubdiff(arg0: Int!, arg1: Int!): Float

  # I/O
  int4recv(arg0: String!): Int

  # I/O
  int4send(arg0: Int!): String

  # implementation of << operator
  int4shl(arg0: Int!, arg1: Int!): Int

  # implementation of >> operator
  int4shr(arg0: Int!, arg1: Int!): Int

  # smaller of two
  int4smaller(arg0: Int!, arg1: Int!): Int

  # implementation of - operator
  int4um(arg0: Int!): Int

  # implementation of + operator
  int4up(arg0: Int!): Int

  # implementation of # operator
  int4xor(arg0: Int!, arg1: Int!): Int

  # implementation of / operator
  int82div(arg0: Int!, arg1: Int!): Int

  # implementation of = operator
  int82eq(arg0: Int!, arg1: Int!): Boolean

  # implementation of >= operator
  int82ge(arg0: Int!, arg1: Int!): Boolean

  # implementation of > operator
  int82gt(arg0: Int!, arg1: Int!): Boolean

  # implementation of <= operator
  int82le(arg0: Int!, arg1: Int!): Boolean

  # implementation of < operator
  int82lt(arg0: Int!, arg1: Int!): Boolean

  # implementation of - operator
  int82mi(arg0: Int!, arg1: Int!): Int

  # implementation of * operator
  int82mul(arg0: Int!, arg1: Int!): Int

  # implementation of <> operator
  int82ne(arg0: Int!, arg1: Int!): Boolean

  # implementation of + operator
  int82pl(arg0: Int!, arg1: Int!): Int

  # implementation of / operator
  int84div(arg0: Int!, arg1: Int!): Int

  # implementation of = operator
  int84eq(arg0: Int!, arg1: Int!): Boolean

  # implementation of >= operator
  int84ge(arg0: Int!, arg1: Int!): Boolean

  # implementation of > operator
  int84gt(arg0: Int!, arg1: Int!): Boolean

  # implementation of <= operator
  int84le(arg0: Int!, arg1: Int!): Boolean

  # implementation of < operator
  int84lt(arg0: Int!, arg1: Int!): Boolean

  # implementation of - operator
  int84mi(arg0: Int!, arg1: Int!): Int

  # implementation of * operator
  int84mul(arg0: Int!, arg1: Int!): Int

  # implementation of <> operator
  int84ne(arg0: Int!, arg1: Int!): Boolean

  # implementation of + operator
  int84pl(arg0: Int!, arg1: Int!): Int

  # aggregate transition function
  int8Accum(arg0: String, arg1: Int): String

  # aggregate transition function
  int8AccumInv(arg0: String, arg1: Int): String

  # aggregate final function
  int8Avg(arg0: [Int]!): Float

  # aggregate transition function
  int8AvgAccum(arg0: String, arg1: Int): String

  # aggregate transition function
  int8AvgAccumInv(arg0: String, arg1: Int): String

  # aggregate transition function
  int8Sum(arg0: Float, arg1: Int): Float

  # implementation of @ operator
  int8abs(arg0: Int!): Int

  # implementation of & operator
  int8and(arg0: Int!, arg1: Int!): Int

  # decrement
  int8dec(arg0: Int!): Int

  # decrement, ignores second argument
  int8decAny(arg0: Int!, arg1: String!): Int

  # implementation of / operator
  int8div(arg0: Int!, arg1: Int!): Int

  # implementation of = operator
  int8eq(arg0: Int!, arg1: Int!): Boolean

  # implementation of >= operator
  int8ge(arg0: Int!, arg1: Int!): Boolean

  # implementation of > operator
  int8gt(arg0: Int!, arg1: Int!): Boolean

  # I/O
  int8in(arg0: String!): Int

  # increment
  int8inc(arg0: Int!): Int

  # increment, ignores second argument
  int8incAny(arg0: Int!, arg1: String!): Int

  # aggregate transition function
  int8incFloat8Float8(arg0: Int!, arg1: Float!, arg2: Float!): Int

  # larger of two
  int8larger(arg0: Int!, arg1: Int!): Int

  # implementation of <= operator
  int8le(arg0: Int!, arg1: Int!): Boolean

  # implementation of < operator
  int8lt(arg0: Int!, arg1: Int!): Boolean

  # implementation of - operator
  int8mi(arg0: Int!, arg1: Int!): Int

  # implementation of % operator
  int8mod(arg0: Int!, arg1: Int!): Int

  # implementation of * operator
  int8mul(arg0: Int!, arg1: Int!): Int

  # implementation of <> operator
  int8ne(arg0: Int!, arg1: Int!): Boolean

  # implementation of ~ operator
  int8not(arg0: Int!): Int

  # implementation of | operator
  int8or(arg0: Int!, arg1: Int!): Int

  # I/O
  int8out(arg0: Int!): String

  # implementation of + operator
  int8pl(arg0: Int!, arg1: Int!): Int

  # implementation of + operator
  int8plInet(arg0: Int!, arg1: String!): String

  # convert an int8 range to canonical form
  int8rangeCanonical(arg0: BigIntegerRangeInput!): BigIntegerRange!

  # float8 difference of two int8 values
  int8rangeSubdiff(arg0: Int!, arg1: Int!): Float

  # I/O
  int8recv(arg0: String!): Int

  # I/O
  int8send(arg0: Int!): String

  # implementation of << operator
  int8shl(arg0: Int!, arg1: Int!): Int

  # implementation of >> operator
  int8shr(arg0: Int!, arg1: Int!): Int

  # smaller of two
  int8smaller(arg0: Int!, arg1: Int!): Int

  # implementation of - operator
  int8um(arg0: Int!): Int

  # implementation of + operator
  int8up(arg0: Int!): Int

  # implementation of # operator
  int8xor(arg0: Int!, arg1: Int!): Int

  # implementation of + operator
  integerPlDate(arg0: Int!, arg1: Date!): Date

  # implementation of ?# operator
  interLb(arg0: String!, arg1: String!): Boolean

  # implementation of ?# operator
  interSb(arg0: String!, arg1: String!): Boolean

  # implementation of ?# operator
  interSl(arg0: String!, arg1: String!): Boolean

  # I/O
  internalIn(arg0: String): String

  # I/O
  internalOut(arg0: String!): String

  # aggregate transition function
  intervalAccum(arg0: [IntervalInput]!, arg1: IntervalInput!): [Interval]

  # aggregate transition function
  intervalAccumInv(arg0: [IntervalInput]!, arg1: IntervalInput!): [Interval]

  # aggregate final function
  intervalAvg(arg0: [IntervalInput]!): Interval

  # less-equal-greater
  intervalCmp(arg0: IntervalInput!, arg1: IntervalInput!): Int

  # implementation of / operator
  intervalDiv(arg0: IntervalInput!, arg1: Float!): Interval

  # implementation of = operator
  intervalEq(arg0: IntervalInput!, arg1: IntervalInput!): Boolean

  # implementation of >= operator
  intervalGe(arg0: IntervalInput!, arg1: IntervalInput!): Boolean

  # implementation of > operator
  intervalGt(arg0: IntervalInput!, arg1: IntervalInput!): Boolean

  # hash
  intervalHash(arg0: IntervalInput!): Int

  # I/O
  intervalIn(arg0: String!, arg1: Float!, arg2: Int!): Interval

  # larger of two
  intervalLarger(arg0: IntervalInput!, arg1: IntervalInput!): Interval

  # implementation of <= operator
  intervalLe(arg0: IntervalInput!, arg1: IntervalInput!): Boolean

  # implementation of < operator
  intervalLt(arg0: IntervalInput!, arg1: IntervalInput!): Boolean

  # implementation of - operator
  intervalMi(arg0: IntervalInput!, arg1: IntervalInput!): Interval

  # implementation of * operator
  intervalMul(arg0: IntervalInput!, arg1: Float!): Interval

  # implementation of <> operator
  intervalNe(arg0: IntervalInput!, arg1: IntervalInput!): Boolean

  # I/O
  intervalOut(arg0: IntervalInput!): String

  # implementation of + operator
  intervalPl(arg0: IntervalInput!, arg1: IntervalInput!): Interval

  # implementation of + operator
  intervalPlDate(arg0: IntervalInput!, arg1: Date!): Datetime

  # implementation of + operator
  intervalPlTime(arg0: IntervalInput!, arg1: Time!): Time

  # implementation of + operator
  intervalPlTimestamp(arg0: IntervalInput!, arg1: Datetime!): Datetime

  # implementation of + operator
  intervalPlTimestamptz(arg0: IntervalInput!, arg1: Datetime!): Datetime

  # implementation of + operator
  intervalPlTimetz(arg0: IntervalInput!, arg1: Time!): Time

  # I/O
  intervalRecv(arg0: String!, arg1: Float!, arg2: Int!): Interval

  # I/O
  intervalSend(arg0: IntervalInput!): String

  # smaller of two
  intervalSmaller(arg0: IntervalInput!, arg1: IntervalInput!): Interval

  # transform an interval length coercion
  intervalTransform(arg0: String!): String

  # implementation of - operator
  intervalUm(arg0: IntervalInput!): Interval

  # I/O typmod
  intervaltypmodin(arg0: [String]!): Int

  # I/O typmod
  intervaltypmodout(arg0: Int!): String

  # implementation of <?> operator
  intinterval(arg0: String!, arg1: String!): Boolean

  # path closed?
  isclosed(arg0: String!): Boolean

  # is the range empty?
  isempty(arg0: String!): Boolean

  # path open?
  isopen(arg0: String!): Boolean

  # json aggregate final function
  jsonAggFinalfn(arg0: String): Json

  # json aggregate transition function
  jsonAggTransfn(arg0: String, arg1: String): String

  # implementation of -> operator
  jsonArrayElement(fromJson: Json!, elementIndex: Int!): Json

  # implementation of ->> operator
  jsonArrayElementText(fromJson: Json!, elementIndex: Int!): String

  # length of json array
  jsonArrayLength(arg0: Json!): Int

  # I/O
  jsonIn(arg0: String!): Json

  # json object aggregate final function
  jsonObjectAggFinalfn(arg0: String): Json

  # json object aggregate transition function
  jsonObjectAggTransfn(arg0: String, arg1: String, arg2: String): String

  # implementation of -> operator
  jsonObjectField(fromJson: Json!, fieldName: String!): Json

  # implementation of ->> operator
  jsonObjectFieldText(fromJson: Json!, fieldName: String!): String

  # Reads and enables paginatation through a set of \`String\`.
  jsonObjectKeys(
    # The method to use when ordering \`String\`.
    orderBy: JsonObjectKeysOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    arg0: Json!
  ): JsonObjectKeysConnection

  # I/O
  jsonOut(arg0: Json!): String

  # get record fields from a json object
  jsonPopulateRecord(base: String, fromJson: Json, useJsonAsText: Boolean): String

  # Reads and enables paginatation through a set of \`String\`.
  jsonPopulateRecordset(
    # The method to use when ordering \`String\`.
    orderBy: JsonPopulateRecordsetOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    base: String
    fromJson: Json
    useJsonAsText: Boolean
  ): JsonPopulateRecordsetConnection

  # I/O
  jsonRecv(arg0: String!): Json

  # I/O
  jsonSend(arg0: Json!): String

  # remove object fields with null values from json
  jsonStripNulls(arg0: Json!): Json

  # get record fields from a json object
  jsonToRecord(arg0: Json!): String

  # Reads and enables paginatation through a set of \`String\`.
  jsonToRecordset(
    # The method to use when ordering \`String\`.
    orderBy: JsonToRecordsetOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    arg0: Json
  ): JsonToRecordsetConnection

  # get the type of a json value
  jsonTypeof(arg0: Json!): String

  # jsonb aggregate final function
  jsonbAggFinalfn(arg0: String): Json

  # jsonb aggregate transition function
  jsonbAggTransfn(arg0: String, arg1: String): String

  # implementation of -> operator
  jsonbArrayElement(fromJson: Json!, elementIndex: Int!): Json

  # implementation of ->> operator
  jsonbArrayElementText(fromJson: Json!, elementIndex: Int!): String

  # length of jsonb array
  jsonbArrayLength(arg0: Json!): Int

  # less-equal-greater
  jsonbCmp(arg0: Json!, arg1: Json!): Int

  # implementation of || operator
  jsonbConcat(arg0: Json!, arg1: Json!): Json

  # implementation of <@ operator
  jsonbContained(arg0: Json!, arg1: Json!): Boolean

  # implementation of @> operator
  jsonbContains(arg0: Json!, arg1: Json!): Boolean

  # implementation of #- operator
  jsonbDeletePath(arg0: Json!, arg1: [String]!): Json

  # implementation of = operator
  jsonbEq(arg0: Json!, arg1: Json!): Boolean

  # implementation of ? operator
  jsonbExists(arg0: Json!, arg1: String!): Boolean

  # implementation of ?& operator
  jsonbExistsAll(arg0: Json!, arg1: [String]!): Boolean

  # implementation of ?| operator
  jsonbExistsAny(arg0: Json!, arg1: [String]!): Boolean

  # implementation of >= operator
  jsonbGe(arg0: Json!, arg1: Json!): Boolean

  # implementation of > operator
  jsonbGt(arg0: Json!, arg1: Json!): Boolean

  # hash
  jsonbHash(arg0: Json!): Int

  # I/O
  jsonbIn(arg0: String!): Json

  # implementation of <= operator
  jsonbLe(arg0: Json!, arg1: Json!): Boolean

  # implementation of < operator
  jsonbLt(arg0: Json!, arg1: Json!): Boolean

  # implementation of <> operator
  jsonbNe(arg0: Json!, arg1: Json!): Boolean

  # jsonb object aggregate final function
  jsonbObjectAggFinalfn(arg0: String): Json

  # jsonb object aggregate transition function
  jsonbObjectAggTransfn(arg0: String, arg1: String, arg2: String): String

  # implementation of -> operator
  jsonbObjectField(fromJson: Json!, fieldName: String!): Json

  # implementation of ->> operator
  jsonbObjectFieldText(fromJson: Json!, fieldName: String!): String

  # Reads and enables paginatation through a set of \`String\`.
  jsonbObjectKeys(
    # The method to use when ordering \`String\`.
    orderBy: JsonbObjectKeysOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    arg0: Json!
  ): JsonbObjectKeysConnection

  # I/O
  jsonbOut(arg0: Json!): String

  # get record fields from a jsonb object
  jsonbPopulateRecord(arg0: String, arg1: Json): String

  # Reads and enables paginatation through a set of \`String\`.
  jsonbPopulateRecordset(
    # The method to use when ordering \`String\`.
    orderBy: JsonbPopulateRecordsetOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    arg0: String
    arg1: Json
  ): JsonbPopulateRecordsetConnection

  # Indented text from jsonb
  jsonbPretty(arg0: Json!): String

  # I/O
  jsonbRecv(arg0: String!): Json

  # I/O
  jsonbSend(arg0: Json!): String

  # Set part of a jsonb
  jsonbSet(jsonbIn: Json!, path: [String]!, replacement: Json!, createIfMissing: Boolean!): Json

  # remove object fields with null values from jsonb
  jsonbStripNulls(arg0: Json!): Json

  # get record fields from a json object
  jsonbToRecord(arg0: Json!): String

  # Reads and enables paginatation through a set of \`String\`.
  jsonbToRecordset(
    # The method to use when ordering \`String\`.
    orderBy: JsonbToRecordsetOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    arg0: Json
  ): JsonbToRecordsetConnection

  # get the type of a jsonb value
  jsonbTypeof(arg0: Json!): String

  # promote groups of 30 days to numbers of months
  justifyDays(arg0: IntervalInput!): Interval

  # promote groups of 24 hours to numbers of days
  justifyHours(arg0: IntervalInput!): Interval

  # promote groups of 24 hours to numbers of days and promote groups of 30 days to numbers of months
  justifyInterval(arg0: IntervalInput!): Interval

  # I/O
  languageHandlerIn(arg0: String): String

  # I/O
  languageHandlerOut(arg0: String!): String

  # extract the first n characters
  left(arg0: String!, arg1: Int!): String

  # join selectivity of LIKE
  likejoinsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!, arg4: String!): Float

  # restriction selectivity of LIKE
  likesel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!): Float

  # construct line from points
  line(arg0: String!, arg1: String!): String

  # implementation of <-> operator
  lineDistance(arg0: String!, arg1: String!): Float

  # implementation of = operator
  lineEq(arg0: String!, arg1: String!): Boolean

  # implementation of ?- operator
  lineHorizontal(arg0: String!): Boolean

  # I/O
  lineIn(arg0: String!): String

  # implementation of # operator
  lineInterpt(arg0: String!, arg1: String!): String

  # implementation of ?# operator
  lineIntersect(arg0: String!, arg1: String!): Boolean

  # I/O
  lineOut(arg0: String!): String

  # implementation of ?|| operator
  lineParallel(arg0: String!, arg1: String!): Boolean

  # implementation of ?-| operator
  linePerp(arg0: String!, arg1: String!): Boolean

  # I/O
  lineRecv(arg0: String!): String

  # I/O
  lineSend(arg0: String!): String

  # implementation of ?| operator
  lineVertical(arg0: String!): Boolean

  # is the range\'s lower bound inclusive?
  lowerInc(arg0: String!): Boolean

  # is the range\'s lower bound infinite?
  lowerInf(arg0: String!): Boolean

  # implementation of @@ operator
  lsegCenter(arg0: String!): String

  # implementation of <-> operator
  lsegDistance(arg0: String!, arg1: String!): Float

  # implementation of = operator
  lsegEq(arg0: String!, arg1: String!): Boolean

  # implementation of >= operator
  lsegGe(arg0: String!, arg1: String!): Boolean

  # implementation of > operator
  lsegGt(arg0: String!, arg1: String!): Boolean

  # implementation of ?- operator
  lsegHorizontal(arg0: String!): Boolean

  # I/O
  lsegIn(arg0: String!): String

  # implementation of # operator
  lsegInterpt(arg0: String!, arg1: String!): String

  # implementation of ?# operator
  lsegIntersect(arg0: String!, arg1: String!): Boolean

  # implementation of <= operator
  lsegLe(arg0: String!, arg1: String!): Boolean

  # implementation of @-@ operator
  lsegLength(arg0: String!): Float

  # implementation of < operator
  lsegLt(arg0: String!, arg1: String!): Boolean

  # implementation of <> operator
  lsegNe(arg0: String!, arg1: String!): Boolean

  # I/O
  lsegOut(arg0: String!): String

  # implementation of ?|| operator
  lsegParallel(arg0: String!, arg1: String!): Boolean

  # implementation of ?-| operator
  lsegPerp(arg0: String!, arg1: String!): Boolean

  # I/O
  lsegRecv(arg0: String!): String

  # I/O
  lsegSend(arg0: String!): String

  # implementation of ?| operator
  lsegVertical(arg0: String!): Boolean

  # implementation of & operator
  macaddrAnd(arg0: String!, arg1: String!): String

  # less-equal-greater
  macaddrCmp(arg0: String!, arg1: String!): Int

  # implementation of = operator
  macaddrEq(arg0: String!, arg1: String!): Boolean

  # implementation of >= operator
  macaddrGe(arg0: String!, arg1: String!): Boolean

  # implementation of > operator
  macaddrGt(arg0: String!, arg1: String!): Boolean

  # I/O
  macaddrIn(arg0: String!): String

  # implementation of <= operator
  macaddrLe(arg0: String!, arg1: String!): Boolean

  # implementation of < operator
  macaddrLt(arg0: String!, arg1: String!): Boolean

  # implementation of <> operator
  macaddrNe(arg0: String!, arg1: String!): Boolean

  # implementation of ~ operator
  macaddrNot(arg0: String!): String

  # implementation of | operator
  macaddrOr(arg0: String!, arg1: String!): String

  # I/O
  macaddrOut(arg0: String!): String

  # I/O
  macaddrRecv(arg0: String!): String

  # I/O
  macaddrSend(arg0: String!): String

  # construct date
  makeDate(year: Int!, month: Int!, day: Int!): Date

  # construct interval
  makeInterval(years: Int!, months: Int!, weeks: Int!, days: Int!, hours: Int!, mins: Int!, secs: Float!): Interval

  # construct time
  makeTime(hour: Int!, min: Int!, sec: Float!): Time

  # construct timestamp
  makeTimestamp(year: Int!, month: Int!, mday: Int!, hour: Int!, min: Int!, sec: Float!): Datetime

  # make ACL item
  makeaclitem(arg0: Float!, arg1: Float!, arg2: String!, arg3: Boolean!): String

  # netmask length
  masklen(arg0: String!): Int

  # implementation of <#> operator
  mktinterval(arg0: String!, arg1: String!): String

  # aggregate final function
  modeFinal(arg0: String, arg1: String): String

  # implementation of * operator
  mulDInterval(arg0: Float!, arg1: IntervalInput!): Interval

  # age of a multi-transaction ID, in multi-transactions before current multi-transaction
  mxidAge(arg0: String!): Int

  # implementation of = operator
  nameeq(arg0: String!, arg1: String!): Boolean

  # implementation of >= operator
  namege(arg0: String!, arg1: String!): Boolean

  # implementation of > operator
  namegt(arg0: String!, arg1: String!): Boolean

  # implementation of ~~* operator
  nameiclike(arg0: String!, arg1: String!): Boolean

  # implementation of !~~* operator
  nameicnlike(arg0: String!, arg1: String!): Boolean

  # implementation of ~* operator
  nameicregexeq(arg0: String!, arg1: String!): Boolean

  # implementation of !~* operator
  nameicregexne(arg0: String!, arg1: String!): Boolean

  # I/O
  namein(arg0: String!): String

  # implementation of <= operator
  namele(arg0: String!, arg1: String!): Boolean

  # implementation of ~~ operator
  namelike(arg0: String!, arg1: String!): Boolean

  # implementation of < operator
  namelt(arg0: String!, arg1: String!): Boolean

  # implementation of <> operator
  namene(arg0: String!, arg1: String!): Boolean

  # implementation of !~~ operator
  namenlike(arg0: String!, arg1: String!): Boolean

  # I/O
  nameout(arg0: String!): String

  # I/O
  namerecv(arg0: String!): String

  # implementation of ~ operator
  nameregexeq(arg0: String!, arg1: String!): Boolean

  # implementation of !~ operator
  nameregexne(arg0: String!, arg1: String!): Boolean

  # I/O
  namesend(arg0: String!): String

  # join selectivity of <> and related operators
  neqjoinsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!, arg4: String!): Float

  # restriction selectivity of <> and related operators
  neqsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!): Float

  # netmask of address
  netmask(arg0: String!): String

  # network part of address
  network(arg0: String!): String

  # less-equal-greater
  networkCmp(arg0: String!, arg1: String!): Int

  # implementation of = operator
  networkEq(arg0: String!, arg1: String!): Boolean

  # implementation of >= operator
  networkGe(arg0: String!, arg1: String!): Boolean

  # implementation of > operator
  networkGt(arg0: String!, arg1: String!): Boolean

  # larger of two
  networkLarger(arg0: String!, arg1: String!): String

  # implementation of <= operator
  networkLe(arg0: String!, arg1: String!): Boolean

  # implementation of < operator
  networkLt(arg0: String!, arg1: String!): Boolean

  # implementation of <> operator
  networkNe(arg0: String!, arg1: String!): Boolean

  # implementation of && operator
  networkOverlap(arg0: String!, arg1: String!): Boolean

  # smaller of two
  networkSmaller(arg0: String!, arg1: String!): String

  # implementation of << operator
  networkSub(arg0: String!, arg1: String!): Boolean

  # implementation of <<= operator
  networkSubeq(arg0: String!, arg1: String!): Boolean

  # implementation of >> operator
  networkSup(arg0: String!, arg1: String!): Boolean

  # implementation of >>= operator
  networkSupeq(arg0: String!, arg1: String!): Boolean

  # join selectivity for network operators
  networkjoinsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!, arg4: String!): Float

  # restriction selectivity for network operators
  networksel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!): Float

  # join selectivity of NOT LIKE
  nlikejoinsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!, arg4: String!): Float

  # restriction selectivity of NOT LIKE
  nlikesel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!): Float

  # current transaction time
  now: Datetime

  # implementation of @ operator
  numericAbs(arg0: Float!): Float

  # aggregate transition function
  numericAccum(arg0: String, arg1: Float): String

  # aggregate transition function
  numericAccumInv(arg0: String, arg1: Float): String

  # implementation of + operator
  numericAdd(arg0: Float!, arg1: Float!): Float

  # aggregate final function
  numericAvg(arg0: String): Float

  # aggregate transition function
  numericAvgAccum(arg0: String, arg1: Float): String

  # less-equal-greater
  numericCmp(arg0: Float!, arg1: Float!): Int

  # implementation of / operator
  numericDiv(arg0: Float!, arg1: Float!): Float

  # trunc(x/y)
  numericDivTrunc(arg0: Float!, arg1: Float!): Float

  # implementation of = operator
  numericEq(arg0: Float!, arg1: Float!): Boolean

  # natural exponential (e^x)
  numericExp(arg0: Float!): Float

  # implementation of ! operator
  numericFac(arg0: Int!): Float

  # implementation of >= operator
  numericGe(arg0: Float!, arg1: Float!): Boolean

  # implementation of > operator
  numericGt(arg0: Float!, arg1: Float!): Boolean

  # I/O
  numericIn(arg0: String!, arg1: Float!, arg2: Int!): Float

  # increment by one
  numericInc(arg0: Float!): Float

  # larger of two
  numericLarger(arg0: Float!, arg1: Float!): Float

  # implementation of <= operator
  numericLe(arg0: Float!, arg1: Float!): Boolean

  # natural logarithm
  numericLn(arg0: Float!): Float

  # logarithm base m of n
  numericLog(arg0: Float!, arg1: Float!): Float

  # implementation of < operator
  numericLt(arg0: Float!, arg1: Float!): Boolean

  # implementation of % operator
  numericMod(arg0: Float!, arg1: Float!): Float

  # implementation of * operator
  numericMul(arg0: Float!, arg1: Float!): Float

  # implementation of <> operator
  numericNe(arg0: Float!, arg1: Float!): Boolean

  # I/O
  numericOut(arg0: Float!): String

  # aggregate final function
  numericPolyAvg(arg0: String): Float

  # aggregate final function
  numericPolyStddevPop(arg0: String): Float

  # aggregate final function
  numericPolyStddevSamp(arg0: String): Float

  # aggregate final function
  numericPolySum(arg0: String): Float

  # aggregate final function
  numericPolyVarPop(arg0: String): Float

  # aggregate final function
  numericPolyVarSamp(arg0: String): Float

  # implementation of ^ operator
  numericPower(arg0: Float!, arg1: Float!): Float

  # I/O
  numericRecv(arg0: String!, arg1: Float!, arg2: Int!): Float

  # I/O
  numericSend(arg0: Float!): String

  # smaller of two
  numericSmaller(arg0: Float!, arg1: Float!): Float

  # sort support
  numericSortsupport(arg0: String!): String

  # square root
  numericSqrt(arg0: Float!): Float

  # aggregate final function
  numericStddevPop(arg0: String): Float

  # aggregate final function
  numericStddevSamp(arg0: String): Float

  # implementation of - operator
  numericSub(arg0: Float!, arg1: Float!): Float

  # aggregate final function
  numericSum(arg0: String): Float

  # transform a numeric length coercion
  numericTransform(arg0: String!): String

  # implementation of - operator
  numericUminus(arg0: Float!): Float

  # implementation of + operator
  numericUplus(arg0: Float!): Float

  # aggregate final function
  numericVarPop(arg0: String): Float

  # aggregate final function
  numericVarSamp(arg0: String): Float

  # I/O typmod
  numerictypmodin(arg0: [String]!): Int

  # I/O typmod
  numerictypmodout(arg0: Int!): String

  # number of nodes
  numnode(arg0: String!): Int

  # float8 difference of two numeric values
  numrangeSubdiff(arg0: Float!, arg1: Float!): Float

  # convert int8 to oid
  oid(arg0: Int!): Float

  # implementation of = operator
  oideq(arg0: Float!, arg1: Float!): Boolean

  # implementation of >= operator
  oidge(arg0: Float!, arg1: Float!): Boolean

  # implementation of > operator
  oidgt(arg0: Float!, arg1: Float!): Boolean

  # I/O
  oidin(arg0: String!): Float

  # larger of two
  oidlarger(arg0: Float!, arg1: Float!): Float

  # implementation of <= operator
  oidle(arg0: Float!, arg1: Float!): Boolean

  # implementation of < operator
  oidlt(arg0: Float!, arg1: Float!): Boolean

  # implementation of <> operator
  oidne(arg0: Float!, arg1: Float!): Boolean

  # I/O
  oidout(arg0: Float!): String

  # I/O
  oidrecv(arg0: String!): Float

  # I/O
  oidsend(arg0: Float!): String

  # smaller of two
  oidsmaller(arg0: Float!, arg1: Float!): Float

  # implementation of = operator
  oidvectoreq(arg0: [Float]!, arg1: [Float]!): Boolean

  # implementation of >= operator
  oidvectorge(arg0: [Float]!, arg1: [Float]!): Boolean

  # implementation of > operator
  oidvectorgt(arg0: [Float]!, arg1: [Float]!): Boolean

  # I/O
  oidvectorin(arg0: String!): [Float]

  # implementation of <= operator
  oidvectorle(arg0: [Float]!, arg1: [Float]!): Boolean

  # implementation of < operator
  oidvectorlt(arg0: [Float]!, arg1: [Float]!): Boolean

  # implementation of <> operator
  oidvectorne(arg0: [Float]!, arg1: [Float]!): Boolean

  # I/O
  oidvectorout(arg0: [Float]!): String

  # I/O
  oidvectorrecv(arg0: String!): [Float]

  # I/O
  oidvectorsend(arg0: [Float]!): String

  # print type names of oidvector field
  oidvectortypes(arg0: [Float]!): String

  # implementation of <@ operator
  onPb(arg0: String!, arg1: String!): Boolean

  # implementation of <@ operator
  onPl(arg0: String!, arg1: String!): Boolean

  # implementation of <@ operator
  onPpath(arg0: String!, arg1: String!): Boolean

  # implementation of <@ operator
  onPs(arg0: String!, arg1: String!): Boolean

  # implementation of <@ operator
  onSb(arg0: String!, arg1: String!): Boolean

  # implementation of <@ operator
  onSl(arg0: String!, arg1: String!): Boolean

  # I/O
  opaqueIn(arg0: String): String

  # I/O
  opaqueOut(arg0: String!): String

  # aggregate transition function
  orderedSetTransition(arg0: String, arg1: String): String

  # convert polygon to path
  path(arg0: String!): String

  # implementation of + operator
  pathAdd(arg0: String!, arg1: String!): String

  # implementation of + operator
  pathAddPt(arg0: String!, arg1: String!): String

  # implementation of @@ operator
  pathCenter(arg0: String!): String

  # implementation of @> operator
  pathContainPt(arg0: String!, arg1: String!): Boolean

  # implementation of <-> operator
  pathDistance(arg0: String!, arg1: String!): Float

  # implementation of / operator
  pathDivPt(arg0: String!, arg1: String!): String

  # I/O
  pathIn(arg0: String!): String

  # implementation of ?# operator
  pathInter(arg0: String!, arg1: String!): Boolean

  # implementation of @-@ operator
  pathLength(arg0: String!): Float

  # implementation of * operator
  pathMulPt(arg0: String!, arg1: String!): String

  # implementation of = operator
  pathNEq(arg0: String!, arg1: String!): Boolean

  # implementation of >= operator
  pathNGe(arg0: String!, arg1: String!): Boolean

  # implementation of > operator
  pathNGt(arg0: String!, arg1: String!): Boolean

  # implementation of <= operator
  pathNLe(arg0: String!, arg1: String!): Boolean

  # implementation of < operator
  pathNLt(arg0: String!, arg1: String!): Boolean

  # implementation of # operator
  pathNpoints(arg0: String!): Int

  # I/O
  pathOut(arg0: String!): String

  # I/O
  pathRecv(arg0: String!): String

  # I/O
  pathSend(arg0: String!): String

  # implementation of - operator
  pathSubPt(arg0: String!, arg1: String!): String

  # close path
  pclose(arg0: String!): String

  # aggregate final function
  percentileContFloat8Final(arg0: String, arg1: Float): Float

  # aggregate final function
  percentileContFloat8MultiFinal(arg0: String, arg1: [Float]): [Float]

  # aggregate final function
  percentileContIntervalFinal(arg0: String, arg1: Float): Interval

  # aggregate final function
  percentileContIntervalMultiFinal(arg0: String, arg1: [Float]): [Interval]

  # aggregate final function
  percentileDiscFinal(arg0: String, arg1: Float, arg2: String): String

  # aggregate final function
  percentileDiscMultiFinal(arg0: String, arg1: [Float], arg2: String): String

  # statistics: current backend PID
  pgBackendPid: Int

  # start time of an online backup
  pgBackupStartTime: Datetime

  # convert encoding name to encoding id
  pgCharToEncoding(arg0: String!): Int

  # encoding name of current database
  pgClientEncoding: String

  # collation of the argument; implementation of the COLLATION FOR expression
  pgCollationFor(arg0: String): String

  # is collation visible in search path?
  pgCollationIsVisible(arg0: Float!): Boolean

  # is a column updatable
  pgColumnIsUpdatable(arg0: Float!, arg1: Int!, arg2: Boolean!): Boolean

  # bytes required to store the value, perhaps with compression
  pgColumnSize(arg0: String!): Int

  # configuration load time
  pgConfLoadTime: Datetime

  # is conversion visible in search path?
  pgConversionIsVisible(arg0: Float!): Boolean

  # I/O
  pgDdlCommandIn(arg0: String!): String

  # I/O
  pgDdlCommandOut(arg0: String!): String

  # I/O
  pgDdlCommandRecv(arg0: String!): String

  # I/O
  pgDdlCommandSend(arg0: String!): String

  # get identification of SQL object
  pgDescribeObject(arg0: Float!, arg1: Float!, arg2: Int!): String

  # maximum octet length of a character in given encoding
  pgEncodingMaxLength(arg0: Int!): Int

  # convert encoding id to encoding name
  pgEncodingToChar(arg0: Int!): String

  # return reason code for table getting rewritten
  pgEventTriggerTableRewriteReason: Int

  # relation OID for filenode and tablespace
  pgFilenodeRelation(arg0: Float!, arg1: Float!): Float

  # is function visible in search path?
  pgFunctionIsVisible(arg0: Float!): Boolean

  # function argument default
  pgGetFunctionArgDefault(arg0: Float!, arg1: Int!): String

  # argument list of a function
  pgGetFunctionArguments(arg0: Float!): String

  # identity argument list of a function
  pgGetFunctionIdentityArguments(arg0: Float!): String

  # result type of a function
  pgGetFunctionResult(arg0: Float!): String

  # definition of a function
  pgGetFunctiondef(arg0: Float!): String

  # name of sequence for a serial column
  pgGetSerialSequence(arg0: String!, arg1: String!): String

  # role name by OID (with fallback)
  pgGetUserbyid(arg0: Float!): String

  # is schema another session\'s temp schema?
  pgIsOtherTempSchema(arg0: Float!): Boolean

  # Reads and enables paginatation through a set of \`String\`.
  pgListeningChannels(
    # The method to use when ordering \`String\`.
    orderBy: PgListeningChannelsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
  ): PgListeningChannelsConnection

  # less-equal-greater
  pgLsnCmp(arg0: String!, arg1: String!): Int

  # implementation of = operator
  pgLsnEq(arg0: String!, arg1: String!): Boolean

  # implementation of >= operator
  pgLsnGe(arg0: String!, arg1: String!): Boolean

  # implementation of > operator
  pgLsnGt(arg0: String!, arg1: String!): Boolean

  # hash
  pgLsnHash(arg0: String!): Int

  # I/O
  pgLsnIn(arg0: String!): String

  # implementation of <= operator
  pgLsnLe(arg0: String!, arg1: String!): Boolean

  # implementation of < operator
  pgLsnLt(arg0: String!, arg1: String!): Boolean

  # implementation of - operator
  pgLsnMi(arg0: String!, arg1: String!): Float

  # implementation of <> operator
  pgLsnNe(arg0: String!, arg1: String!): Boolean

  # I/O
  pgLsnOut(arg0: String!): String

  # I/O
  pgLsnRecv(arg0: String!): String

  # I/O
  pgLsnSend(arg0: String!): String

  # get OID of current session\'s temp schema, if any
  pgMyTempSchema: Float

  # I/O
  pgNodeTreeIn(arg0: String!): String

  # I/O
  pgNodeTreeOut(arg0: String!): String

  # I/O
  pgNodeTreeRecv(arg0: String!): String

  # I/O
  pgNodeTreeSend(arg0: String!): String

  # is opclass visible in search path?
  pgOpclassIsVisible(arg0: Float!): Boolean

  # is operator visible in search path?
  pgOperatorIsVisible(arg0: Float!): Boolean

  # is opfamily visible in search path?
  pgOpfamilyIsVisible(arg0: Float!): Boolean

  # postmaster start time
  pgPostmasterStartTime: Datetime

  # filenode identifier of relation
  pgRelationFilenode(arg0: Float!): Float

  # file path of relation
  pgRelationFilepath(arg0: Float!): String

  # is a relation insertable/updatable/deletable
  pgRelationIsUpdatable(arg0: Float!, arg1: Boolean!): Int

  # translate the replication origin\'s name to its id
  pgReplicationOriginOid(arg0: String!): Float

  # statistics: number of manual analyzes for a table
  pgStatGetAnalyzeCount(arg0: Float!): Int

  # statistics: number of auto analyzes for a table
  pgStatGetAutoanalyzeCount(arg0: Float!): Int

  # statistics: number of auto vacuums for a table
  pgStatGetAutovacuumCount(arg0: Float!): Int

  # statistics: current query of backend
  pgStatGetBackendActivity(arg0: Int!): String

  # statistics: start time for current query of backend
  pgStatGetBackendActivityStart(arg0: Int!): Datetime

  # statistics: address of client connected to backend
  pgStatGetBackendClientAddr(arg0: Int!): String

  # statistics: port number of client connected to backend
  pgStatGetBackendClientPort(arg0: Int!): Int

  # statistics: database ID of backend
  pgStatGetBackendDbid(arg0: Int!): Float

  # Reads and enables paginatation through a set of \`Int\`.
  pgStatGetBackendIdset(
    # The method to use when ordering \`Int\`.
    orderBy: PgStatGetBackendIdsetOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
  ): PgStatGetBackendIdsetConnection

  # statistics: PID of backend
  pgStatGetBackendPid(arg0: Int!): Int

  # statistics: start time for current backend session
  pgStatGetBackendStart(arg0: Int!): Datetime

  # statistics: user ID of backend
  pgStatGetBackendUserid(arg0: Int!): Float

  # statistics: is backend currently waiting for a lock
  pgStatGetBackendWaiting(arg0: Int!): Boolean

  # statistics: start time for backend\'s current transaction
  pgStatGetBackendXactStart(arg0: Int!): Datetime

  # statistics: number of buffers written by the bgwriter during checkpoints
  pgStatGetBgwriterBufWrittenCheckpoints: Int

  # statistics: number of buffers written by the bgwriter for cleaning dirty buffers
  pgStatGetBgwriterBufWrittenClean: Int

  # statistics: number of times the bgwriter stopped processing when it had written too many buffers while cleaning
  pgStatGetBgwriterMaxwrittenClean: Int

  # statistics: number of backend requested checkpoints started by the bgwriter
  pgStatGetBgwriterRequestedCheckpoints: Int

  # statistics: last reset for the bgwriter
  pgStatGetBgwriterStatResetTime: Datetime

  # statistics: number of timed checkpoints started by the bgwriter
  pgStatGetBgwriterTimedCheckpoints: Int

  # statistics: number of blocks fetched
  pgStatGetBlocksFetched(arg0: Float!): Int

  # statistics: number of blocks found in cache
  pgStatGetBlocksHit(arg0: Float!): Int

  # statistics: number of buffer allocations
  pgStatGetBufAlloc: Int

  # statistics: number of backend buffer writes that did their own fsync
  pgStatGetBufFsyncBackend: Int

  # statistics: number of buffers written by backends
  pgStatGetBufWrittenBackend: Int

  # statistics: checkpoint time spent synchronizing buffers to disk, in msec
  pgStatGetCheckpointSyncTime: Float

  # statistics: checkpoint time spent writing buffers to disk, in msec
  pgStatGetCheckpointWriteTime: Float

  # statistics: block read time, in msec
  pgStatGetDbBlkReadTime(arg0: Float!): Float

  # statistics: block write time, in msec
  pgStatGetDbBlkWriteTime(arg0: Float!): Float

  # statistics: blocks fetched for database
  pgStatGetDbBlocksFetched(arg0: Float!): Int

  # statistics: blocks found in cache for database
  pgStatGetDbBlocksHit(arg0: Float!): Int

  # statistics: recovery conflicts in database
  pgStatGetDbConflictAll(arg0: Float!): Int

  # statistics: recovery conflicts in database caused by shared buffer pin
  pgStatGetDbConflictBufferpin(arg0: Float!): Int

  # statistics: recovery conflicts in database caused by relation lock
  pgStatGetDbConflictLock(arg0: Float!): Int

  # statistics: recovery conflicts in database caused by snapshot expiry
  pgStatGetDbConflictSnapshot(arg0: Float!): Int

  # statistics: recovery conflicts in database caused by buffer deadlock
  pgStatGetDbConflictStartupDeadlock(arg0: Float!): Int

  # statistics: recovery conflicts in database caused by drop tablespace
  pgStatGetDbConflictTablespace(arg0: Float!): Int

  # statistics: deadlocks detected in database
  pgStatGetDbDeadlocks(arg0: Float!): Int

  # statistics: number of backends in database
  pgStatGetDbNumbackends(arg0: Float!): Int

  # statistics: last reset for a database
  pgStatGetDbStatResetTime(arg0: Float!): Datetime

  # statistics: number of bytes in temporary files written
  pgStatGetDbTempBytes(arg0: Float!): Int

  # statistics: number of temporary files written
  pgStatGetDbTempFiles(arg0: Float!): Int

  # statistics: tuples deleted in database
  pgStatGetDbTuplesDeleted(arg0: Float!): Int

  # statistics: tuples fetched for database
  pgStatGetDbTuplesFetched(arg0: Float!): Int

  # statistics: tuples inserted in database
  pgStatGetDbTuplesInserted(arg0: Float!): Int

  # statistics: tuples returned for database
  pgStatGetDbTuplesReturned(arg0: Float!): Int

  # statistics: tuples updated in database
  pgStatGetDbTuplesUpdated(arg0: Float!): Int

  # statistics: transactions committed
  pgStatGetDbXactCommit(arg0: Float!): Int

  # statistics: transactions rolled back
  pgStatGetDbXactRollback(arg0: Float!): Int

  # statistics: number of dead tuples
  pgStatGetDeadTuples(arg0: Float!): Int

  # statistics: number of function calls
  pgStatGetFunctionCalls(arg0: Float!): Int

  # statistics: self execution time of function, in msec
  pgStatGetFunctionSelfTime(arg0: Float!): Float

  # statistics: total execution time of function, in msec
  pgStatGetFunctionTotalTime(arg0: Float!): Float

  # statistics: last manual analyze time for a table
  pgStatGetLastAnalyzeTime(arg0: Float!): Datetime

  # statistics: last auto analyze time for a table
  pgStatGetLastAutoanalyzeTime(arg0: Float!): Datetime

  # statistics: last auto vacuum time for a table
  pgStatGetLastAutovacuumTime(arg0: Float!): Datetime

  # statistics: last manual vacuum time for a table
  pgStatGetLastVacuumTime(arg0: Float!): Datetime

  # statistics: number of live tuples
  pgStatGetLiveTuples(arg0: Float!): Int

  # statistics: number of tuples changed since last analyze
  pgStatGetModSinceAnalyze(arg0: Float!): Int

  # statistics: number of scans done for table/index
  pgStatGetNumscans(arg0: Float!): Int

  # statistics: timestamp of the current statistics snapshot
  pgStatGetSnapshotTimestamp: Datetime

  # statistics: number of tuples deleted
  pgStatGetTuplesDeleted(arg0: Float!): Int

  # statistics: number of tuples fetched by idxscan
  pgStatGetTuplesFetched(arg0: Float!): Int

  # statistics: number of tuples hot updated
  pgStatGetTuplesHotUpdated(arg0: Float!): Int

  # statistics: number of tuples inserted
  pgStatGetTuplesInserted(arg0: Float!): Int

  # statistics: number of tuples read by seqscan
  pgStatGetTuplesReturned(arg0: Float!): Int

  # statistics: number of tuples updated
  pgStatGetTuplesUpdated(arg0: Float!): Int

  # statistics: number of manual vacuums for a table
  pgStatGetVacuumCount(arg0: Float!): Int

  # is table visible in search path?
  pgTableIsVisible(arg0: Float!): Boolean

  # Reads and enables paginatation through a set of \`Float\`.
  pgTablespaceDatabases(
    # The method to use when ordering \`Float\`.
    orderBy: PgTablespaceDatabasesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    arg0: Float!
  ): PgTablespaceDatabasesConnection

  # tablespace location
  pgTablespaceLocation(arg0: Float!): String

  # current trigger depth
  pgTriggerDepth: Int

  # is text search configuration visible in search path?
  pgTsConfigIsVisible(arg0: Float!): Boolean

  # is text search dictionary visible in search path?
  pgTsDictIsVisible(arg0: Float!): Boolean

  # is text search parser visible in search path?
  pgTsParserIsVisible(arg0: Float!): Boolean

  # is text search template visible in search path?
  pgTsTemplateIsVisible(arg0: Float!): Boolean

  # is type visible in search path?
  pgTypeIsVisible(arg0: Float!): Boolean

  # type of the argument
  pgTypeof(arg0: String): Float

  # difference in bytes, given two xlog locations
  pgXlogLocationDiff(arg0: String!, arg1: String!): Float

  # xlog filename, given an xlog location
  pgXlogfileName(arg0: String!): String

  # PI
  pi: Float

  # implementation of >^ operator
  pointAbove(arg0: String!, arg1: String!): Boolean

  # implementation of + operator
  pointAdd(arg0: String!, arg1: String!): String

  # implementation of <^ operator
  pointBelow(arg0: String!, arg1: String!): Boolean

  # implementation of <-> operator
  pointDistance(arg0: String!, arg1: String!): Float

  # implementation of / operator
  pointDiv(arg0: String!, arg1: String!): String

  # implementation of ~= operator
  pointEq(arg0: String!, arg1: String!): Boolean

  # implementation of ?- operator
  pointHoriz(arg0: String!, arg1: String!): Boolean

  # I/O
  pointIn(arg0: String!): String

  # implementation of << operator
  pointLeft(arg0: String!, arg1: String!): Boolean

  # implementation of * operator
  pointMul(arg0: String!, arg1: String!): String

  # implementation of <> operator
  pointNe(arg0: String!, arg1: String!): Boolean

  # I/O
  pointOut(arg0: String!): String

  # I/O
  pointRecv(arg0: String!): String

  # implementation of >> operator
  pointRight(arg0: String!, arg1: String!): Boolean

  # I/O
  pointSend(arg0: String!): String

  # implementation of - operator
  pointSub(arg0: String!, arg1: String!): String

  # implementation of ?| operator
  pointVert(arg0: String!, arg1: String!): Boolean

  # implementation of |>> operator
  polyAbove(arg0: String!, arg1: String!): Boolean

  # implementation of <<| operator
  polyBelow(arg0: String!, arg1: String!): Boolean

  # implementation of @@ operator
  polyCenter(arg0: String!): String

  # implementation of @> operator
  polyContain(arg0: String!, arg1: String!): Boolean

  # implementation of @> operator
  polyContainPt(arg0: String!, arg1: String!): Boolean

  # implementation of <@ operator
  polyContained(arg0: String!, arg1: String!): Boolean

  # implementation of <-> operator
  polyDistance(arg0: String!, arg1: String!): Float

  # I/O
  polyIn(arg0: String!): String

  # implementation of << operator
  polyLeft(arg0: String!, arg1: String!): Boolean

  # implementation of # operator
  polyNpoints(arg0: String!): Int

  # I/O
  polyOut(arg0: String!): String

  # implementation of |&> operator
  polyOverabove(arg0: String!, arg1: String!): Boolean

  # implementation of &<| operator
  polyOverbelow(arg0: String!, arg1: String!): Boolean

  # implementation of && operator
  polyOverlap(arg0: String!, arg1: String!): Boolean

  # implementation of &< operator
  polyOverleft(arg0: String!, arg1: String!): Boolean

  # implementation of &> operator
  polyOverright(arg0: String!, arg1: String!): Boolean

  # I/O
  polyRecv(arg0: String!): String

  # implementation of >> operator
  polyRight(arg0: String!, arg1: String!): Boolean

  # implementation of ~= operator
  polySame(arg0: String!, arg1: String!): Boolean

  # I/O
  polySend(arg0: String!): String

  # open path
  popen(arg0: String!): String

  # join selectivity for position-comparison operators
  positionjoinsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!, arg4: String!): Float

  # restriction selectivity for position-comparison operators
  positionsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!): Float

  # (internal)
  postgresqlFdwValidator(arg0: [String]!, arg1: Float!): Boolean

  # (internal)
  prsdEnd(arg0: String!): String

  # (internal)
  prsdHeadline(arg0: String!, arg1: String!, arg2: String!): String

  # (internal)
  prsdLextype(arg0: String!): String

  # (internal)
  prsdNexttoken(arg0: String!, arg1: String!, arg2: String!): String

  # (internal)
  prsdStart(arg0: String!, arg1: Int!): String

  # implementation of <@ operator
  ptContainedCircle(arg0: String!, arg1: String!): Boolean

  # implementation of <@ operator
  ptContainedPoly(arg0: String!, arg1: String!): Boolean

  # map query result to XML
  queryToXml(query: String!, nulls: Boolean!, tableforest: Boolean!, targetns: String!): String

  # map query result and structure to XML and XML Schema
  queryToXmlAndXmlschema(query: String!, nulls: Boolean!, tableforest: Boolean!, targetns: String!): String

  # map query result structure to XML Schema
  queryToXmlschema(query: String!, nulls: Boolean!, tableforest: Boolean!, targetns: String!): String

  # show real useful query for GiST index
  querytree(arg0: String!): String

  # quote an identifier for usage in a querystring
  quoteIdent(arg0: String!): String

  # degrees to radians
  radians(arg0: Float!): Float

  # radius of circle
  radius(arg0: String!): Float

  # implementation of -|- operator
  rangeAdjacent(arg0: String!, arg1: String!): Boolean

  # implementation of >> operator
  rangeAfter(arg0: String!, arg1: String!): Boolean

  # implementation of << operator
  rangeBefore(arg0: String!, arg1: String!): Boolean

  # less-equal-greater
  rangeCmp(arg0: String!, arg1: String!): Int

  # implementation of <@ operator
  rangeContainedBy(arg0: String!, arg1: String!): Boolean

  # implementation of @> operator
  rangeContains(arg0: String!, arg1: String!): Boolean

  # implementation of @> operator
  rangeContainsElem(arg0: String!, arg1: String!): Boolean

  # implementation of = operator
  rangeEq(arg0: String!, arg1: String!): Boolean

  # implementation of >= operator
  rangeGe(arg0: String!, arg1: String!): Boolean

  # GiST support
  rangeGistCompress(arg0: String!): String

  # GiST support
  rangeGistConsistent(arg0: String!, arg1: String!, arg2: Int!, arg3: Float!, arg4: String!): Boolean

  # GiST support
  rangeGistDecompress(arg0: String!): String

  # GiST support
  rangeGistFetch(arg0: String!): String

  # GiST support
  rangeGistPenalty(arg0: String!, arg1: String!, arg2: String!): String

  # GiST support
  rangeGistPicksplit(arg0: String!, arg1: String!): String

  # GiST support
  rangeGistSame(arg0: String!, arg1: String!, arg2: String!): String

  # GiST support
  rangeGistUnion(arg0: String!, arg1: String!): String

  # implementation of > operator
  rangeGt(arg0: String!, arg1: String!): Boolean

  # I/O
  rangeIn(arg0: String!, arg1: Float!, arg2: Int!): String

  # implementation of * operator
  rangeIntersect(arg0: String!, arg1: String!): String

  # implementation of <= operator
  rangeLe(arg0: String!, arg1: String!): Boolean

  # implementation of < operator
  rangeLt(arg0: String!, arg1: String!): Boolean

  # the smallest range which includes both of the given ranges
  rangeMerge(arg0: String!, arg1: String!): String

  # implementation of - operator
  rangeMinus(arg0: String!, arg1: String!): String

  # implementation of <> operator
  rangeNe(arg0: String!, arg1: String!): Boolean

  # I/O
  rangeOut(arg0: String!): String

  # implementation of && operator
  rangeOverlaps(arg0: String!, arg1: String!): Boolean

  # implementation of &< operator
  rangeOverleft(arg0: String!, arg1: String!): Boolean

  # implementation of &> operator
  rangeOverright(arg0: String!, arg1: String!): Boolean

  # I/O
  rangeRecv(arg0: String!, arg1: Float!, arg2: Int!): String

  # I/O
  rangeSend(arg0: String!): String

  # range typanalyze
  rangeTypanalyze(arg0: String!): Boolean

  # implementation of + operator
  rangeUnion(arg0: String!, arg1: String!): String

  # restriction selectivity for range operators
  rangesel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!): Float

  # implementation of = operator
  recordEq(arg0: String!, arg1: String!): Boolean

  # implementation of >= operator
  recordGe(arg0: String!, arg1: String!): Boolean

  # implementation of > operator
  recordGt(arg0: String!, arg1: String!): Boolean

  # implementation of *= operator
  recordImageEq(arg0: String!, arg1: String!): Boolean

  # implementation of *>= operator
  recordImageGe(arg0: String!, arg1: String!): Boolean

  # implementation of *> operator
  recordImageGt(arg0: String!, arg1: String!): Boolean

  # implementation of *<= operator
  recordImageLe(arg0: String!, arg1: String!): Boolean

  # implementation of *< operator
  recordImageLt(arg0: String!, arg1: String!): Boolean

  # implementation of *<> operator
  recordImageNe(arg0: String!, arg1: String!): Boolean

  # I/O
  recordIn(arg0: String!, arg1: Float!, arg2: Int!): String

  # implementation of <= operator
  recordLe(arg0: String!, arg1: String!): Boolean

  # implementation of < operator
  recordLt(arg0: String!, arg1: String!): Boolean

  # implementation of <> operator
  recordNe(arg0: String!, arg1: String!): Boolean

  # I/O
  recordOut(arg0: String!): String

  # I/O
  recordRecv(arg0: String!, arg1: Float!, arg2: Int!): String

  # I/O
  recordSend(arg0: String!): String

  # convert text to regclass
  regclass(arg0: String!): Float

  # I/O
  regclassin(arg0: String!): Float

  # I/O
  regclassout(arg0: Float!): String

  # I/O
  regclassrecv(arg0: String!): Float

  # I/O
  regclasssend(arg0: Float!): String

  # I/O
  regconfigin(arg0: String!): Float

  # I/O
  regconfigout(arg0: Float!): String

  # I/O
  regconfigrecv(arg0: String!): Float

  # I/O
  regconfigsend(arg0: Float!): String

  # I/O
  regdictionaryin(arg0: String!): Float

  # I/O
  regdictionaryout(arg0: Float!): String

  # I/O
  regdictionaryrecv(arg0: String!): Float

  # I/O
  regdictionarysend(arg0: Float!): String

  # join selectivity of regex match
  regexeqjoinsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!, arg4: String!): Float

  # restriction selectivity of regex match
  regexeqsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!): Float

  # join selectivity of regex non-match
  regexnejoinsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!, arg4: String!): Float

  # restriction selectivity of regex non-match
  regexnesel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!): Float

  # I/O
  regnamespacein(arg0: String!): Float

  # I/O
  regnamespaceout(arg0: Float!): String

  # I/O
  regnamespacerecv(arg0: String!): Float

  # I/O
  regnamespacesend(arg0: Float!): String

  # I/O
  regoperatorin(arg0: String!): Float

  # I/O
  regoperatorout(arg0: Float!): String

  # I/O
  regoperatorrecv(arg0: String!): Float

  # I/O
  regoperatorsend(arg0: Float!): String

  # I/O
  regoperin(arg0: String!): Float

  # I/O
  regoperout(arg0: Float!): String

  # I/O
  regoperrecv(arg0: String!): Float

  # I/O
  regopersend(arg0: Float!): String

  # I/O
  regprocedurein(arg0: String!): Float

  # I/O
  regprocedureout(arg0: Float!): String

  # I/O
  regprocedurerecv(arg0: String!): Float

  # I/O
  regproceduresend(arg0: Float!): String

  # I/O
  regprocin(arg0: String!): Float

  # I/O
  regprocout(arg0: Float!): String

  # I/O
  regprocrecv(arg0: String!): Float

  # I/O
  regprocsend(arg0: Float!): String

  # I/O
  regrolein(arg0: String!): Float

  # I/O
  regroleout(arg0: Float!): String

  # I/O
  regrolerecv(arg0: String!): Float

  # I/O
  regrolesend(arg0: Float!): String

  # I/O
  regtypein(arg0: String!): Float

  # I/O
  regtypeout(arg0: Float!): String

  # I/O
  regtyperecv(arg0: String!): Float

  # I/O
  regtypesend(arg0: Float!): String

  # convert interval to reltime
  reltime(arg0: IntervalInput!): String

  # implementation of = operator
  reltimeeq(arg0: String!, arg1: String!): Boolean

  # implementation of >= operator
  reltimege(arg0: String!, arg1: String!): Boolean

  # implementation of > operator
  reltimegt(arg0: String!, arg1: String!): Boolean

  # I/O
  reltimein(arg0: String!): String

  # implementation of <= operator
  reltimele(arg0: String!, arg1: String!): Boolean

  # implementation of < operator
  reltimelt(arg0: String!, arg1: String!): Boolean

  # implementation of <> operator
  reltimene(arg0: String!, arg1: String!): Boolean

  # I/O
  reltimeout(arg0: String!): String

  # I/O
  reltimerecv(arg0: String!): String

  # I/O
  reltimesend(arg0: String!): String

  # replicate string n times
  repeat(arg0: String!, arg1: Int!): String

  # replace all occurrences in string of old_substr with new_substr
  replace(arg0: String!, arg1: String!, arg2: String!): String

  # reverse text
  reverse(arg0: String!): String

  # extract the last n characters
  right(arg0: String!, arg1: Int!): String

  # join selectivity of > and related operators on scalar datatypes
  scalargtjoinsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!, arg4: String!): Float

  # restriction selectivity of > and related operators on scalar datatypes
  scalargtsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!): Float

  # join selectivity of < and related operators on scalar datatypes
  scalarltjoinsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!, arg4: String!): Float

  # restriction selectivity of < and related operators on scalar datatypes
  scalarltsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!): Float

  # map schema contents to XML
  schemaToXml(schema: String!, nulls: Boolean!, tableforest: Boolean!, targetns: String!): String

  # map schema contents and structure to XML and XML Schema
  schemaToXmlAndXmlschema(schema: String!, nulls: Boolean!, tableforest: Boolean!, targetns: String!): String

  # map schema structure to XML Schema
  schemaToXmlschema(schema: String!, nulls: Boolean!, tableforest: Boolean!, targetns: String!): String

  # session user name
  sessionUser: String

  # set byte
  setByte(arg0: String!, arg1: Int!, arg2: Int!): String

  # set weight of lexeme\'s entries
  setweight(arg0: String!, arg1: String!): String

  # I/O
  shellIn(arg0: String): String

  # I/O
  shellOut(arg0: String!): String

  # get description for object id and shared catalog name
  shobjDescription(arg0: Float!, arg1: String!): String

  # convert SQL99 regexp pattern to POSIX style
  similarEscape(arg0: String, arg1: String): String

  # sine
  sin(arg0: Float!): Float

  # slope between points
  slope(arg0: String!, arg1: String!): Float

  # storage manager
  smgreq(arg0: String!, arg1: String!): Boolean

  # I/O
  smgrin(arg0: String!): String

  # storage manager
  smgrne(arg0: String!, arg1: String!): Boolean

  # I/O
  smgrout(arg0: String!): String

  # SP-GiST support for k-d tree over point
  spgKdChoose(arg0: String!, arg1: String!): String

  # SP-GiST support for k-d tree over point
  spgKdConfig(arg0: String!, arg1: String!): String

  # SP-GiST support for k-d tree over point
  spgKdInnerConsistent(arg0: String!, arg1: String!): String

  # SP-GiST support for k-d tree over point
  spgKdPicksplit(arg0: String!, arg1: String!): String

  # SP-GiST support for quad tree over point
  spgQuadChoose(arg0: String!, arg1: String!): String

  # SP-GiST support for quad tree over point
  spgQuadConfig(arg0: String!, arg1: String!): String

  # SP-GiST support for quad tree over point
  spgQuadInnerConsistent(arg0: String!, arg1: String!): String

  # SP-GiST support for quad tree and k-d tree over point
  spgQuadLeafConsistent(arg0: String!, arg1: String!): Boolean

  # SP-GiST support for quad tree over point
  spgQuadPicksplit(arg0: String!, arg1: String!): String

  # SP-GiST support for quad tree over range
  spgRangeQuadChoose(arg0: String!, arg1: String!): String

  # SP-GiST support for quad tree over range
  spgRangeQuadConfig(arg0: String!, arg1: String!): String

  # SP-GiST support for quad tree over range
  spgRangeQuadInnerConsistent(arg0: String!, arg1: String!): String

  # SP-GiST support for quad tree over range
  spgRangeQuadLeafConsistent(arg0: String!, arg1: String!): Boolean

  # SP-GiST support for quad tree over range
  spgRangeQuadPicksplit(arg0: String!, arg1: String!): String

  # SP-GiST support for radix tree over text
  spgTextChoose(arg0: String!, arg1: String!): String

  # SP-GiST support for radix tree over text
  spgTextConfig(arg0: String!, arg1: String!): String

  # SP-GiST support for radix tree over text
  spgTextInnerConsistent(arg0: String!, arg1: String!): String

  # SP-GiST support for radix tree over text
  spgTextLeafConsistent(arg0: String!, arg1: String!): Boolean

  # SP-GiST support for radix tree over text
  spgTextPicksplit(arg0: String!, arg1: String!): String

  # spgist(internal)
  spgcanreturn(arg0: String!, arg1: Int!): Boolean

  # spgist(internal)
  spgoptions(arg0: [String]!, arg1: Boolean!): String

  # split string by field_sep and return field_num
  splitPart(arg0: String!, arg1: String!, arg2: Int!): String

  # current statement time
  statementTimestamp: Datetime

  # aggregate final function
  stringAggFinalfn(arg0: String): String

  # aggregate transition function
  stringAggTransfn(arg0: String, arg1: String, arg2: String): String

  # strip position information
  strip(arg0: String!): String

  # position of substring
  strpos(arg0: String!, arg1: String!): Int

  # map table contents to XML
  tableToXml(tbl: Float!, nulls: Boolean!, tableforest: Boolean!, targetns: String!): String

  # map table contents and structure to XML and XML Schema
  tableToXmlAndXmlschema(tbl: Float!, nulls: Boolean!, tableforest: Boolean!, targetns: String!): String

  # map table structure to XML Schema
  tableToXmlschema(tbl: Float!, nulls: Boolean!, tableforest: Boolean!, targetns: String!): String

  # tangent
  tan(arg0: Float!): Float

  # implementation of >= operator
  textGe(arg0: String!, arg1: String!): Boolean

  # implementation of > operator
  textGt(arg0: String!, arg1: String!): Boolean

  # larger of two
  textLarger(arg0: String!, arg1: String!): String

  # implementation of <= operator
  textLe(arg0: String!, arg1: String!): Boolean

  # implementation of < operator
  textLt(arg0: String!, arg1: String!): Boolean

  # implementation of ~>=~ operator
  textPatternGe(arg0: String!, arg1: String!): Boolean

  # implementation of ~>~ operator
  textPatternGt(arg0: String!, arg1: String!): Boolean

  # implementation of ~<=~ operator
  textPatternLe(arg0: String!, arg1: String!): Boolean

  # implementation of ~<~ operator
  textPatternLt(arg0: String!, arg1: String!): Boolean

  # smaller of two
  textSmaller(arg0: String!, arg1: String!): String

  # implementation of || operator
  textanycat(arg0: String!, arg1: String!): String

  # implementation of || operator
  textcat(arg0: String!, arg1: String!): String

  # implementation of = operator
  texteq(arg0: String!, arg1: String!): Boolean

  # implementation of ~~* operator
  texticlike(arg0: String!, arg1: String!): Boolean

  # implementation of !~~* operator
  texticnlike(arg0: String!, arg1: String!): Boolean

  # implementation of ~* operator
  texticregexeq(arg0: String!, arg1: String!): Boolean

  # implementation of !~* operator
  texticregexne(arg0: String!, arg1: String!): Boolean

  # I/O
  textin(arg0: String!): String

  # length
  textlen(arg0: String!): Int

  # implementation of ~~ operator
  textlike(arg0: String!, arg1: String!): Boolean

  # implementation of <> operator
  textne(arg0: String!, arg1: String!): Boolean

  # implementation of !~~ operator
  textnlike(arg0: String!, arg1: String!): Boolean

  # I/O
  textout(arg0: String!): String

  # I/O
  textrecv(arg0: String!): String

  # implementation of ~ operator
  textregexeq(arg0: String!, arg1: String!): Boolean

  # implementation of !~ operator
  textregexne(arg0: String!, arg1: String!): Boolean

  # I/O
  textsend(arg0: String!): String

  # (internal)
  thesaurusInit(arg0: String!): String

  # (internal)
  thesaurusLexize(arg0: String!, arg1: String!, arg2: String!, arg3: String!): String

  # implementation of = operator
  tideq(arg0: String!, arg1: String!): Boolean

  # implementation of >= operator
  tidge(arg0: String!, arg1: String!): Boolean

  # implementation of > operator
  tidgt(arg0: String!, arg1: String!): Boolean

  # I/O
  tidin(arg0: String!): String

  # larger of two
  tidlarger(arg0: String!, arg1: String!): String

  # implementation of <= operator
  tidle(arg0: String!, arg1: String!): Boolean

  # implementation of < operator
  tidlt(arg0: String!, arg1: String!): Boolean

  # implementation of <> operator
  tidne(arg0: String!, arg1: String!): Boolean

  # I/O
  tidout(arg0: String!): String

  # I/O
  tidrecv(arg0: String!): String

  # I/O
  tidsend(arg0: String!): String

  # smaller of two
  tidsmaller(arg0: String!, arg1: String!): String

  # less-equal-greater
  timeCmp(arg0: Time!, arg1: Time!): Int

  # implementation of = operator
  timeEq(arg0: Time!, arg1: Time!): Boolean

  # implementation of >= operator
  timeGe(arg0: Time!, arg1: Time!): Boolean

  # implementation of > operator
  timeGt(arg0: Time!, arg1: Time!): Boolean

  # hash
  timeHash(arg0: Time!): Int

  # I/O
  timeIn(arg0: String!, arg1: Float!, arg2: Int!): Time

  # larger of two
  timeLarger(arg0: Time!, arg1: Time!): Time

  # implementation of <= operator
  timeLe(arg0: Time!, arg1: Time!): Boolean

  # implementation of < operator
  timeLt(arg0: Time!, arg1: Time!): Boolean

  # implementation of - operator
  timeMiInterval(arg0: Time!, arg1: IntervalInput!): Time

  # implementation of - operator
  timeMiTime(arg0: Time!, arg1: Time!): Interval

  # implementation of <> operator
  timeNe(arg0: Time!, arg1: Time!): Boolean

  # I/O
  timeOut(arg0: Time!): String

  # implementation of + operator
  timePlInterval(arg0: Time!, arg1: IntervalInput!): Time

  # I/O
  timeRecv(arg0: String!, arg1: Float!, arg2: Int!): Time

  # I/O
  timeSend(arg0: Time!): String

  # smaller of two
  timeSmaller(arg0: Time!, arg1: Time!): Time

  # transform a time length coercion
  timeTransform(arg0: String!): String

  # implementation of + operator
  timedatePl(arg0: Time!, arg1: Date!): Datetime

  # implementation of - operator
  timemi(arg0: String!, arg1: String!): String

  # current date and time (abstime)
  timenow: String

  # implementation of + operator
  timepl(arg0: String!, arg1: String!): String

  # less-equal-greater
  timestampCmp(arg0: Datetime!, arg1: Datetime!): Int

  # less-equal-greater
  timestampCmpDate(arg0: Datetime!, arg1: Date!): Int

  # less-equal-greater
  timestampCmpTimestamptz(arg0: Datetime!, arg1: Datetime!): Int

  # implementation of = operator
  timestampEq(arg0: Datetime!, arg1: Datetime!): Boolean

  # implementation of = operator
  timestampEqDate(arg0: Datetime!, arg1: Date!): Boolean

  # implementation of = operator
  timestampEqTimestamptz(arg0: Datetime!, arg1: Datetime!): Boolean

  # implementation of >= operator
  timestampGe(arg0: Datetime!, arg1: Datetime!): Boolean

  # implementation of >= operator
  timestampGeDate(arg0: Datetime!, arg1: Date!): Boolean

  # implementation of >= operator
  timestampGeTimestamptz(arg0: Datetime!, arg1: Datetime!): Boolean

  # implementation of > operator
  timestampGt(arg0: Datetime!, arg1: Datetime!): Boolean

  # implementation of > operator
  timestampGtDate(arg0: Datetime!, arg1: Date!): Boolean

  # implementation of > operator
  timestampGtTimestamptz(arg0: Datetime!, arg1: Datetime!): Boolean

  # hash
  timestampHash(arg0: Datetime!): Int

  # I/O
  timestampIn(arg0: String!, arg1: Float!, arg2: Int!): Datetime

  # transform a time zone adjustment
  timestampIzoneTransform(arg0: String!): String

  # larger of two
  timestampLarger(arg0: Datetime!, arg1: Datetime!): Datetime

  # implementation of <= operator
  timestampLe(arg0: Datetime!, arg1: Datetime!): Boolean

  # implementation of <= operator
  timestampLeDate(arg0: Datetime!, arg1: Date!): Boolean

  # implementation of <= operator
  timestampLeTimestamptz(arg0: Datetime!, arg1: Datetime!): Boolean

  # implementation of < operator
  timestampLt(arg0: Datetime!, arg1: Datetime!): Boolean

  # implementation of < operator
  timestampLtDate(arg0: Datetime!, arg1: Date!): Boolean

  # implementation of < operator
  timestampLtTimestamptz(arg0: Datetime!, arg1: Datetime!): Boolean

  # implementation of - operator
  timestampMi(arg0: Datetime!, arg1: Datetime!): Interval

  # implementation of - operator
  timestampMiInterval(arg0: Datetime!, arg1: IntervalInput!): Datetime

  # implementation of <> operator
  timestampNe(arg0: Datetime!, arg1: Datetime!): Boolean

  # implementation of <> operator
  timestampNeDate(arg0: Datetime!, arg1: Date!): Boolean

  # implementation of <> operator
  timestampNeTimestamptz(arg0: Datetime!, arg1: Datetime!): Boolean

  # I/O
  timestampOut(arg0: Datetime!): String

  # implementation of + operator
  timestampPlInterval(arg0: Datetime!, arg1: IntervalInput!): Datetime

  # I/O
  timestampRecv(arg0: String!, arg1: Float!, arg2: Int!): Datetime

  # I/O
  timestampSend(arg0: Datetime!): String

  # smaller of two
  timestampSmaller(arg0: Datetime!, arg1: Datetime!): Datetime

  # sort support
  timestampSortsupport(arg0: String!): String

  # transform a timestamp length coercion
  timestampTransform(arg0: String!): String

  # transform a time zone adjustment
  timestampZoneTransform(arg0: String!): String

  # I/O typmod
  timestamptypmodin(arg0: [String]!): Int

  # I/O typmod
  timestamptypmodout(arg0: Int!): String

  # less-equal-greater
  timestamptzCmp(arg0: Datetime!, arg1: Datetime!): Int

  # less-equal-greater
  timestamptzCmpDate(arg0: Datetime!, arg1: Date!): Int

  # less-equal-greater
  timestamptzCmpTimestamp(arg0: Datetime!, arg1: Datetime!): Int

  # implementation of = operator
  timestamptzEq(arg0: Datetime!, arg1: Datetime!): Boolean

  # implementation of = operator
  timestamptzEqDate(arg0: Datetime!, arg1: Date!): Boolean

  # implementation of = operator
  timestamptzEqTimestamp(arg0: Datetime!, arg1: Datetime!): Boolean

  # implementation of >= operator
  timestamptzGe(arg0: Datetime!, arg1: Datetime!): Boolean

  # implementation of >= operator
  timestamptzGeDate(arg0: Datetime!, arg1: Date!): Boolean

  # implementation of >= operator
  timestamptzGeTimestamp(arg0: Datetime!, arg1: Datetime!): Boolean

  # implementation of > operator
  timestamptzGt(arg0: Datetime!, arg1: Datetime!): Boolean

  # implementation of > operator
  timestamptzGtDate(arg0: Datetime!, arg1: Date!): Boolean

  # implementation of > operator
  timestamptzGtTimestamp(arg0: Datetime!, arg1: Datetime!): Boolean

  # I/O
  timestamptzIn(arg0: String!, arg1: Float!, arg2: Int!): Datetime

  # larger of two
  timestamptzLarger(arg0: Datetime!, arg1: Datetime!): Datetime

  # implementation of <= operator
  timestamptzLe(arg0: Datetime!, arg1: Datetime!): Boolean

  # implementation of <= operator
  timestamptzLeDate(arg0: Datetime!, arg1: Date!): Boolean

  # implementation of <= operator
  timestamptzLeTimestamp(arg0: Datetime!, arg1: Datetime!): Boolean

  # implementation of < operator
  timestamptzLt(arg0: Datetime!, arg1: Datetime!): Boolean

  # implementation of < operator
  timestamptzLtDate(arg0: Datetime!, arg1: Date!): Boolean

  # implementation of < operator
  timestamptzLtTimestamp(arg0: Datetime!, arg1: Datetime!): Boolean

  # implementation of - operator
  timestamptzMi(arg0: Datetime!, arg1: Datetime!): Interval

  # implementation of - operator
  timestamptzMiInterval(arg0: Datetime!, arg1: IntervalInput!): Datetime

  # implementation of <> operator
  timestamptzNe(arg0: Datetime!, arg1: Datetime!): Boolean

  # implementation of <> operator
  timestamptzNeDate(arg0: Datetime!, arg1: Date!): Boolean

  # implementation of <> operator
  timestamptzNeTimestamp(arg0: Datetime!, arg1: Datetime!): Boolean

  # I/O
  timestamptzOut(arg0: Datetime!): String

  # implementation of + operator
  timestamptzPlInterval(arg0: Datetime!, arg1: IntervalInput!): Datetime

  # I/O
  timestamptzRecv(arg0: String!, arg1: Float!, arg2: Int!): Datetime

  # I/O
  timestamptzSend(arg0: Datetime!): String

  # smaller of two
  timestamptzSmaller(arg0: Datetime!, arg1: Datetime!): Datetime

  # I/O typmod
  timestamptztypmodin(arg0: [String]!): Int

  # I/O typmod
  timestamptztypmodout(arg0: Int!): String

  # I/O typmod
  timetypmodin(arg0: [String]!): Int

  # I/O typmod
  timetypmodout(arg0: Int!): String

  # less-equal-greater
  timetzCmp(arg0: Time!, arg1: Time!): Int

  # implementation of = operator
  timetzEq(arg0: Time!, arg1: Time!): Boolean

  # implementation of >= operator
  timetzGe(arg0: Time!, arg1: Time!): Boolean

  # implementation of > operator
  timetzGt(arg0: Time!, arg1: Time!): Boolean

  # hash
  timetzHash(arg0: Time!): Int

  # I/O
  timetzIn(arg0: String!, arg1: Float!, arg2: Int!): Time

  # larger of two
  timetzLarger(arg0: Time!, arg1: Time!): Time

  # implementation of <= operator
  timetzLe(arg0: Time!, arg1: Time!): Boolean

  # implementation of < operator
  timetzLt(arg0: Time!, arg1: Time!): Boolean

  # implementation of - operator
  timetzMiInterval(arg0: Time!, arg1: IntervalInput!): Time

  # implementation of <> operator
  timetzNe(arg0: Time!, arg1: Time!): Boolean

  # I/O
  timetzOut(arg0: Time!): String

  # implementation of + operator
  timetzPlInterval(arg0: Time!, arg1: IntervalInput!): Time

  # I/O
  timetzRecv(arg0: String!, arg1: Float!, arg2: Int!): Time

  # I/O
  timetzSend(arg0: Time!): String

  # smaller of two
  timetzSmaller(arg0: Time!, arg1: Time!): Time

  # implementation of + operator
  timetzdatePl(arg0: Time!, arg1: Date!): Datetime

  # I/O typmod
  timetztypmodin(arg0: [String]!): Int

  # I/O typmod
  timetztypmodout(arg0: Int!): String

  # convert to tinterval
  tinterval(arg0: String!, arg1: String!): String

  # implementation of << operator
  tintervalct(arg0: String!, arg1: String!): Boolean

  # end of interval
  tintervalend(arg0: String!): String

  # implementation of = operator
  tintervaleq(arg0: String!, arg1: String!): Boolean

  # implementation of >= operator
  tintervalge(arg0: String!, arg1: String!): Boolean

  # implementation of > operator
  tintervalgt(arg0: String!, arg1: String!): Boolean

  # I/O
  tintervalin(arg0: String!): String

  # implementation of <= operator
  tintervalle(arg0: String!, arg1: String!): Boolean

  # implementation of #= operator
  tintervalleneq(arg0: String!, arg1: String!): Boolean

  # implementation of #>= operator
  tintervallenge(arg0: String!, arg1: String!): Boolean

  # implementation of #> operator
  tintervallengt(arg0: String!, arg1: String!): Boolean

  # implementation of #<= operator
  tintervallenle(arg0: String!, arg1: String!): Boolean

  # implementation of #< operator
  tintervallenlt(arg0: String!, arg1: String!): Boolean

  # implementation of #<> operator
  tintervallenne(arg0: String!, arg1: String!): Boolean

  # implementation of < operator
  tintervallt(arg0: String!, arg1: String!): Boolean

  # implementation of <> operator
  tintervalne(arg0: String!, arg1: String!): Boolean

  # I/O
  tintervalout(arg0: String!): String

  # implementation of && operator
  tintervalov(arg0: String!, arg1: String!): Boolean

  # I/O
  tintervalrecv(arg0: String!): String

  # tinterval to reltime
  tintervalrel(arg0: String!): String

  # implementation of ~= operator
  tintervalsame(arg0: String!, arg1: String!): Boolean

  # I/O
  tintervalsend(arg0: String!): String

  # implementation of | operator
  tintervalstart(arg0: String!): String

  # convert text to date
  toDate(arg0: String!, arg1: String!): Date

  # map input to json
  toJson(arg0: String!): Json

  # map input to jsonb
  toJsonb(arg0: String!): Json

  # convert text to numeric
  toNumber(arg0: String!, arg1: String!): Float

  # convert classname to regclass
  toRegclass(arg0: String!): Float

  # convert namespace name to regnamespace
  toRegnamespace(arg0: String!): Float

  # convert operator name to regoper
  toRegoper(arg0: String!): Float

  # convert operator name to regoperator
  toRegoperator(arg0: String!): Float

  # convert proname to regproc
  toRegproc(arg0: String!): Float

  # convert proname to regprocedure
  toRegprocedure(arg0: String!): Float

  # convert role name to regrole
  toRegrole(arg0: String!): Float

  # convert type name to regtype
  toRegtype(arg0: String!): Float

  # current transaction time
  transactionTimestamp: Datetime

  # map a set of characters appearing in string
  translate(arg0: String!, arg1: String!, arg2: String!): String

  # I/O
  triggerIn(arg0: String): String

  # I/O
  triggerOut(arg0: String!): String

  # normalize one word by dictionary
  tsLexize(arg0: Float!, arg1: String!): [String]

  # implementation of @@ operator
  tsMatchQv(arg0: String!, arg1: String!): Boolean

  # implementation of @@ operator
  tsMatchTq(arg0: String!, arg1: String!): Boolean

  # implementation of @@ operator
  tsMatchTt(arg0: String!, arg1: String!): Boolean

  # implementation of @@ operator
  tsMatchVq(arg0: String!, arg1: String!): Boolean

  # tsvector typanalyze
  tsTypanalyze(arg0: String!): Boolean

  # I/O
  tsmHandlerIn(arg0: String): String

  # I/O
  tsmHandlerOut(arg0: String!): String

  # join selectivity of tsvector @@ tsquery
  tsmatchjoinsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!, arg4: String!): Float

  # restriction selectivity of tsvector @@ tsquery
  tsmatchsel(arg0: String!, arg1: Float!, arg2: String!, arg3: Int!): Float

  # implementation of <@ operator
  tsqMcontained(arg0: String!, arg1: String!): Boolean

  # implementation of @> operator
  tsqMcontains(arg0: String!, arg1: String!): Boolean

  # implementation of && operator
  tsqueryAnd(arg0: String!, arg1: String!): String

  # less-equal-greater
  tsqueryCmp(arg0: String!, arg1: String!): Int

  # implementation of = operator
  tsqueryEq(arg0: String!, arg1: String!): Boolean

  # implementation of >= operator
  tsqueryGe(arg0: String!, arg1: String!): Boolean

  # implementation of > operator
  tsqueryGt(arg0: String!, arg1: String!): Boolean

  # implementation of <= operator
  tsqueryLe(arg0: String!, arg1: String!): Boolean

  # implementation of < operator
  tsqueryLt(arg0: String!, arg1: String!): Boolean

  # implementation of <> operator
  tsqueryNe(arg0: String!, arg1: String!): Boolean

  # implementation of !! operator
  tsqueryNot(arg0: String!): String

  # implementation of || operator
  tsqueryOr(arg0: String!, arg1: String!): String

  # I/O
  tsqueryin(arg0: String!): String

  # I/O
  tsqueryout(arg0: String!): String

  # I/O
  tsqueryrecv(arg0: String!): String

  # I/O
  tsquerysend(arg0: String!): String

  # float8 difference of two timestamp values
  tsrangeSubdiff(arg0: Datetime!, arg1: Datetime!): Float

  # float8 difference of two timestamp with time zone values
  tstzrangeSubdiff(arg0: Datetime!, arg1: Datetime!): Float

  # less-equal-greater
  tsvectorCmp(arg0: String!, arg1: String!): Int

  # implementation of || operator
  tsvectorConcat(arg0: String!, arg1: String!): String

  # implementation of = operator
  tsvectorEq(arg0: String!, arg1: String!): Boolean

  # implementation of >= operator
  tsvectorGe(arg0: String!, arg1: String!): Boolean

  # implementation of > operator
  tsvectorGt(arg0: String!, arg1: String!): Boolean

  # implementation of <= operator
  tsvectorLe(arg0: String!, arg1: String!): Boolean

  # implementation of < operator
  tsvectorLt(arg0: String!, arg1: String!): Boolean

  # implementation of <> operator
  tsvectorNe(arg0: String!, arg1: String!): Boolean

  # I/O
  tsvectorin(arg0: String!): String

  # I/O
  tsvectorout(arg0: String!): String

  # I/O
  tsvectorrecv(arg0: String!): String

  # I/O
  tsvectorsend(arg0: String!): String

  # get current transaction ID
  txidCurrent: Int

  # get current snapshot
  txidCurrentSnapshot: String

  # I/O
  txidSnapshotIn(arg0: String!): String

  # I/O
  txidSnapshotOut(arg0: String!): String

  # I/O
  txidSnapshotRecv(arg0: String!): String

  # I/O
  txidSnapshotSend(arg0: String!): String

  # Reads and enables paginatation through a set of \`Int\`.
  txidSnapshotXip(
    # The method to use when ordering \`Int\`.
    orderBy: TxidSnapshotXipOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    arg0: String!
  ): TxidSnapshotXipConnection

  # get xmax of snapshot
  txidSnapshotXmax(arg0: String!): Int

  # get xmin of snapshot
  txidSnapshotXmin(arg0: String!): Int

  # is txid visible in snapshot?
  txidVisibleInSnapshot(arg0: Int!, arg1: String!): Boolean

  # I/O
  unknownin(arg0: String!): String

  # I/O
  unknownout(arg0: String!): String

  # I/O
  unknownrecv(arg0: String!): String

  # I/O
  unknownsend(arg0: String!): String

  # Reads and enables paginatation through a set of \`String\`.
  unnest(
    # The method to use when ordering \`String\`.
    orderBy: UnnestOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    arg0: String!
  ): UnnestConnection

  # is the range\'s upper bound inclusive?
  upperInc(arg0: String!): Boolean

  # is the range\'s upper bound infinite?
  upperInf(arg0: String!): Boolean

  # less-equal-greater
  uuidCmp(arg0: Uuid!, arg1: Uuid!): Int

  # implementation of = operator
  uuidEq(arg0: Uuid!, arg1: Uuid!): Boolean

  # implementation of >= operator
  uuidGe(arg0: Uuid!, arg1: Uuid!): Boolean

  # implementation of > operator
  uuidGt(arg0: Uuid!, arg1: Uuid!): Boolean

  # hash
  uuidHash(arg0: Uuid!): Int

  # I/O
  uuidIn(arg0: String!): Uuid

  # implementation of <= operator
  uuidLe(arg0: Uuid!, arg1: Uuid!): Boolean

  # implementation of < operator
  uuidLt(arg0: Uuid!, arg1: Uuid!): Boolean

  # implementation of <> operator
  uuidNe(arg0: Uuid!, arg1: Uuid!): Boolean

  # I/O
  uuidOut(arg0: Uuid!): String

  # I/O
  uuidRecv(arg0: String!): Uuid

  # I/O
  uuidSend(arg0: Uuid!): String

  # adjust varbit() to typmod length
  varbit(arg0: String!, arg1: Int!, arg2: Boolean!): String

  # I/O
  varbitIn(arg0: String!, arg1: Float!, arg2: Int!): String

  # I/O
  varbitOut(arg0: String!): String

  # I/O
  varbitRecv(arg0: String!, arg1: Float!, arg2: Int!): String

  # I/O
  varbitSend(arg0: String!): String

  # transform a varbit length coercion
  varbitTransform(arg0: String!): String

  # less-equal-greater
  varbitcmp(arg0: String!, arg1: String!): Int

  # implementation of = operator
  varbiteq(arg0: String!, arg1: String!): Boolean

  # implementation of >= operator
  varbitge(arg0: String!, arg1: String!): Boolean

  # implementation of > operator
  varbitgt(arg0: String!, arg1: String!): Boolean

  # implementation of <= operator
  varbitle(arg0: String!, arg1: String!): Boolean

  # implementation of < operator
  varbitlt(arg0: String!, arg1: String!): Boolean

  # implementation of <> operator
  varbitne(arg0: String!, arg1: String!): Boolean

  # I/O typmod
  varbittypmodin(arg0: [String]!): Int

  # I/O typmod
  varbittypmodout(arg0: Int!): String

  # transform a varchar length coercion
  varcharTransform(arg0: String!): String

  # I/O
  varcharin(arg0: String!, arg1: Float!, arg2: Int!): String

  # I/O
  varcharout(arg0: String!): String

  # I/O
  varcharrecv(arg0: String!, arg1: Float!, arg2: Int!): String

  # I/O
  varcharsend(arg0: String!): String

  # I/O typmod
  varchartypmodin(arg0: [String]!): Int

  # I/O typmod
  varchartypmodout(arg0: Int!): String

  # PostgreSQL version string
  version: String

  # I/O
  voidIn(arg0: String!): String

  # I/O
  voidOut(arg0: String!): String

  # I/O
  voidRecv(arg0: String!): String

  # I/O
  voidSend(arg0: String!): String

  # box width
  width(arg0: String!): Float

  # implementation of = operator
  xideq(arg0: String!, arg1: String!): Boolean

  # implementation of = operator
  xideqint4(arg0: String!, arg1: Int!): Boolean

  # I/O
  xidin(arg0: String!): String

  # I/O
  xidout(arg0: String!): String

  # I/O
  xidrecv(arg0: String!): String

  # I/O
  xidsend(arg0: String!): String

  # perform a non-validating parse of a character string to produce an XML value
  xml(arg0: String!): String

  # I/O
  xmlIn(arg0: String!): String

  # determine if a string is well formed XML
  xmlIsWellFormed(arg0: String!): Boolean

  # determine if a string is well formed XML content
  xmlIsWellFormedContent(arg0: String!): Boolean

  # determine if a string is well formed XML document
  xmlIsWellFormedDocument(arg0: String!): Boolean

  # I/O
  xmlOut(arg0: String!): String

  # I/O
  xmlRecv(arg0: String!): String

  # I/O
  xmlSend(arg0: String!): String

  # generate XML comment
  xmlcomment(arg0: String!): String

  # aggregate transition function
  xmlconcat2(arg0: String, arg1: String): String

  # test XML value against XPath expression
  xmlexists(arg0: String!, arg1: String!): Boolean

  # validate an XML value
  xmlvalidate(arg0: String!, arg1: String!): Boolean

  # Reads and enables paginatation through a set of \`PgAggregate\`.
  allPgAggregates(
    # The method to use when ordering \`PgAggregate\`.
    orderBy: PgAggregatesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    aggfnoid: Float
    aggkind: String
    aggnumdirectargs: Int
    aggtransfn: Float
    aggfinalfn: Float
    aggmtransfn: Float
    aggminvtransfn: Float
    aggmfinalfn: Float
    aggfinalextra: Boolean
    aggmfinalextra: Boolean
    aggsortop: Float
    aggtranstype: Float
    aggtransspace: Int
    aggmtranstype: Float
    aggmtransspace: Int
    agginitval: String
    aggminitval: String
  ): PgAggregatesConnection

  # Reads and enables paginatation through a set of \`PgAm\`.
  allPgAms(
    # The method to use when ordering \`PgAm\`.
    orderBy: PgAmsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    amname: String
    amstrategies: Int
    amsupport: Int
    amcanorder: Boolean
    amcanorderbyop: Boolean
    amcanbackward: Boolean
    amcanunique: Boolean
    amcanmulticol: Boolean
    amoptionalkey: Boolean
    amsearcharray: Boolean
    amsearchnulls: Boolean
    amstorage: Boolean
    amclusterable: Boolean
    ampredlocks: Boolean
    amkeytype: Float
    aminsert: Float
    ambeginscan: Float
    amgettuple: Float
    amgetbitmap: Float
    amrescan: Float
    amendscan: Float
    ammarkpos: Float
    amrestrpos: Float
    ambuild: Float
    ambuildempty: Float
    ambulkdelete: Float
    amvacuumcleanup: Float
    amcanreturn: Float
    amcostestimate: Float
    amoptions: Float
  ): PgAmsConnection

  # Reads and enables paginatation through a set of \`PgAmop\`.
  allPgAmops(
    # The method to use when ordering \`PgAmop\`.
    orderBy: PgAmopsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    amopfamily: Float
    amoplefttype: Float
    amoprighttype: Float
    amopstrategy: Int
    amoppurpose: String
    amopopr: Float
    amopmethod: Float
    amopsortfamily: Float
  ): PgAmopsConnection

  # Reads and enables paginatation through a set of \`PgAmproc\`.
  allPgAmprocs(
    # The method to use when ordering \`PgAmproc\`.
    orderBy: PgAmprocsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    amprocfamily: Float
    amproclefttype: Float
    amprocrighttype: Float
    amprocnum: Int
    amproc: Float
  ): PgAmprocsConnection

  # Reads and enables paginatation through a set of \`PgAttrdef\`.
  allPgAttrdefs(
    # The method to use when ordering \`PgAttrdef\`.
    orderBy: PgAttrdefsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    adrelid: Float
    adnum: Int
    adbin: String
    adsrc: String
  ): PgAttrdefsConnection

  # Reads and enables paginatation through a set of \`PgAttribute\`.
  allPgAttributes(
    # The method to use when ordering \`PgAttribute\`.
    orderBy: PgAttributesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    attrelid: Float
    attname: String
    atttypid: Float
    attstattarget: Int
    attlen: Int
    attnum: Int
    attndims: Int
    attcacheoff: Int
    atttypmod: Int
    attbyval: Boolean
    attstorage: String
    attalign: String
    attnotnull: Boolean
    atthasdef: Boolean
    attisdropped: Boolean
    attislocal: Boolean
    attinhcount: Int
    attcollation: Float
    attacl: [String]
    attoptions: [String]
    attfdwoptions: [String]
  ): PgAttributesConnection

  # Reads and enables paginatation through a set of \`PgAuthMember\`.
  allPgAuthMembers(
    # The method to use when ordering \`PgAuthMember\`.
    orderBy: PgAuthMembersOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    roleid: Float
    member: Float
    grantor: Float
    adminOption: Boolean
  ): PgAuthMembersConnection

  # Reads and enables paginatation through a set of \`PgAuthid\`.
  allPgAuthids(
    # The method to use when ordering \`PgAuthid\`.
    orderBy: PgAuthidsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    rolname: String
    rolsuper: Boolean
    rolinherit: Boolean
    rolcreaterole: Boolean
    rolcreatedb: Boolean
    rolcanlogin: Boolean
    rolreplication: Boolean
    rolbypassrls: Boolean
    rolconnlimit: Int
    rolpassword: String
    rolvaliduntil: Datetime
  ): PgAuthidsConnection

  # Reads and enables paginatation through a set of \`PgAvailableExtensionVersion\`.
  allPgAvailableExtensionVersions(
    # The method to use when ordering \`PgAvailableExtensionVersion\`.
    orderBy: PgAvailableExtensionVersionsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    name: String
    version: String
    installed: Boolean
    superuser: Boolean
    relocatable: Boolean
    schema: String
    requires: [String]
    comment: String
  ): PgAvailableExtensionVersionsConnection

  # Reads and enables paginatation through a set of \`PgAvailableExtension\`.
  allPgAvailableExtensions(
    # The method to use when ordering \`PgAvailableExtension\`.
    orderBy: PgAvailableExtensionsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    name: String
    defaultVersion: String
    installedVersion: String
    comment: String
  ): PgAvailableExtensionsConnection

  # Reads and enables paginatation through a set of \`PgCast\`.
  allPgCasts(
    # The method to use when ordering \`PgCast\`.
    orderBy: PgCastsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    castsource: Float
    casttarget: Float
    castfunc: Float
    castcontext: String
    castmethod: String
  ): PgCastsConnection

  # Reads and enables paginatation through a set of \`PgClass\`.
  allPgClasses(
    # The method to use when ordering \`PgClass\`.
    orderBy: PgClassesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    relname: String
    relnamespace: Float
    reltype: Float
    reloftype: Float
    relowner: Float
    relam: Float
    relfilenode: Float
    reltablespace: Float
    relpages: Int
    reltuples: Float
    relallvisible: Int
    reltoastrelid: Float
    relhasindex: Boolean
    relisshared: Boolean
    relpersistence: String
    relkind: String
    relnatts: Int
    relchecks: Int
    relhasoids: Boolean
    relhaspkey: Boolean
    relhasrules: Boolean
    relhastriggers: Boolean
    relhassubclass: Boolean
    relrowsecurity: Boolean
    relforcerowsecurity: Boolean
    relispopulated: Boolean
    relreplident: String
    relfrozenxid: String
    relminmxid: String
    relacl: [String]
    reloptions: [String]
  ): PgClassesConnection

  # Reads and enables paginatation through a set of \`PgCollation\`.
  allPgCollations(
    # The method to use when ordering \`PgCollation\`.
    orderBy: PgCollationsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    collname: String
    collnamespace: Float
    collowner: Float
    collencoding: Int
    collcollate: String
    collctype: String
  ): PgCollationsConnection

  # Reads and enables paginatation through a set of \`PgConstraint\`.
  allPgConstraints(
    # The method to use when ordering \`PgConstraint\`.
    orderBy: PgConstraintsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    conname: String
    connamespace: Float
    contype: String
    condeferrable: Boolean
    condeferred: Boolean
    convalidated: Boolean
    conrelid: Float
    contypid: Float
    conindid: Float
    confrelid: Float
    confupdtype: String
    confdeltype: String
    confmatchtype: String
    conislocal: Boolean
    coninhcount: Int
    connoinherit: Boolean
    conkey: [Int]
    confkey: [Int]
    conpfeqop: [Float]
    conppeqop: [Float]
    conffeqop: [Float]
    conexclop: [Float]
    conbin: String
    consrc: String
  ): PgConstraintsConnection

  # Reads and enables paginatation through a set of \`PgConversion\`.
  allPgConversions(
    # The method to use when ordering \`PgConversion\`.
    orderBy: PgConversionsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    conname: String
    connamespace: Float
    conowner: Float
    conforencoding: Int
    contoencoding: Int
    conproc: Float
    condefault: Boolean
  ): PgConversionsConnection

  # Reads and enables paginatation through a set of \`PgCursor\`.
  allPgCursors(
    # The method to use when ordering \`PgCursor\`.
    orderBy: PgCursorsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    name: String
    statement: String
    isHoldable: Boolean
    isBinary: Boolean
    isScrollable: Boolean
    creationTime: Datetime
  ): PgCursorsConnection

  # Reads and enables paginatation through a set of \`PgDatabase\`.
  allPgDatabases(
    # The method to use when ordering \`PgDatabase\`.
    orderBy: PgDatabasesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    datname: String
    datdba: Float
    encoding: Int
    datcollate: String
    datctype: String
    datistemplate: Boolean
    datallowconn: Boolean
    datconnlimit: Int
    datlastsysoid: Float
    datfrozenxid: String
    datminmxid: String
    dattablespace: Float
    datacl: [String]
  ): PgDatabasesConnection

  # Reads and enables paginatation through a set of \`PgDbRoleSetting\`.
  allPgDbRoleSettings(
    # The method to use when ordering \`PgDbRoleSetting\`.
    orderBy: PgDbRoleSettingsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    setdatabase: Float
    setrole: Float
    setconfig: [String]
  ): PgDbRoleSettingsConnection

  # Reads and enables paginatation through a set of \`PgDefaultAcl\`.
  allPgDefaultAcls(
    # The method to use when ordering \`PgDefaultAcl\`.
    orderBy: PgDefaultAclsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    defaclrole: Float
    defaclnamespace: Float
    defaclobjtype: String
    defaclacl: [String]
  ): PgDefaultAclsConnection

  # Reads and enables paginatation through a set of \`PgDepend\`.
  allPgDepends(
    # The method to use when ordering \`PgDepend\`.
    orderBy: PgDependsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    classid: Float
    objid: Float
    objsubid: Int
    refclassid: Float
    refobjid: Float
    refobjsubid: Int
    deptype: String
  ): PgDependsConnection

  # Reads and enables paginatation through a set of \`PgDescription\`.
  allPgDescriptions(
    # The method to use when ordering \`PgDescription\`.
    orderBy: PgDescriptionsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    objoid: Float
    classoid: Float
    objsubid: Int
    description: String
  ): PgDescriptionsConnection

  # Reads and enables paginatation through a set of \`PgEnum\`.
  allPgEnums(
    # The method to use when ordering \`PgEnum\`.
    orderBy: PgEnumsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    enumtypid: Float
    enumsortorder: Float
    enumlabel: String
  ): PgEnumsConnection

  # Reads and enables paginatation through a set of \`PgEventTrigger\`.
  allPgEventTriggers(
    # The method to use when ordering \`PgEventTrigger\`.
    orderBy: PgEventTriggersOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    evtname: String
    evtevent: String
    evtowner: Float
    evtfoid: Float
    evtenabled: String
    evttags: [String]
  ): PgEventTriggersConnection

  # Reads and enables paginatation through a set of \`PgExtension\`.
  allPgExtensions(
    # The method to use when ordering \`PgExtension\`.
    orderBy: PgExtensionsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    extname: String
    extowner: Float
    extnamespace: Float
    extrelocatable: Boolean
    extversion: String
    extconfig: [Float]
    extcondition: [String]
  ): PgExtensionsConnection

  # Reads and enables paginatation through a set of \`PgFileSetting\`.
  allPgFileSettings(
    # The method to use when ordering \`PgFileSetting\`.
    orderBy: PgFileSettingsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    sourcefile: String
    sourceline: Int
    seqno: Int
    name: String
    setting: String
    applied: Boolean
    error: String
  ): PgFileSettingsConnection

  # Reads and enables paginatation through a set of \`PgForeignDataWrapper\`.
  allPgForeignDataWrappers(
    # The method to use when ordering \`PgForeignDataWrapper\`.
    orderBy: PgForeignDataWrappersOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    fdwname: String
    fdwowner: Float
    fdwhandler: Float
    fdwvalidator: Float
    fdwacl: [String]
    fdwoptions: [String]
  ): PgForeignDataWrappersConnection

  # Reads and enables paginatation through a set of \`PgForeignServer\`.
  allPgForeignServers(
    # The method to use when ordering \`PgForeignServer\`.
    orderBy: PgForeignServersOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    srvname: String
    srvowner: Float
    srvfdw: Float
    srvtype: String
    srvversion: String
    srvacl: [String]
    srvoptions: [String]
  ): PgForeignServersConnection

  # Reads and enables paginatation through a set of \`PgForeignTable\`.
  allPgForeignTables(
    # The method to use when ordering \`PgForeignTable\`.
    orderBy: PgForeignTablesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    ftrelid: Float
    ftserver: Float
    ftoptions: [String]
  ): PgForeignTablesConnection

  # Reads and enables paginatation through a set of \`PgGroup\`.
  allPgGroups(
    # The method to use when ordering \`PgGroup\`.
    orderBy: PgGroupsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    groname: String
    grosysid: Float
    grolist: [Float]
  ): PgGroupsConnection

  # Reads and enables paginatation through a set of \`PgIndex\`.
  allPgIndices(
    # The method to use when ordering \`PgIndex\`.
    orderBy: PgIndicesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    indexrelid: Float
    indrelid: Float
    indnatts: Int
    indisunique: Boolean
    indisprimary: Boolean
    indisexclusion: Boolean
    indimmediate: Boolean
    indisclustered: Boolean
    indisvalid: Boolean
    indcheckxmin: Boolean
    indisready: Boolean
    indislive: Boolean
    indisreplident: Boolean
    indkey: [Int]
    indcollation: [Float]
    indclass: [Float]
    indoption: [Int]
    indexprs: String
    indpred: String
  ): PgIndicesConnection

  # Reads and enables paginatation through a set of \`PgIndexes\`.
  allPgIndexes(
    # The method to use when ordering \`PgIndexes\`.
    orderBy: PgIndexesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    schemaname: String
    tablename: String
    indexname: String
    tablespace: String
    indexdef: String
  ): PgIndexesConnection

  # Reads and enables paginatation through a set of \`PgInherit\`.
  allPgInherits(
    # The method to use when ordering \`PgInherit\`.
    orderBy: PgInheritsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    inhrelid: Float
    inhparent: Float
    inhseqno: Int
  ): PgInheritsConnection

  # Reads and enables paginatation through a set of \`PgLanguage\`.
  allPgLanguages(
    # The method to use when ordering \`PgLanguage\`.
    orderBy: PgLanguagesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    lanname: String
    lanowner: Float
    lanispl: Boolean
    lanpltrusted: Boolean
    lanplcallfoid: Float
    laninline: Float
    lanvalidator: Float
    lanacl: [String]
  ): PgLanguagesConnection

  # Reads and enables paginatation through a set of \`PgLargeobject\`.
  allPgLargeobjects(
    # The method to use when ordering \`PgLargeobject\`.
    orderBy: PgLargeobjectsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    loid: Float
    pageno: Int
    data: String
  ): PgLargeobjectsConnection

  # Reads and enables paginatation through a set of \`PgLargeobjectMetadatum\`.
  allPgLargeobjectMetadata(
    # The method to use when ordering \`PgLargeobjectMetadatum\`.
    orderBy: PgLargeobjectMetadataOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    lomowner: Float
    lomacl: [String]
  ): PgLargeobjectMetadataConnection

  # Reads and enables paginatation through a set of \`PgLock\`.
  allPgLocks(
    # The method to use when ordering \`PgLock\`.
    orderBy: PgLocksOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    locktype: String
    database: Float
    relation: Float
    page: Int
    tuple: Int
    virtualxid: String
    transactionid: String
    classid: Float
    objid: Float
    objsubid: Int
    virtualtransaction: String
    pid: Int
    mode: String
    granted: Boolean
    fastpath: Boolean
  ): PgLocksConnection

  # Reads and enables paginatation through a set of \`PgMatview\`.
  allPgMatviews(
    # The method to use when ordering \`PgMatview\`.
    orderBy: PgMatviewsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    schemaname: String
    matviewname: String
    matviewowner: String
    tablespace: String
    hasindexes: Boolean
    ispopulated: Boolean
    definition: String
  ): PgMatviewsConnection

  # Reads and enables paginatation through a set of \`PgNamespace\`.
  allPgNamespaces(
    # The method to use when ordering \`PgNamespace\`.
    orderBy: PgNamespacesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    nspname: String
    nspowner: Float
    nspacl: [String]
  ): PgNamespacesConnection

  # Reads and enables paginatation through a set of \`PgOpclass\`.
  allPgOpclasses(
    # The method to use when ordering \`PgOpclass\`.
    orderBy: PgOpclassesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    opcmethod: Float
    opcname: String
    opcnamespace: Float
    opcowner: Float
    opcfamily: Float
    opcintype: Float
    opcdefault: Boolean
    opckeytype: Float
  ): PgOpclassesConnection

  # Reads and enables paginatation through a set of \`PgOperator\`.
  allPgOperators(
    # The method to use when ordering \`PgOperator\`.
    orderBy: PgOperatorsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    oprname: String
    oprnamespace: Float
    oprowner: Float
    oprkind: String
    oprcanmerge: Boolean
    oprcanhash: Boolean
    oprleft: Float
    oprright: Float
    oprresult: Float
    oprcom: Float
    oprnegate: Float
    oprcode: Float
    oprrest: Float
    oprjoin: Float
  ): PgOperatorsConnection

  # Reads and enables paginatation through a set of \`PgOpfamily\`.
  allPgOpfamilies(
    # The method to use when ordering \`PgOpfamily\`.
    orderBy: PgOpfamiliesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    opfmethod: Float
    opfname: String
    opfnamespace: Float
    opfowner: Float
  ): PgOpfamiliesConnection

  # Reads and enables paginatation through a set of \`PgPltemplate\`.
  allPgPltemplates(
    # The method to use when ordering \`PgPltemplate\`.
    orderBy: PgPltemplatesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    tmplname: String
    tmpltrusted: Boolean
    tmpldbacreate: Boolean
    tmplhandler: String
    tmplinline: String
    tmplvalidator: String
    tmpllibrary: String
    tmplacl: [String]
  ): PgPltemplatesConnection

  # Reads and enables paginatation through a set of \`PgPolicies\`.
  allPgPolicies(
    # The method to use when ordering \`PgPolicies\`.
    orderBy: PgPoliciesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    schemaname: String
    tablename: String
    policyname: String
    roles: [String]
    cmd: String
    qual: String
    withCheck: String
  ): PgPoliciesConnection

  # Reads and enables paginatation through a set of \`PgPolicy\`.
  allPgPolicy(
    # The method to use when ordering \`PgPolicy\`.
    orderBy: PgPolicyOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    polname: String
    polrelid: Float
    polcmd: String
    polroles: [Float]
    polqual: String
    polwithcheck: String
  ): PgPolicyConnection

  # Reads and enables paginatation through a set of \`PgPreparedStatement\`.
  allPgPreparedStatements(
    # The method to use when ordering \`PgPreparedStatement\`.
    orderBy: PgPreparedStatementsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    name: String
    statement: String
    prepareTime: Datetime
    parameterTypes: [Float]
    fromSql: Boolean
  ): PgPreparedStatementsConnection

  # Reads and enables paginatation through a set of \`PgPreparedXact\`.
  allPgPreparedXacts(
    # The method to use when ordering \`PgPreparedXact\`.
    orderBy: PgPreparedXactsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    transaction: String
    gid: String
    prepared: Datetime
    owner: String
    database: String
  ): PgPreparedXactsConnection

  # Reads and enables paginatation through a set of \`PgProc\`.
  allPgProcs(
    # The method to use when ordering \`PgProc\`.
    orderBy: PgProcsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    proname: String
    pronamespace: Float
    proowner: Float
    prolang: Float
    procost: Float
    prorows: Float
    provariadic: Float
    protransform: Float
    proisagg: Boolean
    proiswindow: Boolean
    prosecdef: Boolean
    proleakproof: Boolean
    proisstrict: Boolean
    proretset: Boolean
    provolatile: String
    pronargs: Int
    pronargdefaults: Int
    prorettype: Float
    proargtypes: [Float]
    proallargtypes: [Float]
    proargmodes: [String]
    proargnames: [String]
    proargdefaults: String
    protrftypes: [Float]
    prosrc: String
    probin: String
    proconfig: [String]
    proacl: [String]
  ): PgProcsConnection

  # Reads and enables paginatation through a set of \`PgRange\`.
  allPgRanges(
    # The method to use when ordering \`PgRange\`.
    orderBy: PgRangesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    rngtypid: Float
    rngsubtype: Float
    rngcollation: Float
    rngsubopc: Float
    rngcanonical: Float
    rngsubdiff: Float
  ): PgRangesConnection

  # Reads and enables paginatation through a set of \`PgReplicationOrigin\`.
  allPgReplicationOrigins(
    # The method to use when ordering \`PgReplicationOrigin\`.
    orderBy: PgReplicationOriginsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    roident: Float
    roname: String
  ): PgReplicationOriginsConnection

  # Reads and enables paginatation through a set of \`PgReplicationOriginStatus\`.
  allPgReplicationOriginStatuses(
    # The method to use when ordering \`PgReplicationOriginStatus\`.
    orderBy: PgReplicationOriginStatusesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    localId: Float
    externalId: String
    remoteLsn: String
    localLsn: String
  ): PgReplicationOriginStatusesConnection

  # Reads and enables paginatation through a set of \`PgReplicationSlot\`.
  allPgReplicationSlots(
    # The method to use when ordering \`PgReplicationSlot\`.
    orderBy: PgReplicationSlotsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    slotName: String
    plugin: String
    slotType: String
    datoid: Float
    database: String
    active: Boolean
    activePid: Int
    xmin: String
    catalogXmin: String
    restartLsn: String
  ): PgReplicationSlotsConnection

  # Reads and enables paginatation through a set of \`PgRewrite\`.
  allPgRewrites(
    # The method to use when ordering \`PgRewrite\`.
    orderBy: PgRewritesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    rulename: String
    evClass: Float
    evType: String
    evEnabled: String
    isInstead: Boolean
    evQual: String
    evAction: String
  ): PgRewritesConnection

  # Reads and enables paginatation through a set of \`PgRole\`.
  allPgRoles(
    # The method to use when ordering \`PgRole\`.
    orderBy: PgRolesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    rolname: String
    rolsuper: Boolean
    rolinherit: Boolean
    rolcreaterole: Boolean
    rolcreatedb: Boolean
    rolcanlogin: Boolean
    rolreplication: Boolean
    rolconnlimit: Int
    rolpassword: String
    rolvaliduntil: Datetime
    rolbypassrls: Boolean
    rolconfig: [String]
    oid: Float
  ): PgRolesConnection

  # Reads and enables paginatation through a set of \`PgRule\`.
  allPgRules(
    # The method to use when ordering \`PgRule\`.
    orderBy: PgRulesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    schemaname: String
    tablename: String
    rulename: String
    definition: String
  ): PgRulesConnection

  # Reads and enables paginatation through a set of \`PgSeclabel\`.
  allPgSeclabel(
    # The method to use when ordering \`PgSeclabel\`.
    orderBy: PgSeclabelOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    objoid: Float
    classoid: Float
    objsubid: Int
    provider: String
    label: String
  ): PgSeclabelConnection

  # Reads and enables paginatation through a set of \`PgSeclabels\`.
  allPgSeclabels(
    # The method to use when ordering \`PgSeclabels\`.
    orderBy: PgSeclabelsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    objoid: Float
    classoid: Float
    objsubid: Int
    objtype: String
    objnamespace: Float
    objname: String
    provider: String
    label: String
  ): PgSeclabelsConnection

  # Reads and enables paginatation through a set of \`PgSetting\`.
  allPgSettings(
    # The method to use when ordering \`PgSetting\`.
    orderBy: PgSettingsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    name: String
    setting: String
    unit: String
    category: String
    shortDesc: String
    extraDesc: String
    context: String
    vartype: String
    source: String
    minVal: String
    maxVal: String
    enumvals: [String]
    bootVal: String
    resetVal: String
    sourcefile: String
    sourceline: Int
    pendingRestart: Boolean
  ): PgSettingsConnection

  # Reads and enables paginatation through a set of \`PgShadow\`.
  allPgShadows(
    # The method to use when ordering \`PgShadow\`.
    orderBy: PgShadowsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    usename: String
    usesysid: Float
    usecreatedb: Boolean
    usesuper: Boolean
    userepl: Boolean
    usebypassrls: Boolean
    passwd: String
    valuntil: String
    useconfig: [String]
  ): PgShadowsConnection

  # Reads and enables paginatation through a set of \`PgShdepend\`.
  allPgShdepends(
    # The method to use when ordering \`PgShdepend\`.
    orderBy: PgShdependsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    dbid: Float
    classid: Float
    objid: Float
    objsubid: Int
    refclassid: Float
    refobjid: Float
    deptype: String
  ): PgShdependsConnection

  # Reads and enables paginatation through a set of \`PgShdescription\`.
  allPgShdescriptions(
    # The method to use when ordering \`PgShdescription\`.
    orderBy: PgShdescriptionsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    objoid: Float
    classoid: Float
    description: String
  ): PgShdescriptionsConnection

  # Reads and enables paginatation through a set of \`PgShseclabel\`.
  allPgShseclabels(
    # The method to use when ordering \`PgShseclabel\`.
    orderBy: PgShseclabelsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    objoid: Float
    classoid: Float
    provider: String
    label: String
  ): PgShseclabelsConnection

  # Reads and enables paginatation through a set of \`PgStatActivity\`.
  allPgStatActivities(
    # The method to use when ordering \`PgStatActivity\`.
    orderBy: PgStatActivitiesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    datid: Float
    datname: String
    pid: Int
    usesysid: Float
    usename: String
    applicationName: String
    clientAddr: String
    clientHostname: String
    clientPort: Int
    backendStart: Datetime
    xactStart: Datetime
    queryStart: Datetime
    stateChange: Datetime
    waiting: Boolean
    state: String
    backendXid: String
    backendXmin: String
    query: String
  ): PgStatActivitiesConnection

  # Reads and enables paginatation through a set of \`PgStatAllIndex\`.
  allPgStatAllIndexes(
    # The method to use when ordering \`PgStatAllIndex\`.
    orderBy: PgStatAllIndexesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    relid: Float
    indexrelid: Float
    schemaname: String
    relname: String
    indexrelname: String
    idxScan: Int
    idxTupRead: Int
    idxTupFetch: Int
  ): PgStatAllIndexesConnection

  # Reads and enables paginatation through a set of \`PgStatAllTable\`.
  allPgStatAllTables(
    # The method to use when ordering \`PgStatAllTable\`.
    orderBy: PgStatAllTablesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    relid: Float
    schemaname: String
    relname: String
    seqScan: Int
    seqTupRead: Int
    idxScan: Int
    idxTupFetch: Int
    nTupIns: Int
    nTupUpd: Int
    nTupDel: Int
    nTupHotUpd: Int
    nLiveTup: Int
    nDeadTup: Int
    nModSinceAnalyze: Int
    lastVacuum: Datetime
    lastAutovacuum: Datetime
    lastAnalyze: Datetime
    lastAutoanalyze: Datetime
    vacuumCount: Int
    autovacuumCount: Int
    analyzeCount: Int
    autoanalyzeCount: Int
  ): PgStatAllTablesConnection

  # Reads and enables paginatation through a set of \`PgStatArchiver\`.
  allPgStatArchivers(
    # The method to use when ordering \`PgStatArchiver\`.
    orderBy: PgStatArchiversOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    archivedCount: Int
    lastArchivedWal: String
    lastArchivedTime: Datetime
    failedCount: Int
    lastFailedWal: String
    lastFailedTime: Datetime
    statsReset: Datetime
  ): PgStatArchiversConnection

  # Reads and enables paginatation through a set of \`PgStatBgwriter\`.
  allPgStatBgwriters(
    # The method to use when ordering \`PgStatBgwriter\`.
    orderBy: PgStatBgwritersOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    checkpointsTimed: Int
    checkpointsReq: Int
    checkpointWriteTime: Float
    checkpointSyncTime: Float
    buffersCheckpoint: Int
    buffersClean: Int
    maxwrittenClean: Int
    buffersBackend: Int
    buffersBackendFsync: Int
    buffersAlloc: Int
    statsReset: Datetime
  ): PgStatBgwritersConnection

  # Reads and enables paginatation through a set of \`PgStatDatabase\`.
  allPgStatDatabases(
    # The method to use when ordering \`PgStatDatabase\`.
    orderBy: PgStatDatabasesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    datid: Float
    datname: String
    numbackends: Int
    xactCommit: Int
    xactRollback: Int
    blksRead: Int
    blksHit: Int
    tupReturned: Int
    tupFetched: Int
    tupInserted: Int
    tupUpdated: Int
    tupDeleted: Int
    conflicts: Int
    tempFiles: Int
    tempBytes: Int
    deadlocks: Int
    blkReadTime: Float
    blkWriteTime: Float
    statsReset: Datetime
  ): PgStatDatabasesConnection

  # Reads and enables paginatation through a set of \`PgStatDatabaseConflict\`.
  allPgStatDatabaseConflicts(
    # The method to use when ordering \`PgStatDatabaseConflict\`.
    orderBy: PgStatDatabaseConflictsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    datid: Float
    datname: String
    conflTablespace: Int
    conflLock: Int
    conflSnapshot: Int
    conflBufferpin: Int
    conflDeadlock: Int
  ): PgStatDatabaseConflictsConnection

  # Reads and enables paginatation through a set of \`PgStatReplication\`.
  allPgStatReplications(
    # The method to use when ordering \`PgStatReplication\`.
    orderBy: PgStatReplicationsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    pid: Int
    usesysid: Float
    usename: String
    applicationName: String
    clientAddr: String
    clientHostname: String
    clientPort: Int
    backendStart: Datetime
    backendXmin: String
    state: String
    sentLocation: String
    writeLocation: String
    flushLocation: String
    replayLocation: String
    syncPriority: Int
    syncState: String
  ): PgStatReplicationsConnection

  # Reads and enables paginatation through a set of \`PgStatSsl\`.
  allPgStatSsls(
    # The method to use when ordering \`PgStatSsl\`.
    orderBy: PgStatSslsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    pid: Int
    ssl: Boolean
    version: String
    cipher: String
    bits: Int
    compression: Boolean
    clientdn: String
  ): PgStatSslsConnection

  # Reads and enables paginatation through a set of \`PgStatSysIndex\`.
  allPgStatSysIndexes(
    # The method to use when ordering \`PgStatSysIndex\`.
    orderBy: PgStatSysIndexesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    relid: Float
    indexrelid: Float
    schemaname: String
    relname: String
    indexrelname: String
    idxScan: Int
    idxTupRead: Int
    idxTupFetch: Int
  ): PgStatSysIndexesConnection

  # Reads and enables paginatation through a set of \`PgStatSysTable\`.
  allPgStatSysTables(
    # The method to use when ordering \`PgStatSysTable\`.
    orderBy: PgStatSysTablesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    relid: Float
    schemaname: String
    relname: String
    seqScan: Int
    seqTupRead: Int
    idxScan: Int
    idxTupFetch: Int
    nTupIns: Int
    nTupUpd: Int
    nTupDel: Int
    nTupHotUpd: Int
    nLiveTup: Int
    nDeadTup: Int
    nModSinceAnalyze: Int
    lastVacuum: Datetime
    lastAutovacuum: Datetime
    lastAnalyze: Datetime
    lastAutoanalyze: Datetime
    vacuumCount: Int
    autovacuumCount: Int
    analyzeCount: Int
    autoanalyzeCount: Int
  ): PgStatSysTablesConnection

  # Reads and enables paginatation through a set of \`PgStatUserFunction\`.
  allPgStatUserFunctions(
    # The method to use when ordering \`PgStatUserFunction\`.
    orderBy: PgStatUserFunctionsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    funcid: Float
    schemaname: String
    funcname: String
    calls: Int
    totalTime: Float
    selfTime: Float
  ): PgStatUserFunctionsConnection

  # Reads and enables paginatation through a set of \`PgStatUserIndex\`.
  allPgStatUserIndexes(
    # The method to use when ordering \`PgStatUserIndex\`.
    orderBy: PgStatUserIndexesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    relid: Float
    indexrelid: Float
    schemaname: String
    relname: String
    indexrelname: String
    idxScan: Int
    idxTupRead: Int
    idxTupFetch: Int
  ): PgStatUserIndexesConnection

  # Reads and enables paginatation through a set of \`PgStatUserTable\`.
  allPgStatUserTables(
    # The method to use when ordering \`PgStatUserTable\`.
    orderBy: PgStatUserTablesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    relid: Float
    schemaname: String
    relname: String
    seqScan: Int
    seqTupRead: Int
    idxScan: Int
    idxTupFetch: Int
    nTupIns: Int
    nTupUpd: Int
    nTupDel: Int
    nTupHotUpd: Int
    nLiveTup: Int
    nDeadTup: Int
    nModSinceAnalyze: Int
    lastVacuum: Datetime
    lastAutovacuum: Datetime
    lastAnalyze: Datetime
    lastAutoanalyze: Datetime
    vacuumCount: Int
    autovacuumCount: Int
    analyzeCount: Int
    autoanalyzeCount: Int
  ): PgStatUserTablesConnection

  # Reads and enables paginatation through a set of \`PgStatXactAllTable\`.
  allPgStatXactAllTables(
    # The method to use when ordering \`PgStatXactAllTable\`.
    orderBy: PgStatXactAllTablesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    relid: Float
    schemaname: String
    relname: String
    seqScan: Int
    seqTupRead: Int
    idxScan: Int
    idxTupFetch: Int
    nTupIns: Int
    nTupUpd: Int
    nTupDel: Int
    nTupHotUpd: Int
  ): PgStatXactAllTablesConnection

  # Reads and enables paginatation through a set of \`PgStatXactSysTable\`.
  allPgStatXactSysTables(
    # The method to use when ordering \`PgStatXactSysTable\`.
    orderBy: PgStatXactSysTablesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    relid: Float
    schemaname: String
    relname: String
    seqScan: Int
    seqTupRead: Int
    idxScan: Int
    idxTupFetch: Int
    nTupIns: Int
    nTupUpd: Int
    nTupDel: Int
    nTupHotUpd: Int
  ): PgStatXactSysTablesConnection

  # Reads and enables paginatation through a set of \`PgStatXactUserFunction\`.
  allPgStatXactUserFunctions(
    # The method to use when ordering \`PgStatXactUserFunction\`.
    orderBy: PgStatXactUserFunctionsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    funcid: Float
    schemaname: String
    funcname: String
    calls: Int
    totalTime: Float
    selfTime: Float
  ): PgStatXactUserFunctionsConnection

  # Reads and enables paginatation through a set of \`PgStatXactUserTable\`.
  allPgStatXactUserTables(
    # The method to use when ordering \`PgStatXactUserTable\`.
    orderBy: PgStatXactUserTablesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    relid: Float
    schemaname: String
    relname: String
    seqScan: Int
    seqTupRead: Int
    idxScan: Int
    idxTupFetch: Int
    nTupIns: Int
    nTupUpd: Int
    nTupDel: Int
    nTupHotUpd: Int
  ): PgStatXactUserTablesConnection

  # Reads and enables paginatation through a set of \`PgStatioAllIndex\`.
  allPgStatioAllIndexes(
    # The method to use when ordering \`PgStatioAllIndex\`.
    orderBy: PgStatioAllIndexesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    relid: Float
    indexrelid: Float
    schemaname: String
    relname: String
    indexrelname: String
    idxBlksRead: Int
    idxBlksHit: Int
  ): PgStatioAllIndexesConnection

  # Reads and enables paginatation through a set of \`PgStatioAllSequence\`.
  allPgStatioAllSequences(
    # The method to use when ordering \`PgStatioAllSequence\`.
    orderBy: PgStatioAllSequencesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    relid: Float
    schemaname: String
    relname: String
    blksRead: Int
    blksHit: Int
  ): PgStatioAllSequencesConnection

  # Reads and enables paginatation through a set of \`PgStatioAllTable\`.
  allPgStatioAllTables(
    # The method to use when ordering \`PgStatioAllTable\`.
    orderBy: PgStatioAllTablesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    relid: Float
    schemaname: String
    relname: String
    heapBlksRead: Int
    heapBlksHit: Int
    idxBlksRead: Int
    idxBlksHit: Int
    toastBlksRead: Int
    toastBlksHit: Int
    tidxBlksRead: Int
    tidxBlksHit: Int
  ): PgStatioAllTablesConnection

  # Reads and enables paginatation through a set of \`PgStatioSysIndex\`.
  allPgStatioSysIndexes(
    # The method to use when ordering \`PgStatioSysIndex\`.
    orderBy: PgStatioSysIndexesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    relid: Float
    indexrelid: Float
    schemaname: String
    relname: String
    indexrelname: String
    idxBlksRead: Int
    idxBlksHit: Int
  ): PgStatioSysIndexesConnection

  # Reads and enables paginatation through a set of \`PgStatioSysSequence\`.
  allPgStatioSysSequences(
    # The method to use when ordering \`PgStatioSysSequence\`.
    orderBy: PgStatioSysSequencesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    relid: Float
    schemaname: String
    relname: String
    blksRead: Int
    blksHit: Int
  ): PgStatioSysSequencesConnection

  # Reads and enables paginatation through a set of \`PgStatioSysTable\`.
  allPgStatioSysTables(
    # The method to use when ordering \`PgStatioSysTable\`.
    orderBy: PgStatioSysTablesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    relid: Float
    schemaname: String
    relname: String
    heapBlksRead: Int
    heapBlksHit: Int
    idxBlksRead: Int
    idxBlksHit: Int
    toastBlksRead: Int
    toastBlksHit: Int
    tidxBlksRead: Int
    tidxBlksHit: Int
  ): PgStatioSysTablesConnection

  # Reads and enables paginatation through a set of \`PgStatioUserIndex\`.
  allPgStatioUserIndexes(
    # The method to use when ordering \`PgStatioUserIndex\`.
    orderBy: PgStatioUserIndexesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    relid: Float
    indexrelid: Float
    schemaname: String
    relname: String
    indexrelname: String
    idxBlksRead: Int
    idxBlksHit: Int
  ): PgStatioUserIndexesConnection

  # Reads and enables paginatation through a set of \`PgStatioUserSequence\`.
  allPgStatioUserSequences(
    # The method to use when ordering \`PgStatioUserSequence\`.
    orderBy: PgStatioUserSequencesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    relid: Float
    schemaname: String
    relname: String
    blksRead: Int
    blksHit: Int
  ): PgStatioUserSequencesConnection

  # Reads and enables paginatation through a set of \`PgStatioUserTable\`.
  allPgStatioUserTables(
    # The method to use when ordering \`PgStatioUserTable\`.
    orderBy: PgStatioUserTablesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    relid: Float
    schemaname: String
    relname: String
    heapBlksRead: Int
    heapBlksHit: Int
    idxBlksRead: Int
    idxBlksHit: Int
    toastBlksRead: Int
    toastBlksHit: Int
    tidxBlksRead: Int
    tidxBlksHit: Int
  ): PgStatioUserTablesConnection

  # Reads and enables paginatation through a set of \`PgStatistic\`.
  allPgStatistics(
    # The method to use when ordering \`PgStatistic\`.
    orderBy: PgStatisticsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    starelid: Float
    staattnum: Int
    stainherit: Boolean
    stanullfrac: Float
    stawidth: Int
    stadistinct: Float
    stakind1: Int
    stakind2: Int
    stakind3: Int
    stakind4: Int
    stakind5: Int
    staop1: Float
    staop2: Float
    staop3: Float
    staop4: Float
    staop5: Float
    stanumbers1: [Float]
    stanumbers2: [Float]
    stanumbers3: [Float]
    stanumbers4: [Float]
    stanumbers5: [Float]
    stavalues1: String
    stavalues2: String
    stavalues3: String
    stavalues4: String
    stavalues5: String
  ): PgStatisticsConnection

  # Reads and enables paginatation through a set of \`PgStat\`.
  allPgStats(
    # The method to use when ordering \`PgStat\`.
    orderBy: PgStatsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    schemaname: String
    tablename: String
    attname: String
    inherited: Boolean
    nullFrac: Float
    avgWidth: Int
    nDistinct: Float
    mostCommonVals: String
    mostCommonFreqs: [Float]
    histogramBounds: String
    correlation: Float
    mostCommonElems: String
    mostCommonElemFreqs: [Float]
    elemCountHistogram: [Float]
  ): PgStatsConnection

  # Reads and enables paginatation through a set of \`PgTable\`.
  allPgTables(
    # The method to use when ordering \`PgTable\`.
    orderBy: PgTablesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    schemaname: String
    tablename: String
    tableowner: String
    tablespace: String
    hasindexes: Boolean
    hasrules: Boolean
    hastriggers: Boolean
    rowsecurity: Boolean
  ): PgTablesConnection

  # Reads and enables paginatation through a set of \`PgTablespace\`.
  allPgTablespaces(
    # The method to use when ordering \`PgTablespace\`.
    orderBy: PgTablespacesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    spcname: String
    spcowner: Float
    spcacl: [String]
    spcoptions: [String]
  ): PgTablespacesConnection

  # Reads and enables paginatation through a set of \`PgTimezoneAbbrev\`.
  allPgTimezoneAbbrevs(
    # The method to use when ordering \`PgTimezoneAbbrev\`.
    orderBy: PgTimezoneAbbrevsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    abbrev: String
    utcOffset: IntervalInput
    isDst: Boolean
  ): PgTimezoneAbbrevsConnection

  # Reads and enables paginatation through a set of \`PgTimezoneName\`.
  allPgTimezoneNames(
    # The method to use when ordering \`PgTimezoneName\`.
    orderBy: PgTimezoneNamesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    name: String
    abbrev: String
    utcOffset: IntervalInput
    isDst: Boolean
  ): PgTimezoneNamesConnection

  # Reads and enables paginatation through a set of \`PgTransform\`.
  allPgTransforms(
    # The method to use when ordering \`PgTransform\`.
    orderBy: PgTransformsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    trftype: Float
    trflang: Float
    trffromsql: Float
    trftosql: Float
  ): PgTransformsConnection

  # Reads and enables paginatation through a set of \`PgTrigger\`.
  allPgTriggers(
    # The method to use when ordering \`PgTrigger\`.
    orderBy: PgTriggersOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    tgrelid: Float
    tgname: String
    tgfoid: Float
    tgtype: Int
    tgenabled: String
    tgisinternal: Boolean
    tgconstrrelid: Float
    tgconstrindid: Float
    tgconstraint: Float
    tgdeferrable: Boolean
    tginitdeferred: Boolean
    tgnargs: Int
    tgattr: [Int]
    tgargs: String
    tgqual: String
  ): PgTriggersConnection

  # Reads and enables paginatation through a set of \`PgTsConfig\`.
  allPgTsConfigs(
    # The method to use when ordering \`PgTsConfig\`.
    orderBy: PgTsConfigsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    cfgname: String
    cfgnamespace: Float
    cfgowner: Float
    cfgparser: Float
  ): PgTsConfigsConnection

  # Reads and enables paginatation through a set of \`PgTsConfigMap\`.
  allPgTsConfigMaps(
    # The method to use when ordering \`PgTsConfigMap\`.
    orderBy: PgTsConfigMapsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    mapcfg: Float
    maptokentype: Int
    mapseqno: Int
    mapdict: Float
  ): PgTsConfigMapsConnection

  # Reads and enables paginatation through a set of \`PgTsDict\`.
  allPgTsDicts(
    # The method to use when ordering \`PgTsDict\`.
    orderBy: PgTsDictsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    dictname: String
    dictnamespace: Float
    dictowner: Float
    dicttemplate: Float
    dictinitoption: String
  ): PgTsDictsConnection

  # Reads and enables paginatation through a set of \`PgTsParser\`.
  allPgTsParsers(
    # The method to use when ordering \`PgTsParser\`.
    orderBy: PgTsParsersOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    prsname: String
    prsnamespace: Float
    prsstart: Float
    prstoken: Float
    prsend: Float
    prsheadline: Float
    prslextype: Float
  ): PgTsParsersConnection

  # Reads and enables paginatation through a set of \`PgTsTemplate\`.
  allPgTsTemplates(
    # The method to use when ordering \`PgTsTemplate\`.
    orderBy: PgTsTemplatesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    tmplname: String
    tmplnamespace: Float
    tmplinit: Float
    tmpllexize: Float
  ): PgTsTemplatesConnection

  # Reads and enables paginatation through a set of \`PgType\`.
  allPgTypes(
    # The method to use when ordering \`PgType\`.
    orderBy: PgTypesOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    typname: String
    typnamespace: Float
    typowner: Float
    typlen: Int
    typbyval: Boolean
    typtype: String
    typcategory: String
    typispreferred: Boolean
    typisdefined: Boolean
    typdelim: String
    typrelid: Float
    typelem: Float
    typarray: Float
    typinput: Float
    typoutput: Float
    typreceive: Float
    typsend: Float
    typmodin: Float
    typmodout: Float
    typanalyze: Float
    typalign: String
    typstorage: String
    typnotnull: Boolean
    typbasetype: Float
    typtypmod: Int
    typndims: Int
    typcollation: Float
    typdefaultbin: String
    typdefault: String
    typacl: [String]
  ): PgTypesConnection

  # Reads and enables paginatation through a set of \`PgUser\`.
  allPgUsers(
    # The method to use when ordering \`PgUser\`.
    orderBy: PgUsersOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    usename: String
    usesysid: Float
    usecreatedb: Boolean
    usesuper: Boolean
    userepl: Boolean
    usebypassrls: Boolean
    passwd: String
    valuntil: String
    useconfig: [String]
  ): PgUsersConnection

  # Reads and enables paginatation through a set of \`PgUserMapping\`.
  allPgUserMapping(
    # The method to use when ordering \`PgUserMapping\`.
    orderBy: PgUserMappingOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    umuser: Float
    umserver: Float
    umoptions: [String]
  ): PgUserMappingConnection

  # Reads and enables paginatation through a set of \`PgUserMappings\`.
  allPgUserMappings(
    # The method to use when ordering \`PgUserMappings\`.
    orderBy: PgUserMappingsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    umid: Float
    srvid: Float
    srvname: String
    umuser: Float
    usename: String
    umoptions: [String]
  ): PgUserMappingsConnection

  # Reads and enables paginatation through a set of \`PgView\`.
  allPgViews(
    # The method to use when ordering \`PgView\`.
    orderBy: PgViewsOrderBy = NATURAL

    # Read all values in the set before (above) this cursor.
    before: Cursor

    # Read all values in the set after (below) this cursor.
    after: Cursor

    # Only read the first \`n\` values of the set.
    first: Int

    # Only read the last \`n\` values of the set.
    last: Int
    schemaname: String
    viewname: String
    viewowner: String
    definition: String
  ): PgViewsConnection

  # Exposes the root query type nested one level down. This is helpful for Relay 1
  # which can only query top level fields if they are in a particular form.
  query: Query!
}

input RandomInput {
  clientMutationId: String
}

type RandomPayload {
  clientMutationId: String
  float: Float
  query: Query
}

input RiFKeyCascadeDelInput {
  clientMutationId: String
}

type RiFKeyCascadeDelPayload {
  clientMutationId: String
  string: String
  query: Query
}

input RiFKeyCascadeUpdInput {
  clientMutationId: String
}

type RiFKeyCascadeUpdPayload {
  clientMutationId: String
  string: String
  query: Query
}

input RiFKeyCheckInsInput {
  clientMutationId: String
}

type RiFKeyCheckInsPayload {
  clientMutationId: String
  string: String
  query: Query
}

input RiFKeyCheckUpdInput {
  clientMutationId: String
}

type RiFKeyCheckUpdPayload {
  clientMutationId: String
  string: String
  query: Query
}

input RiFKeyNoactionDelInput {
  clientMutationId: String
}

type RiFKeyNoactionDelPayload {
  clientMutationId: String
  string: String
  query: Query
}

input RiFKeyNoactionUpdInput {
  clientMutationId: String
}

type RiFKeyNoactionUpdPayload {
  clientMutationId: String
  string: String
  query: Query
}

input RiFKeyRestrictDelInput {
  clientMutationId: String
}

type RiFKeyRestrictDelPayload {
  clientMutationId: String
  string: String
  query: Query
}

input RiFKeyRestrictUpdInput {
  clientMutationId: String
}

type RiFKeyRestrictUpdPayload {
  clientMutationId: String
  string: String
  query: Query
}

input RiFKeySetdefaultDelInput {
  clientMutationId: String
}

type RiFKeySetdefaultDelPayload {
  clientMutationId: String
  string: String
  query: Query
}

input RiFKeySetdefaultUpdInput {
  clientMutationId: String
}

type RiFKeySetdefaultUpdPayload {
  clientMutationId: String
  string: String
  query: Query
}

input RiFKeySetnullDelInput {
  clientMutationId: String
}

type RiFKeySetnullDelPayload {
  clientMutationId: String
  string: String
  query: Query
}

input RiFKeySetnullUpdInput {
  clientMutationId: String
}

type RiFKeySetnullUpdPayload {
  clientMutationId: String
  string: String
  query: Query
}

input SetConfigInput {
  clientMutationId: String
  arg0: String
  arg1: String
  arg2: Boolean
}

type SetConfigPayload {
  clientMutationId: String
  string: String
  query: Query
}

input SetseedInput {
  clientMutationId: String
  arg0: Float!
}

type SetseedPayload {
  clientMutationId: String
  string: String
  query: Query
}

input ShiftJis2004ToEucJis2004Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type ShiftJis2004ToEucJis2004Payload {
  clientMutationId: String
  string: String
  query: Query
}

input ShiftJis2004ToUtf8Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type ShiftJis2004ToUtf8Payload {
  clientMutationId: String
  string: String
  query: Query
}

input SjisToEucJpInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type SjisToEucJpPayload {
  clientMutationId: String
  string: String
  query: Query
}

input SjisToMicInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type SjisToMicPayload {
  clientMutationId: String
  string: String
  query: Query
}

input SjisToUtf8Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type SjisToUtf8Payload {
  clientMutationId: String
  string: String
  query: Query
}

input SpgbeginscanInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
}

type SpgbeginscanPayload {
  clientMutationId: String
  string: String
  query: Query
}

input SpgbuildemptyInput {
  clientMutationId: String
  arg0: String!
}

type SpgbuildemptyPayload {
  clientMutationId: String
  string: String
  query: Query
}

input SpgbuildInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
}

type SpgbuildPayload {
  clientMutationId: String
  string: String
  query: Query
}

input SpgbulkdeleteInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
  arg3: String!
}

type SpgbulkdeletePayload {
  clientMutationId: String
  string: String
  query: Query
}

input SpgcostestimateInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
  arg3: String!
  arg4: String!
  arg5: String!
  arg6: String!
}

type SpgcostestimatePayload {
  clientMutationId: String
  string: String
  query: Query
}

input SpgendscanInput {
  clientMutationId: String
  arg0: String!
}

type SpgendscanPayload {
  clientMutationId: String
  string: String
  query: Query
}

input SpggetbitmapInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
}

type SpggetbitmapPayload {
  clientMutationId: String
  integer: Int
  query: Query
}

input SpggettupleInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
}

type SpggettuplePayload {
  clientMutationId: String
  boolean: Boolean
  query: Query
}

input SpginsertInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
  arg3: String!
  arg4: String!
  arg5: String!
}

type SpginsertPayload {
  clientMutationId: String
  boolean: Boolean
  query: Query
}

input SpgmarkposInput {
  clientMutationId: String
  arg0: String!
}

type SpgmarkposPayload {
  clientMutationId: String
  string: String
  query: Query
}

input SpgrescanInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
  arg2: String!
  arg3: String!
  arg4: String!
}

type SpgrescanPayload {
  clientMutationId: String
  string: String
  query: Query
}

input SpgrestrposInput {
  clientMutationId: String
  arg0: String!
}

type SpgrestrposPayload {
  clientMutationId: String
  string: String
  query: Query
}

input SpgvacuumcleanupInput {
  clientMutationId: String
  arg0: String!
  arg1: String!
}

type SpgvacuumcleanupPayload {
  clientMutationId: String
  string: String
  query: Query
}

input SuppressRedundantUpdatesTriggerInput {
  clientMutationId: String
}

type SuppressRedundantUpdatesTriggerPayload {
  clientMutationId: String
  string: String
  query: Query
}

input SystemInput {
  clientMutationId: String
  arg0: String!
}

type SystemPayload {
  clientMutationId: String
  string: String
  query: Query
}

# The exact time of day, does not include the date. May or may not have a timezone offset.
scalar Time

input TimeofdayInput {
  clientMutationId: String
}

type TimeofdayPayload {
  clientMutationId: String
  string: String
  query: Query
}

input TsvectorUpdateTriggerColumnInput {
  clientMutationId: String
}

type TsvectorUpdateTriggerColumnPayload {
  clientMutationId: String
  string: String
  query: Query
}

input TsvectorUpdateTriggerInput {
  clientMutationId: String
}

type TsvectorUpdateTriggerPayload {
  clientMutationId: String
  string: String
  query: Query
}

# A connection to a list of \`Int\` values.
type TxidSnapshotXipConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`Int\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`Int\` and cursor to aid in pagination.
  edges: [TxidSnapshotXipEdge]

  # A list of \`Int\` objects.
  nodes: [Int]
}

# A \`Int\` edge in the connection.
type TxidSnapshotXipEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`Int\` at the end of the edge.
  node: Int
}

# Methods to use when ordering \`Int\`.
enum TxidSnapshotXipOrderBy {
  NATURAL
}

input UhcToUtf8Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type UhcToUtf8Payload {
  clientMutationId: String
  string: String
  query: Query
}

input UniqueKeyRecheckInput {
  clientMutationId: String
}

type UniqueKeyRecheckPayload {
  clientMutationId: String
  string: String
  query: Query
}

# A connection to a list of \`String\` values.
type UnnestConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # The count of *all* \`String\` you could get from the connection.
  totalCount: Int

  # A list of edges which contains the \`String\` and cursor to aid in pagination.
  edges: [UnnestEdge]

  # A list of \`String\` objects.
  nodes: [String]
}

# A \`String\` edge in the connection.
type UnnestEdge {
  # A cursor for use in pagination.
  cursor: Cursor

  # The \`String\` at the end of the edge.
  node: String
}

# Methods to use when ordering \`String\`.
enum UnnestOrderBy {
  NATURAL
}

input Utf8ToAsciiInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Utf8ToAsciiPayload {
  clientMutationId: String
  string: String
  query: Query
}

input Utf8ToBig5Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Utf8ToBig5Payload {
  clientMutationId: String
  string: String
  query: Query
}

input Utf8ToEucCnInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Utf8ToEucCnPayload {
  clientMutationId: String
  string: String
  query: Query
}

input Utf8ToEucJis2004Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Utf8ToEucJis2004Payload {
  clientMutationId: String
  string: String
  query: Query
}

input Utf8ToEucJpInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Utf8ToEucJpPayload {
  clientMutationId: String
  string: String
  query: Query
}

input Utf8ToEucKrInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Utf8ToEucKrPayload {
  clientMutationId: String
  string: String
  query: Query
}

input Utf8ToEucTwInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Utf8ToEucTwPayload {
  clientMutationId: String
  string: String
  query: Query
}

input Utf8ToGb18030Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Utf8ToGb18030Payload {
  clientMutationId: String
  string: String
  query: Query
}

input Utf8ToGbkInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Utf8ToGbkPayload {
  clientMutationId: String
  string: String
  query: Query
}

input Utf8ToIso88591Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Utf8ToIso88591Payload {
  clientMutationId: String
  string: String
  query: Query
}

input Utf8ToIso8859Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Utf8ToIso8859Payload {
  clientMutationId: String
  string: String
  query: Query
}

input Utf8ToJohabInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Utf8ToJohabPayload {
  clientMutationId: String
  string: String
  query: Query
}

input Utf8ToKoi8rInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Utf8ToKoi8rPayload {
  clientMutationId: String
  string: String
  query: Query
}

input Utf8ToKoi8uInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Utf8ToKoi8uPayload {
  clientMutationId: String
  string: String
  query: Query
}

input Utf8ToShiftJis2004Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Utf8ToShiftJis2004Payload {
  clientMutationId: String
  string: String
  query: Query
}

input Utf8ToSjisInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Utf8ToSjisPayload {
  clientMutationId: String
  string: String
  query: Query
}

input Utf8ToUhcInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Utf8ToUhcPayload {
  clientMutationId: String
  string: String
  query: Query
}

input Utf8ToWinInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Utf8ToWinPayload {
  clientMutationId: String
  string: String
  query: Query
}

# A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
scalar Uuid

input Win1250ToLatin2Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Win1250ToLatin2Payload {
  clientMutationId: String
  string: String
  query: Query
}

input Win1250ToMicInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Win1250ToMicPayload {
  clientMutationId: String
  string: String
  query: Query
}

input Win1251ToIsoInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Win1251ToIsoPayload {
  clientMutationId: String
  string: String
  query: Query
}

input Win1251ToKoi8rInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Win1251ToKoi8rPayload {
  clientMutationId: String
  string: String
  query: Query
}

input Win1251ToMicInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Win1251ToMicPayload {
  clientMutationId: String
  string: String
  query: Query
}

input Win1251ToWin866Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Win1251ToWin866Payload {
  clientMutationId: String
  string: String
  query: Query
}

input Win866ToIsoInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Win866ToIsoPayload {
  clientMutationId: String
  string: String
  query: Query
}

input Win866ToKoi8rInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Win866ToKoi8rPayload {
  clientMutationId: String
  string: String
  query: Query
}

input Win866ToMicInput {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Win866ToMicPayload {
  clientMutationId: String
  string: String
  query: Query
}

input Win866ToWin1251Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type Win866ToWin1251Payload {
  clientMutationId: String
  string: String
  query: Query
}

input WinToUtf8Input {
  clientMutationId: String
  arg0: Int!
  arg1: Int!
  arg2: String!
  arg3: String!
  arg4: Int!
}

type WinToUtf8Payload {
  clientMutationId: String
  string: String
  query: Query
}
"
`;
