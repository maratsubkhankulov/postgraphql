exports[`test query node.graphql 1`] = `
Object {
  "data": Object {
    "a": Object {
      "nodes": Array [
        Object {
          "__id": "WyJwZW9wbGUiLDFd",
          "__typename": "Person",
          "id": 1,
          "name": "John Smith"
        },
        Object {
          "__id": "WyJwZW9wbGUiLDJd",
          "__typename": "Person",
          "id": 2,
          "name": "Sara Smith"
        },
        Object {
          "__id": "WyJwZW9wbGUiLDNd",
          "__typename": "Person",
          "id": 3,
          "name": "Budd Deey"
        },
        Object {
          "__id": "WyJwZW9wbGUiLDRd",
          "__typename": "Person",
          "id": 4,
          "name": "Kathryn Ramirez"
        },
        Object {
          "__id": "WyJwZW9wbGUiLDVd",
          "__typename": "Person",
          "id": 5,
          "name": "Johnny Tucker"
        }
      ]
    },
    "b": Object {
      "nodes": Array [
        Object {
          "__id": "WyJjb21wb3VuZF9rZXlzIiwxLDJd",
          "__typename": "CompoundKey",
          "personId1": 1,
          "personId2": 2
        },
        Object {
          "__id": "WyJjb21wb3VuZF9rZXlzIiwyLDFd",
          "__typename": "CompoundKey",
          "personId1": 2,
          "personId2": 1
        },
        Object {
          "__id": "WyJjb21wb3VuZF9rZXlzIiwyLDNd",
          "__typename": "CompoundKey",
          "personId1": 2,
          "personId2": 3
        },
        Object {
          "__id": "WyJjb21wb3VuZF9rZXlzIiwyLDVd",
          "__typename": "CompoundKey",
          "personId1": 2,
          "personId2": 5
        },
        Object {
          "__id": "WyJjb21wb3VuZF9rZXlzIiw0LDNd",
          "__typename": "CompoundKey",
          "personId1": 4,
          "personId2": 3
        },
        Object {
          "__id": "WyJjb21wb3VuZF9rZXlzIiw0LDRd",
          "__typename": "CompoundKey",
          "personId1": 4,
          "personId2": 4
        }
      ]
    },
    "c": Object {
      "__id": "WyJjb21wb3VuZF9rZXlzIiwyLDNd",
      "__typename": "CompoundKey",
      "personId1": 2,
      "personId2": 3
    },
    "d": Object {
      "__id": "WyJwZW9wbGUiLDJd",
      "__typename": "Person",
      "id": 2,
      "name": "Sara Smith"
    },
    "e": Object {
      "__id": "WyJjb21wb3VuZF9rZXlzIiwxLDJd",
      "__typename": "CompoundKey",
      "personId1": 1,
      "personId2": 2
    },
    "f": Object {
      "__id": "WyJwZW9wbGUiLDVd",
      "__typename": "Person",
      "id": 5,
      "name": "Johnny Tucker"
    },
    "g": null,
    "h": null,
    "i": Object {
      "__id": "WyJwZW9wbGUiLDJd",
      "__typename": "Person",
      "id": 2,
      "name": "Sara Smith"
    },
    "j": Object {
      "__id": "WyJwZW9wbGUiLDVd",
      "__typename": "Person",
      "id": 5,
      "name": "Johnny Tucker"
    },
    "k": null,
    "l": Object {
      "__id": "WyJjb21wb3VuZF9rZXlzIiwyLDNd",
      "__typename": "CompoundKey",
      "personId1": 2,
      "personId2": 3
    },
    "m": Object {
      "__id": "WyJjb21wb3VuZF9rZXlzIiwxLDJd",
      "__typename": "CompoundKey",
      "personId1": 1,
      "personId2": 2
    },
    "n": null
  }
}
`;

exports[`test query relation-tail-head.graphql 1`] = `
Object {
  "data": Object {
    "allCompoundKeys": Object {
      "nodes": Array [
        Object {
          "extra": null,
          "personByPersonId1": Object {
            "createdAt": null,
            "email": "john.smith@email.com",
            "name": "John Smith"
          },
          "personByPersonId2": Object {
            "createdAt": null,
            "email": "sara.smith@email.com",
            "name": "Sara Smith"
          },
          "personId1": 1,
          "personId2": 2
        },
        Object {
          "extra": false,
          "personByPersonId1": Object {
            "createdAt": null,
            "email": "sara.smith@email.com",
            "name": "Sara Smith"
          },
          "personByPersonId2": Object {
            "createdAt": null,
            "email": "john.smith@email.com",
            "name": "John Smith"
          },
          "personId1": 2,
          "personId2": 1
        },
        Object {
          "extra": null,
          "personByPersonId1": Object {
            "createdAt": null,
            "email": "sara.smith@email.com",
            "name": "Sara Smith"
          },
          "personByPersonId2": Object {
            "createdAt": null,
            "email": "budd.deey@email.com",
            "name": "Budd Deey"
          },
          "personId1": 2,
          "personId2": 3
        },
        Object {
          "extra": true,
          "personByPersonId1": Object {
            "createdAt": null,
            "email": "sara.smith@email.com",
            "name": "Sara Smith"
          },
          "personByPersonId2": Object {
            "createdAt": null,
            "email": "johnny.tucker@email.com",
            "name": "Johnny Tucker"
          },
          "personId1": 2,
          "personId2": 5
        },
        Object {
          "extra": true,
          "personByPersonId1": Object {
            "createdAt": null,
            "email": "kathryn.ramirez@email.com",
            "name": "Kathryn Ramirez"
          },
          "personByPersonId2": Object {
            "createdAt": null,
            "email": "budd.deey@email.com",
            "name": "Budd Deey"
          },
          "personId1": 4,
          "personId2": 3
        },
        Object {
          "extra": false,
          "personByPersonId1": Object {
            "createdAt": null,
            "email": "kathryn.ramirez@email.com",
            "name": "Kathryn Ramirez"
          },
          "personByPersonId2": Object {
            "createdAt": null,
            "email": "kathryn.ramirez@email.com",
            "name": "Kathryn Ramirez"
          },
          "personId1": 4,
          "personId2": 4
        }
      ]
    }
  }
}
`;

exports[`test query types.graphql 1`] = `
Object {
  "data": Object {
    "allTypes": Object {
      "nodes": Array [
        Object {
          "bigint": 200,
          "boolean": true,
          "compoundType": Object {
            "a": 1,
            "b": "2",
            "c": "BLUE",
            "d": "4be8a712-3ff7-432e-aa34-fdb43fbd838d",
            "fooBar": 8
          },
          "domain": 5,
          "domain2": 6,
          "enum": "GREEN",
          "nestedCompoundType": Object {
            "a": Object {
              "a": 3,
              "b": "456",
              "c": "RED",
              "d": "aed18400-2a92-46df-8204-b70c728b3520",
              "fooBar": 93
            },
            "b": Object {
              "a": 42,
              "b": "Hello, world!",
              "c": "BLUE",
              "d": "d34df5e0-83f1-11e6-8dd0-abee917ffd1e",
              "fooBar": -5
            },
            "bazBuz": 7
          }
        }
      ]
    }
  }
}
`;

exports[`test schema 1`] = `
"scalar AnInt

scalar AnotherInt

enum Color {
  RED
  GREEN
  BLUE
}

type CompoundKey implements Node {
  __id: ID!
  personId2: Int!
  personId1: Int!
  extra: Boolean
  personByPersonId1: Person
  personByPersonId2: Person
}

type CompoundKeysConnection {
  pageInfo: PageInfo!
  totalCount: Int
  edges: [CompoundKeysEdge]
  nodes: [CompoundKey!]
}

type CompoundKeysEdge {
  cursor: Cursor!
  node: CompoundKey!
}

enum CompoundKeysOrderBy {
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  NATURAL
  PERSON_ID_2_ASC
  PERSON_ID_2_DESC
  PERSON_ID_1_ASC
  PERSON_ID_1_DESC
  EXTRA_ASC
  EXTRA_DESC
}

# Awesome feature!
type CompoundType {
  a: Int
  b: String
  c: Color
  d: Uuid
  fooBar: Int
}

scalar Cursor

scalar Email

type NestedCompoundType {
  a: CompoundType
  b: CompoundType
  bazBuz: Int
}

interface Node {
  __id: ID!
}

type NonUpdatableView {
  column: Int
}

type NonUpdatableViewsConnection {
  pageInfo: PageInfo!
  totalCount: Int
  edges: [NonUpdatableViewsEdge]
  nodes: [NonUpdatableView!]
}

type NonUpdatableViewsEdge {
  cursor: Cursor!
  node: NonUpdatableView!
}

enum NonUpdatableViewsOrderBy {
  NATURAL
  COLUMN_ASC
  COLUMN_DESC
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

type PeopleConnection {
  pageInfo: PageInfo!
  totalCount: Int
  edges: [PeopleEdge]
  nodes: [Person!]
}

type PeopleEdge {
  cursor: Cursor!
  node: Person!
}

enum PeopleOrderBy {
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  ABOUT_ASC
  ABOUT_DESC
  EMAIL_ASC
  EMAIL_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
}

# Person test comment
type Person implements Node {
  __id: ID!
  id: Int!

  # The personâ€™s name
  name: String!
  about: String
  email: Email
  createdAt: String
}

type Post implements Node {
  __id: ID!
  id: Int!
  headline: String!
  body: String
  authorId: Int
  personByAuthorId: Person
}

type PostsConnection {
  pageInfo: PageInfo!
  totalCount: Int
  edges: [PostsEdge]
  nodes: [Post!]
}

type PostsEdge {
  cursor: Cursor!
  node: Post!
}

enum PostsOrderBy {
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  NATURAL
  ID_ASC
  ID_DESC
  HEADLINE_ASC
  HEADLINE_DESC
  BODY_ASC
  BODY_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
}

type Query {
  node(__id: ID!): Node
  allNonUpdatableViews(orderBy: NonUpdatableViewsOrderBy = NATURAL, before: Cursor, after: Cursor, first: Int, last: Int): NonUpdatableViewsConnection
  allPosts(orderBy: PostsOrderBy = PRIMARY_KEY_ASC, before: Cursor, after: Cursor, first: Int, last: Int): PostsConnection
  post(__id: ID!): Post
  postById(id: Int!): Post
  allTypes(orderBy: TypesOrderBy = PRIMARY_KEY_ASC, before: Cursor, after: Cursor, first: Int, last: Int): TypesConnection
  types(__id: ID!): Types
  typesById(id: Int!): Types
  allUpdatableViews(orderBy: UpdatableViewsOrderBy = NATURAL, before: Cursor, after: Cursor, first: Int, last: Int): UpdatableViewsConnection
  allCompoundKeys(orderBy: CompoundKeysOrderBy = PRIMARY_KEY_ASC, before: Cursor, after: Cursor, first: Int, last: Int): CompoundKeysConnection
  compoundKey(__id: ID!): CompoundKey
  compoundKeyByPersonId1AndPersonId2(personId1: Int!, personId2: Int!): CompoundKey
  allPeople(orderBy: PeopleOrderBy = PRIMARY_KEY_ASC, before: Cursor, after: Cursor, first: Int, last: Int): PeopleConnection
  person(__id: ID!): Person
  personByEmail(email: Email): Person
  personById(id: Int!): Person
}

type Types implements Node {
  __id: ID!
  id: Int!
  bigint: Int
  boolean: Boolean
  varchar: String
  enum: Color
  domain: AnInt
  domain2: AnotherInt
  compoundType: CompoundType
  nestedCompoundType: NestedCompoundType
}

type TypesConnection {
  pageInfo: PageInfo!
  totalCount: Int
  edges: [TypesEdge]
  nodes: [Types!]
}

type TypesEdge {
  cursor: Cursor!
  node: Types!
}

enum TypesOrderBy {
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  NATURAL
  ID_ASC
  ID_DESC
  BIGINT_ASC
  BIGINT_DESC
  BOOLEAN_ASC
  BOOLEAN_DESC
  VARCHAR_ASC
  VARCHAR_DESC
  ENUM_ASC
  ENUM_DESC
  DOMAIN_ASC
  DOMAIN_DESC
  DOMAIN2_ASC
  DOMAIN2_DESC
  COMPOUND_TYPE_ASC
  COMPOUND_TYPE_DESC
  NESTED_COMPOUND_TYPE_ASC
  NESTED_COMPOUND_TYPE_DESC
}

# YOYOYO!!
type UpdatableView {
  x: Int
  name: String
  description: String

  # This is constantly 2
  constant: Int
}

type UpdatableViewsConnection {
  pageInfo: PageInfo!
  totalCount: Int
  edges: [UpdatableViewsEdge]
  nodes: [UpdatableView!]
}

type UpdatableViewsEdge {
  cursor: Cursor!
  node: UpdatableView!
}

enum UpdatableViewsOrderBy {
  NATURAL
  X_ASC
  X_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  CONSTANT_ASC
  CONSTANT_DESC
}

# A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
scalar Uuid
"
`;

exports[`test schema 2`] = `
"scalar AnInt

scalar AnotherInt

enum Color {
  RED
  GREEN
  BLUE
}

type CompoundKey implements Node {
  id: ID!
  personId2: Int!
  personId1: Int!
  extra: Boolean
  personByPersonId1: Person
  personByPersonId2: Person
}

type CompoundKeysConnection {
  pageInfo: PageInfo!
  totalCount: Int
  edges: [CompoundKeysEdge]
  nodes: [CompoundKey!]
}

type CompoundKeysEdge {
  cursor: Cursor!
  node: CompoundKey!
}

enum CompoundKeysOrderBy {
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  NATURAL
  PERSON_ID_2_ASC
  PERSON_ID_2_DESC
  PERSON_ID_1_ASC
  PERSON_ID_1_DESC
  EXTRA_ASC
  EXTRA_DESC
}

# Awesome feature!
type CompoundType {
  a: Int
  b: String
  c: Color
  d: Uuid
  fooBar: Int
}

scalar Cursor

scalar Email

type NestedCompoundType {
  a: CompoundType
  b: CompoundType
  bazBuz: Int
}

interface Node {
  id: ID!
}

type NonUpdatableView {
  column: Int
}

type NonUpdatableViewsConnection {
  pageInfo: PageInfo!
  totalCount: Int
  edges: [NonUpdatableViewsEdge]
  nodes: [NonUpdatableView!]
}

type NonUpdatableViewsEdge {
  cursor: Cursor!
  node: NonUpdatableView!
}

enum NonUpdatableViewsOrderBy {
  NATURAL
  COLUMN_ASC
  COLUMN_DESC
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

type PeopleConnection {
  pageInfo: PageInfo!
  totalCount: Int
  edges: [PeopleEdge]
  nodes: [Person!]
}

type PeopleEdge {
  cursor: Cursor!
  node: Person!
}

enum PeopleOrderBy {
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  ABOUT_ASC
  ABOUT_DESC
  EMAIL_ASC
  EMAIL_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
}

# Person test comment
type Person implements Node {
  id: ID!
  rowId: Int!

  # The personâ€™s name
  name: String!
  about: String
  email: Email
  createdAt: String
}

type Post implements Node {
  id: ID!
  rowId: Int!
  headline: String!
  body: String
  authorId: Int
  personByAuthorId: Person
}

type PostsConnection {
  pageInfo: PageInfo!
  totalCount: Int
  edges: [PostsEdge]
  nodes: [Post!]
}

type PostsEdge {
  cursor: Cursor!
  node: Post!
}

enum PostsOrderBy {
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  NATURAL
  ID_ASC
  ID_DESC
  HEADLINE_ASC
  HEADLINE_DESC
  BODY_ASC
  BODY_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
}

type Query {
  node(id: ID!): Node
  allNonUpdatableViews(orderBy: NonUpdatableViewsOrderBy = NATURAL, before: Cursor, after: Cursor, first: Int, last: Int): NonUpdatableViewsConnection
  allPosts(orderBy: PostsOrderBy = PRIMARY_KEY_ASC, before: Cursor, after: Cursor, first: Int, last: Int): PostsConnection
  post(id: ID!): Post
  postByRowId(rowId: Int!): Post
  allTypes(orderBy: TypesOrderBy = PRIMARY_KEY_ASC, before: Cursor, after: Cursor, first: Int, last: Int): TypesConnection
  types(id: ID!): Types
  typesByRowId(rowId: Int!): Types
  allUpdatableViews(orderBy: UpdatableViewsOrderBy = NATURAL, before: Cursor, after: Cursor, first: Int, last: Int): UpdatableViewsConnection
  allCompoundKeys(orderBy: CompoundKeysOrderBy = PRIMARY_KEY_ASC, before: Cursor, after: Cursor, first: Int, last: Int): CompoundKeysConnection
  compoundKey(id: ID!): CompoundKey
  compoundKeyByPersonId1AndPersonId2(personId1: Int!, personId2: Int!): CompoundKey
  allPeople(orderBy: PeopleOrderBy = PRIMARY_KEY_ASC, before: Cursor, after: Cursor, first: Int, last: Int): PeopleConnection
  person(id: ID!): Person
  personByEmail(email: Email): Person
  personByRowId(rowId: Int!): Person
}

type Types implements Node {
  id: ID!
  rowId: Int!
  bigint: Int
  boolean: Boolean
  varchar: String
  enum: Color
  domain: AnInt
  domain2: AnotherInt
  compoundType: CompoundType
  nestedCompoundType: NestedCompoundType
}

type TypesConnection {
  pageInfo: PageInfo!
  totalCount: Int
  edges: [TypesEdge]
  nodes: [Types!]
}

type TypesEdge {
  cursor: Cursor!
  node: Types!
}

enum TypesOrderBy {
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  NATURAL
  ID_ASC
  ID_DESC
  BIGINT_ASC
  BIGINT_DESC
  BOOLEAN_ASC
  BOOLEAN_DESC
  VARCHAR_ASC
  VARCHAR_DESC
  ENUM_ASC
  ENUM_DESC
  DOMAIN_ASC
  DOMAIN_DESC
  DOMAIN2_ASC
  DOMAIN2_DESC
  COMPOUND_TYPE_ASC
  COMPOUND_TYPE_DESC
  NESTED_COMPOUND_TYPE_ASC
  NESTED_COMPOUND_TYPE_DESC
}

# YOYOYO!!
type UpdatableView {
  x: Int
  name: String
  description: String

  # This is constantly 2
  constant: Int
}

type UpdatableViewsConnection {
  pageInfo: PageInfo!
  totalCount: Int
  edges: [UpdatableViewsEdge]
  nodes: [UpdatableView!]
}

type UpdatableViewsEdge {
  cursor: Cursor!
  node: UpdatableView!
}

enum UpdatableViewsOrderBy {
  NATURAL
  X_ASC
  X_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  CONSTANT_ASC
  CONSTANT_DESC
}

# A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
scalar Uuid
"
`;
