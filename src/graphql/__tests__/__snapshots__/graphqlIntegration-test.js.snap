exports[`test will generate the correct forum schema 1`] = `
"input CreatePersonInput {
  clientMutationId: String
  person: PersonInput!
}

type CreatePersonPayload {
  clientMutationId: String
  person: Person
  personEdge(orderBy: PeopleOrderBy = ID_ASC): PeopleEdge
  query: Query
}

input CreatePostInput {
  clientMutationId: String
  post: PostInput!
}

type CreatePostPayload {
  clientMutationId: String
  post: Post
  postEdge(orderBy: PostsOrderBy = ID_ASC): PostsEdge
  query: Query
}

scalar Cursor

scalar Email

type Mutation {
  createPerson(input: CreatePersonInput!): CreatePersonPayload
  createPost(input: CreatePostInput!): CreatePostPayload
}

interface Node {
  __id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

type PeopleConnection {
  pageInfo: PageInfo!
  totalCount: Int
  edges: [PeopleEdge]
  nodes: [Person!]
}

type PeopleEdge {
  cursor: Cursor!
  node: Person!
}

enum PeopleOrderBy {
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
}

type Person implements Node {
  __id: ID!
  id: Int!
  name: String!
  email: Email!
  firstName: String
  lastName: String
  about: String
}

input PersonInput {
  id: Int!
  name: String!
  email: Email!
  firstName: String
  lastName: String
  about: String
}

type Post implements Node {
  __id: ID!
  id: Int!
  authorId: Int!
  status: PostStatus!
  headline: String!
  body: String
  personByAuthor: Person
}

input PostInput {
  id: Int!
  authorId: Int!
  status: PostStatus!
  headline: String!
  body: String
}

type PostsConnection {
  pageInfo: PageInfo!
  totalCount: Int
  edges: [PostsEdge]
  nodes: [Post!]
}

type PostsEdge {
  cursor: Cursor!
  node: Post!
}

enum PostsOrderBy {
  ID_ASC
  ID_DESC
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  STATUS_ASC
  STATUS_DESC
  HEADLINE_ASC
  HEADLINE_DESC
}

enum PostStatus {
  UNPUBLISHED
  PUBLISHED
}

type Query {
  node(__id: ID!): Node
  allPeople(orderBy: PeopleOrderBy = ID_ASC, before: Cursor, after: Cursor, first: Int, last: Int): PeopleConnection
  person(__id: ID!): Person
  personById(id: Int!): Person
  personByName(name: String!): Person
  personByEmail(email: String!): Person
  allPosts(orderBy: PostsOrderBy = ID_ASC, before: Cursor, after: Cursor, first: Int, last: Int): PostsConnection
  post(__id: ID!): Post
  postById(id: Int!): Post

  # Exposes the root query type nested one level down. This is helpful for Relay 1
  # which can only query top level fields if they are in a particular form.
  relay: Query!
}
"
`;
